// @generated by protoc-gen-es v0.1.0 with parameter "target=ts"
// @generated from file proto/clarifai/api/utils/matrix.proto (syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * Store matrix of uint64s values.
 * It is recommended to store the matrix as a 1D array
 * because it produces less bytes during serialization than a 2D array.
 * The matrix does store the number of columns, but it does not store the number of rows.
 * The number of rows can automatically be calculated as length(data)/n_cols.
 *
 * @generated from message MatrixUint64
 */
export class MatrixUint64 extends Message<MatrixUint64> {
  /**
   * Number of columns
   *
   * @generated from field: uint64 n_cols = 1;
   */
  nCols = protoInt64.zero;

  /**
   * Matrix data stored as an array.
   * In order to access matrix element at row i & column j, use data[i*n_cols+j].
   *
   * @generated from field: repeated uint64 data = 2;
   */
  data: bigint[] = [];

  constructor(data?: PartialMessage<MatrixUint64>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "MatrixUint64";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "n_cols", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "data", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatrixUint64 {
    return new MatrixUint64().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatrixUint64 {
    return new MatrixUint64().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatrixUint64 {
    return new MatrixUint64().fromJsonString(jsonString, options);
  }

  static equals(a: MatrixUint64 | PlainMessage<MatrixUint64> | undefined, b: MatrixUint64 | PlainMessage<MatrixUint64> | undefined): boolean {
    return proto3.util.equals(MatrixUint64, a, b);
  }
}

