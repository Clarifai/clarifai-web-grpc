// @generated by protoc-gen-es v0.1.0 with parameter "target=ts"
// @generated from file proto/clarifai/api/utils/test_proto.proto (package clarifai.api.utils, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message clarifai.api.utils.TestProto
 */
export class TestProto extends Message<TestProto> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: double value = 3;
   */
  value = 0;

  /**
   * @generated from field: bytes image_bytes = 4;
   */
  imageBytes = new Uint8Array(0);

  /**
   * @generated from oneof clarifai.api.utils.TestProto.one_of_field
   */
  oneOfField: {
    /**
     * @generated from field: string string_oneof = 5;
     */
    value: string;
    case: "stringOneof";
  } | {
    /**
     * @generated from field: bool bool_oneof = 6;
     */
    value: boolean;
    case: "boolOneof";
  } | {
    /**
     * @generated from field: clarifai.api.utils.TestProto2 message_oneof = 7;
     */
    value: TestProto2;
    case: "messageOneof";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TestProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.utils.TestProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "image_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "string_oneof", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "one_of_field" },
    { no: 6, name: "bool_oneof", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "one_of_field" },
    { no: 7, name: "message_oneof", kind: "message", T: TestProto2, oneof: "one_of_field" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestProto {
    return new TestProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestProto {
    return new TestProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestProto {
    return new TestProto().fromJsonString(jsonString, options);
  }

  static equals(a: TestProto | PlainMessage<TestProto> | undefined, b: TestProto | PlainMessage<TestProto> | undefined): boolean {
    return proto3.util.equals(TestProto, a, b);
  }
}

/**
 * @generated from message clarifai.api.utils.TestProto2
 */
export class TestProto2 extends Message<TestProto2> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bool flip = 2;
   */
  flip = false;

  constructor(data?: PartialMessage<TestProto2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.utils.TestProto2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "flip", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestProto2 {
    return new TestProto2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestProto2 {
    return new TestProto2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestProto2 {
    return new TestProto2().fromJsonString(jsonString, options);
  }

  static equals(a: TestProto2 | PlainMessage<TestProto2> | undefined, b: TestProto2 | PlainMessage<TestProto2> | undefined): boolean {
    return proto3.util.equals(TestProto2, a, b);
  }
}

