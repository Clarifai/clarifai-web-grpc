// @generated by protoc-gen-es v0.1.0 with parameter "target=ts"
// @generated from file proto/clarifai/api/status/status.proto (package clarifai.api.status, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {StatusCode} from "./status_code_pb.js";

/**
 * @generated from message clarifai.api.status.Status
 */
export class Status extends Message<Status> {
  /**
   * Status code from internal codes.
   *
   * @generated from field: clarifai.api.status.StatusCode code = 1;
   */
  code = StatusCode.ZERO;

  /**
   * A longer description of the error.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * More details of the given error.
   *
   * @generated from field: string details = 3;
   */
  details = "";

  /**
   * For some environment we may return a stack trace to help debug
   * any issues.
   *
   * @generated from field: repeated string stack_trace = 4;
   */
  stackTrace: string[] = [];

  /**
   * specifically for long running jobs
   *
   * @generated from field: uint32 percent_completed = 5;
   */
  percentCompleted = 0;

  /**
   * if status is pending, how much time is remaining (in seconds)
   *
   * @generated from field: uint32 time_remaining = 6;
   */
  timeRemaining = 0;

  /**
   * If we want to return a request id in the base status field
   *
   * @generated from field: string req_id = 7;
   */
  reqId = "";

  /**
   * Internal Annotation (do not set in production, for internal Clarifai use only).
   *
   * @generated from field: string internal_details = 8;
   */
  internalDetails = "";

  /**
   * Resource location info for redirect, when resource location has been changed.
   *
   * @generated from field: clarifai.api.status.RedirectInfo redirect_info = 9;
   */
  redirectInfo?: RedirectInfo;

  constructor(data?: PartialMessage<Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.status.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(StatusCode) },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "stack_trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "percent_completed", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "time_remaining", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "req_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "internal_details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "redirect_info", kind: "message", T: RedirectInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Status {
    return new Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Status {
    return new Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Status {
    return new Status().fromJsonString(jsonString, options);
  }

  static equals(a: Status | PlainMessage<Status> | undefined, b: Status | PlainMessage<Status> | undefined): boolean {
    return proto3.util.equals(Status, a, b);
  }
}

/**
 * @generated from message clarifai.api.status.RedirectInfo
 */
export class RedirectInfo extends Message<RedirectInfo> {
  /**
   * New location for the resource. Used to set response Location header.
   *
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * Resource type
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType = "";

  /**
   * Old resource id
   *
   * @generated from field: string old_resource_id = 3;
   */
  oldResourceId = "";

  /**
   * New resource id
   *
   * @generated from field: string new_resource_id = 4;
   */
  newResourceId = "";

  constructor(data?: PartialMessage<RedirectInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.status.RedirectInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "old_resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new_resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedirectInfo {
    return new RedirectInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedirectInfo {
    return new RedirectInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedirectInfo {
    return new RedirectInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RedirectInfo | PlainMessage<RedirectInfo> | undefined, b: RedirectInfo | PlainMessage<RedirectInfo> | undefined): boolean {
    return proto3.util.equals(RedirectInfo, a, b);
  }
}

/**
 * Base message to return when there is a internal server error that
 * is not caught elsewhere.
 *
 * @generated from message clarifai.api.status.BaseResponse
 */
export class BaseResponse extends Message<BaseResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<BaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.status.BaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BaseResponse {
    return new BaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BaseResponse {
    return new BaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BaseResponse {
    return new BaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BaseResponse | PlainMessage<BaseResponse> | undefined, b: BaseResponse | PlainMessage<BaseResponse> | undefined): boolean {
    return proto3.util.equals(BaseResponse, a, b);
  }
}

