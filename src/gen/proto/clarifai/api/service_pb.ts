/////////////////////////////////////////////// WARNING ///////////////////////////////////////////////
// Be aware that if you decide to add comments to this or any other non-private file, they could     //
// end up in our *public* auto-generated swagger documentation. In order to ensure that your         //
// comments are not included in our swagger docs, put one line of whitespace between your comment    //
// and any proto definitions.                                                                        //
///////////////////////////////////////////////////////////////////////////////////////////////////////

// @generated by protoc-gen-es v0.1.0 with parameter "target=ts"
// @generated from file proto/clarifai/api/service.proto (package clarifai.api, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Duration, ListValue, Message, proto3, protoInt64, Struct, Timestamp, Value} from "@bufbuild/protobuf";
import {Status} from "./status/status_pb.js";
import {Annotation, AnnotationFilter, AnnotationSearchMetrics, App, AppDuplication, AppQuery, AppStar, AttributeQuery, AuthMethod, BillingCycle, BulkOperation, Cluster, Collaboration, Collaborator, Collector, Concept, ConceptCount, ConceptLanguage, ConceptMapping, ConceptMappingJob, ConceptQuery, ConceptReference, ConceptRelation, CreditCard, Data, Dataset, DatasetInput, DatasetInputsSearchAddJob, DatasetVersion, DatasetVersionExport, DatasetVersionMetricsGroup, DatasetVersionMetricsGroupType, DeviceInfo, DimensionList, EmailAddress, EndpointDeps, EvalInfo, EvalMetrics, EvaluationType, EventsCollection, FieldsValue, FindDuplicateAnnotationsJob, Hit, HostAppInfo, IdentityProvider, Input, InputCount, InputsAddJob, InstalledModuleVersion, InvoiceItem, Key, KnowledgeGraph, LabelOrder, License, LicenseLimit, Model, ModelQuery, ModelReference, ModelStar, ModelType, ModelTypeField, ModelVersion, ModelVersionInputExample, Module, ModuleVersion, OpCountByDate, OperatingSystem, Organization, OrganizationInvitation, OrganizationMember, Output, OutputConfig, Password, PasswordPolicy, PasswordViolations, PatchAction, PatchWebNotification, Plan, Query, RealtimeCount, Role, RoleType, ScopeDeps, SDK, SDKBillingCycle, SDKEventsCollection, Search, ShippingAddress, State, StatValue, StatValueAggregateQuery, StatValueAggregateResult, TagCategory, Task, TaskStatusCountPerUser, Team, TeamUser, TrendingMetric, TwoFactorAuthMethod, Upload, UploadContentPart, UsageCycle, UsageInterval, User, UserAccess, UserAppIDSet, UserInfo, UserPassword, UserStar, Validation, ValidationResult, Vocab, WaitlistEmail, WebNotification, Workflow, WorkflowMetrics, WorkflowResult, WorkflowResultsSimilarity, WorkflowStar, WorkflowState, WorkflowVersion} from "./resources_pb.js";
import {StatusCode} from "./status/status_code_pb.js";
import {S} from "../auth/scope/scope_pb.js";
import {Commands} from "../commands/commands_pb.js";

/**
 * OrganizationInvitationStatus
 *
 * @generated from enum clarifai.api.OrganizationInvitationStatus
 */
export enum OrganizationInvitationStatus {
  /**
   * @generated from enum value: NOT_SET = 0;
   */
  NOT_SET = 0,

  /**
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: ACCEPTED = 2;
   */
  ACCEPTED = 2,

  /**
   * @generated from enum value: CANCELLED = 3;
   */
  CANCELLED = 3,

  /**
   * @generated from enum value: DECLINED = 4;
   */
  DECLINED = 4,

  /**
   * @generated from enum value: EXPIRED = 5;
   */
  EXPIRED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(OrganizationInvitationStatus)
proto3.util.setEnumType(OrganizationInvitationStatus, "clarifai.api.OrganizationInvitationStatus", [
  { no: 0, name: "NOT_SET" },
  { no: 1, name: "PENDING" },
  { no: 2, name: "ACCEPTED" },
  { no: 3, name: "CANCELLED" },
  { no: 4, name: "DECLINED" },
  { no: 5, name: "EXPIRED" },
]);

/**
 * @generated from message clarifai.api.TestMessage
 */
export class TestMessage extends Message<TestMessage> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: bytes byts = 3;
   */
  byts = new Uint8Array(0);

  /**
   * @generated from field: uint32 int_32 = 4;
   */
  int32 = 0;

  /**
   * @generated from field: uint64 int_64 = 5;
   */
  int64 = protoInt64.zero;

  /**
   * @generated from field: float f_32 = 6;
   */
  f32 = 0;

  /**
   * @generated from field: double f_64 = 7;
   */
  f64 = 0;

  /**
   * To handle arbitrary json you can use a struct field:
   * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
   *
   * @generated from field: google.protobuf.Struct s = 8;
   */
  s?: Struct;

  constructor(data?: PartialMessage<TestMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.TestMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "byts", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "int_32", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "int_64", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "f_32", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "f_64", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "s", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMessage {
    return new TestMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMessage {
    return new TestMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMessage {
    return new TestMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestMessage | PlainMessage<TestMessage> | undefined, b: TestMessage | PlainMessage<TestMessage> | undefined): boolean {
    return proto3.util.equals(TestMessage, a, b);
  }
}

/**
 * Split the results into pages.
 *
 * @generated from message clarifai.api.Pagination
 */
export class Pagination extends Message<Pagination> {
  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks. Defaults to 1.
   *
   * @generated from field: uint32 page = 1;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults to 128.
   *
   * @generated from field: uint32 per_page = 2;
   */
  perPage = 0;

  constructor(data?: PartialMessage<Pagination>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.Pagination";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pagination {
    return new Pagination().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pagination {
    return new Pagination().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pagination {
    return new Pagination().fromJsonString(jsonString, options);
  }

  static equals(a: Pagination | PlainMessage<Pagination> | undefined, b: Pagination | PlainMessage<Pagination> | undefined): boolean {
    return proto3.util.equals(Pagination, a, b);
  }
}

/**
 * GetAnnotationRequest
 *
 * @generated from message clarifai.api.GetAnnotationRequest
 */
export class GetAnnotationRequest extends Message<GetAnnotationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string annotation_id = 2;
   */
  annotationId = "";

  /**
   * @generated from field: string input_id = 3;
   */
  inputId = "";

  constructor(data?: PartialMessage<GetAnnotationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetAnnotationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "annotation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "input_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnnotationRequest {
    return new GetAnnotationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnnotationRequest {
    return new GetAnnotationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnnotationRequest {
    return new GetAnnotationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnnotationRequest | PlainMessage<GetAnnotationRequest> | undefined, b: GetAnnotationRequest | PlainMessage<GetAnnotationRequest> | undefined): boolean {
    return proto3.util.equals(GetAnnotationRequest, a, b);
  }
}

/**
 * ListAnnotationsRequest
 *
 * @generated from message clarifai.api.ListAnnotationsRequest
 */
export class ListAnnotationsRequest extends Message<ListAnnotationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List annotations for these IDs
   *
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  /**
   * List annotations for these Input IDs
   * Note that 'ids' are optional but if the are provided the number and order in
   * 'ids' and 'input_ids' should match
   * If you do not specify 'ids' all the annotations for 'input_ids' are returned
   * If a you do not specify both 'input_ids' and 'ids' all the annotations in the app are returned
   *
   * @generated from field: repeated string input_ids = 3;
   */
  inputIds: string[] = [];

  /**
   * Only return the annotations that has one of these user IDs, effectively operating as an
   * OR among them to filter down the results.
   * If model_version_ids are also provided these user_ids are OR'd with them as well since
   * annotations are either provided by users or model versions and we want the union of any
   * provided user or model version annotations in the results of ListAnnotations request.
   * If no user_ids are provided then annotations from all users are returned.
   *
   * @generated from field: repeated string user_ids = 9;
   */
  userIds: string[] = [];

  /**
   * Only return the annotations that has one of these model version IDs, effectively operating as an
   * OR among them to filter down the results.
   * If user_ids are also provided these model_versions_ids are OR'd with them as well since
   * annotations are either provided by users or model versions and we want the union of any
   * provided user or model version annotations in the results of ListAnnotations request.
   * If no model_version_ids are provided then annotations from all model versions are returned.
   *
   * @generated from field: repeated string model_version_ids = 10;
   */
  modelVersionIds: string[] = [];

  /**
   * Set status to filter by a list of statuses
   * If not statuses are provided then annotations with any status will be returned.
   *
   * @generated from field: repeated clarifai.api.status.Status statuses = 5;
   */
  statuses: Status[] = [];

  /**
   * Set this flag to list both trusted and not trusted annotations
   * by default it's listing only trusted annotations
   *
   * @generated from field: bool list_all_annotations = 6;
   */
  listAllAnnotations = false;

  /**
   * Set this flag to return the model output for model annotations in the response.
   *
   * @generated from field: bool return_model_output = 12;
   */
  returnModelOutput = false;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 7;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 8;
   */
  perPage = 0;

  /**
   * Flag to filter annotations by task_id
   *
   * @generated from field: string task_id = 11;
   */
  taskId = "";

  constructor(data?: PartialMessage<ListAnnotationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAnnotationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "input_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "model_version_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "statuses", kind: "message", T: Status, repeated: true },
    { no: 6, name: "list_all_annotations", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "return_model_output", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAnnotationsRequest {
    return new ListAnnotationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAnnotationsRequest {
    return new ListAnnotationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAnnotationsRequest {
    return new ListAnnotationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAnnotationsRequest | PlainMessage<ListAnnotationsRequest> | undefined, b: ListAnnotationsRequest | PlainMessage<ListAnnotationsRequest> | undefined): boolean {
    return proto3.util.equals(ListAnnotationsRequest, a, b);
  }
}

/**
 * PostAnnotationsRequest
 *
 * @generated from message clarifai.api.PostAnnotationsRequest
 */
export class PostAnnotationsRequest extends Message<PostAnnotationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Annotation annotations = 2;
   */
  annotations: Annotation[] = [];

  constructor(data?: PartialMessage<PostAnnotationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAnnotationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "annotations", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAnnotationsRequest {
    return new PostAnnotationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAnnotationsRequest {
    return new PostAnnotationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAnnotationsRequest {
    return new PostAnnotationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAnnotationsRequest | PlainMessage<PostAnnotationsRequest> | undefined, b: PostAnnotationsRequest | PlainMessage<PostAnnotationsRequest> | undefined): boolean {
    return proto3.util.equals(PostAnnotationsRequest, a, b);
  }
}

/**
 * PatchAnnotationsRequest
 *
 * @generated from message clarifai.api.PatchAnnotationsRequest
 */
export class PatchAnnotationsRequest extends Message<PatchAnnotationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Annotation annotations = 2;
   */
  annotations: Annotation[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchAnnotationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAnnotationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "annotations", kind: "message", T: Annotation, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAnnotationsRequest {
    return new PatchAnnotationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAnnotationsRequest {
    return new PatchAnnotationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAnnotationsRequest {
    return new PatchAnnotationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAnnotationsRequest | PlainMessage<PatchAnnotationsRequest> | undefined, b: PatchAnnotationsRequest | PlainMessage<PatchAnnotationsRequest> | undefined): boolean {
    return proto3.util.equals(PatchAnnotationsRequest, a, b);
  }
}

/**
 * PatchAnnotationsStatusRequest
 *
 * @generated from message clarifai.api.PatchAnnotationsStatusRequest
 */
export class PatchAnnotationsStatusRequest extends Message<PatchAnnotationsStatusRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Annotation Status code
   *
   * @generated from field: clarifai.api.status.StatusCode status_code = 2;
   */
  statusCode = StatusCode.ZERO;

  /**
   * @generated from field: repeated string user_ids = 3;
   */
  userIds: string[] = [];

  /**
   * @generated from field: string task_id = 4;
   */
  taskId = "";

  /**
   * 'overwrite' is supported
   *
   * @generated from field: string action = 5;
   */
  action = "";

  constructor(data?: PartialMessage<PatchAnnotationsStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAnnotationsStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "status_code", kind: "enum", T: proto3.getEnumType(StatusCode) },
    { no: 3, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAnnotationsStatusRequest {
    return new PatchAnnotationsStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAnnotationsStatusRequest {
    return new PatchAnnotationsStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAnnotationsStatusRequest {
    return new PatchAnnotationsStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAnnotationsStatusRequest | PlainMessage<PatchAnnotationsStatusRequest> | undefined, b: PatchAnnotationsStatusRequest | PlainMessage<PatchAnnotationsStatusRequest> | undefined): boolean {
    return proto3.util.equals(PatchAnnotationsStatusRequest, a, b);
  }
}

/**
 * PatchAnnotationsStatusResponse
 *
 * @generated from message clarifai.api.PatchAnnotationsStatusResponse
 */
export class PatchAnnotationsStatusResponse extends Message<PatchAnnotationsStatusResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated string user_ids = 2;
   */
  userIds: string[] = [];

  /**
   * @generated from field: uint32 updated_count = 3;
   */
  updatedCount = 0;

  constructor(data?: PartialMessage<PatchAnnotationsStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAnnotationsStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "updated_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAnnotationsStatusResponse {
    return new PatchAnnotationsStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAnnotationsStatusResponse {
    return new PatchAnnotationsStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAnnotationsStatusResponse {
    return new PatchAnnotationsStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAnnotationsStatusResponse | PlainMessage<PatchAnnotationsStatusResponse> | undefined, b: PatchAnnotationsStatusResponse | PlainMessage<PatchAnnotationsStatusResponse> | undefined): boolean {
    return proto3.util.equals(PatchAnnotationsStatusResponse, a, b);
  }
}

/**
 * DeleteAnnotationRequest
 *
 * @generated from message clarifai.api.DeleteAnnotationRequest
 */
export class DeleteAnnotationRequest extends Message<DeleteAnnotationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string input_id = 2;
   */
  inputId = "";

  /**
   * @generated from field: string annotation_id = 3;
   */
  annotationId = "";

  constructor(data?: PartialMessage<DeleteAnnotationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteAnnotationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "input_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "annotation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAnnotationRequest {
    return new DeleteAnnotationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAnnotationRequest {
    return new DeleteAnnotationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAnnotationRequest {
    return new DeleteAnnotationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAnnotationRequest | PlainMessage<DeleteAnnotationRequest> | undefined, b: DeleteAnnotationRequest | PlainMessage<DeleteAnnotationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAnnotationRequest, a, b);
  }
}

/**
 * Request to delete several things by the list of ids.
 *
 * @generated from message clarifai.api.DeleteAnnotationsRequest
 */
export class DeleteAnnotationsRequest extends Message<DeleteAnnotationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Delete annotations with IDs
   *
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  /**
   * Delete annotations for these Input IDs
   * Note that 'ids' are optional but if the are provided the number and order in
   * 'ids' and 'input_ids' should match
   * If you do not specifiy 'ids' all the annotations for 'input_ids' are deleted
   * However you need to specify at least one value for 'input_ids'
   * i.e. this API does not support deleting all annotations
   *
   * @generated from field: repeated string input_ids = 3;
   */
  inputIds: string[] = [];

  constructor(data?: PartialMessage<DeleteAnnotationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteAnnotationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "input_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAnnotationsRequest {
    return new DeleteAnnotationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAnnotationsRequest {
    return new DeleteAnnotationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAnnotationsRequest {
    return new DeleteAnnotationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAnnotationsRequest | PlainMessage<DeleteAnnotationsRequest> | undefined, b: DeleteAnnotationsRequest | PlainMessage<DeleteAnnotationsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAnnotationsRequest, a, b);
  }
}

/**
 * SingleAnnotationResponse
 *
 * @generated from message clarifai.api.SingleAnnotationResponse
 */
export class SingleAnnotationResponse extends Message<SingleAnnotationResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Annotation annotation = 2;
   */
  annotation?: Annotation;

  constructor(data?: PartialMessage<SingleAnnotationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleAnnotationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "annotation", kind: "message", T: Annotation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleAnnotationResponse {
    return new SingleAnnotationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleAnnotationResponse {
    return new SingleAnnotationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleAnnotationResponse {
    return new SingleAnnotationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleAnnotationResponse | PlainMessage<SingleAnnotationResponse> | undefined, b: SingleAnnotationResponse | PlainMessage<SingleAnnotationResponse> | undefined): boolean {
    return proto3.util.equals(SingleAnnotationResponse, a, b);
  }
}

/**
 * MultiAnnotationResponse
 *
 * @generated from message clarifai.api.MultiAnnotationResponse
 */
export class MultiAnnotationResponse extends Message<MultiAnnotationResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Annotation annotations = 2;
   */
  annotations: Annotation[] = [];

  constructor(data?: PartialMessage<MultiAnnotationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiAnnotationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "annotations", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiAnnotationResponse {
    return new MultiAnnotationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiAnnotationResponse {
    return new MultiAnnotationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiAnnotationResponse {
    return new MultiAnnotationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiAnnotationResponse | PlainMessage<MultiAnnotationResponse> | undefined, b: MultiAnnotationResponse | PlainMessage<MultiAnnotationResponse> | undefined): boolean {
    return proto3.util.equals(MultiAnnotationResponse, a, b);
  }
}

/**
 * GetAppRequest
 *
 * @generated from message clarifai.api.GetAppRequest
 */
export class GetAppRequest extends Message<GetAppRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
   *
   * @generated from field: repeated string additional_fields = 2;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<GetAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppRequest {
    return new GetAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppRequest {
    return new GetAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppRequest {
    return new GetAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppRequest | PlainMessage<GetAppRequest> | undefined, b: GetAppRequest | PlainMessage<GetAppRequest> | undefined): boolean {
    return proto3.util.equals(GetAppRequest, a, b);
  }
}

/**
 * ListAppsRequest
 *
 * @generated from message clarifai.api.ListAppsRequest
 */
export class ListAppsRequest extends Message<ListAppsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  /**
   * Sorting opitons:
   * Whether to sort in ascending order. If false, will order in descending order.
   *
   * @generated from field: bool sort_ascending = 5;
   */
  sortAscending = false;

  /**
   * @generated from oneof clarifai.api.ListAppsRequest.sort_by
   */
  sortBy: {
    /**
     * Whether to order by the name
     *
     * @generated from field: bool sort_by_name = 6;
     */
    value: boolean;
    case: "sortByName";
  } | {
    /**
     * Whether to order by the modified_at time.
     * If neither sort option is set to true, will sort by modified_at.
     *
     * @generated from field: bool sort_by_modified_at = 7;
     */
    value: boolean;
    case: "sortByModifiedAt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Filtering options:
   * Query various text fields that can contain the words in the query string
   *
   * @generated from field: string query = 8;
   */
  query = "";

  /**
   * Filter by the name of the app. This supports wilcard queries like "gen*" to match "general" as an example.
   * Deprecated in favor of query
   *
   * @generated from field: string name = 4 [deprecated = true];
   * @deprecated
   */
  name = "";

  /**
   * If true, we only return apps that are handpicked by clarifai staff
   *
   * @generated from field: bool featured_only = 9;
   */
  featuredOnly = false;

  /**
   * If true, we only return apps that are starred by the requesting user
   *
   * @generated from field: bool starred_only = 11;
   */
  starredOnly = false;

  /**
   * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
   *
   * @generated from field: repeated string additional_fields = 10;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<ListAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "sort_ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "sort_by_name", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 7, name: "sort_by_modified_at", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 8, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "featured_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "starred_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppsRequest | PlainMessage<ListAppsRequest> | undefined, b: ListAppsRequest | PlainMessage<ListAppsRequest> | undefined): boolean {
    return proto3.util.equals(ListAppsRequest, a, b);
  }
}

/**
 * PostAppsRequest
 *
 * @generated from message clarifai.api.PostAppsRequest
 */
export class PostAppsRequest extends Message<PostAppsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.App apps = 2;
   */
  apps: App[] = [];

  constructor(data?: PartialMessage<PostAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "apps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAppsRequest {
    return new PostAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAppsRequest {
    return new PostAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAppsRequest {
    return new PostAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAppsRequest | PlainMessage<PostAppsRequest> | undefined, b: PostAppsRequest | PlainMessage<PostAppsRequest> | undefined): boolean {
    return proto3.util.equals(PostAppsRequest, a, b);
  }
}

/**
 * DeleteAppRequest
 *
 * @generated from message clarifai.api.DeleteAppRequest
 */
export class DeleteAppRequest extends Message<DeleteAppRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<DeleteAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined, b: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAppRequest, a, b);
  }
}

/**
 * PatchAppsRequest
 *
 * @generated from message clarifai.api.PatchAppsRequest
 */
export class PatchAppsRequest extends Message<PatchAppsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.App apps = 2;
   */
  apps: App[] = [];

  /**
   * The action to perform on the patched App objects except App.Metadata
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * The action to perform on the patched App.Metadata
   *
   * @generated from field: clarifai.api.PatchAction metadata_action = 4;
   */
  metadataAction?: PatchAction;

  /**
   * If set, the app will be automatically reindexed upon change of its base workflow.
   *
   * @generated from field: bool reindex = 5;
   */
  reindex = false;

  constructor(data?: PartialMessage<PatchAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "apps", kind: "message", T: App, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata_action", kind: "message", T: PatchAction },
    { no: 5, name: "reindex", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAppsRequest {
    return new PatchAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAppsRequest {
    return new PatchAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAppsRequest {
    return new PatchAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAppsRequest | PlainMessage<PatchAppsRequest> | undefined, b: PatchAppsRequest | PlainMessage<PatchAppsRequest> | undefined): boolean {
    return proto3.util.equals(PatchAppsRequest, a, b);
  }
}

/**
 * PatchAppRequest
 *
 * @generated from message clarifai.api.PatchAppRequest
 */
export class PatchAppRequest extends Message<PatchAppRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: clarifai.api.App app = 2;
   */
  app?: App;

  /**
   * The action to perform on the patched App object except App.Metadata
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * The action to perform on the patched App.Metadata
   *
   * @generated from field: clarifai.api.PatchAction metadata_action = 4;
   */
  metadataAction?: PatchAction;

  /**
   * If set, the app will be automatically reindexed upon change of its base workflow.
   *
   * @generated from field: bool reindex = 5;
   */
  reindex = false;

  constructor(data?: PartialMessage<PatchAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "app", kind: "message", T: App },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata_action", kind: "message", T: PatchAction },
    { no: 5, name: "reindex", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAppRequest {
    return new PatchAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAppRequest {
    return new PatchAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAppRequest {
    return new PatchAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAppRequest | PlainMessage<PatchAppRequest> | undefined, b: PatchAppRequest | PlainMessage<PatchAppRequest> | undefined): boolean {
    return proto3.util.equals(PatchAppRequest, a, b);
  }
}

/**
 * PatchAppsIdsRequest
 *
 * @generated from message clarifai.api.PatchAppsIdsRequest
 */
export class PatchAppsIdsRequest extends Message<PatchAppsIdsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Array containing 1 entry
   *
   * @generated from field: repeated clarifai.api.IdUpdateSource ids = 3;
   */
  ids: IdUpdateSource[] = [];

  /**
   * The action to perform on the patched objects
   * Only 'overwrite' is supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchAppsIdsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAppsIdsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 3, name: "ids", kind: "message", T: IdUpdateSource, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAppsIdsRequest {
    return new PatchAppsIdsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAppsIdsRequest {
    return new PatchAppsIdsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAppsIdsRequest {
    return new PatchAppsIdsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAppsIdsRequest | PlainMessage<PatchAppsIdsRequest> | undefined, b: PatchAppsIdsRequest | PlainMessage<PatchAppsIdsRequest> | undefined): boolean {
    return proto3.util.equals(PatchAppsIdsRequest, a, b);
  }
}

/**
 * Search over the available applications.
 *
 * @generated from message clarifai.api.PostAppsSearchesRequest
 */
export class PostAppsSearchesRequest extends Message<PostAppsSearchesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The body of the request.
   *
   * @generated from field: clarifai.api.AppQuery app_query = 2;
   */
  appQuery?: AppQuery;

  /**
   * Pagination parameters here since there are no url args in this
   * POST request.
   *
   * @generated from field: clarifai.api.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<PostAppsSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAppsSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "app_query", kind: "message", T: AppQuery },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAppsSearchesRequest {
    return new PostAppsSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAppsSearchesRequest {
    return new PostAppsSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAppsSearchesRequest {
    return new PostAppsSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAppsSearchesRequest | PlainMessage<PostAppsSearchesRequest> | undefined, b: PostAppsSearchesRequest | PlainMessage<PostAppsSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PostAppsSearchesRequest, a, b);
  }
}

/**
 * SingleAppResponse
 *
 * @generated from message clarifai.api.SingleAppResponse
 */
export class SingleAppResponse extends Message<SingleAppResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.App app = 2;
   */
  app?: App;

  constructor(data?: PartialMessage<SingleAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "app", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleAppResponse {
    return new SingleAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleAppResponse {
    return new SingleAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleAppResponse {
    return new SingleAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleAppResponse | PlainMessage<SingleAppResponse> | undefined, b: SingleAppResponse | PlainMessage<SingleAppResponse> | undefined): boolean {
    return proto3.util.equals(SingleAppResponse, a, b);
  }
}

/**
 * MultiAppResponse
 *
 * @generated from message clarifai.api.MultiAppResponse
 */
export class MultiAppResponse extends Message<MultiAppResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.App apps = 2;
   */
  apps: App[] = [];

  constructor(data?: PartialMessage<MultiAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "apps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiAppResponse {
    return new MultiAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiAppResponse {
    return new MultiAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiAppResponse {
    return new MultiAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiAppResponse | PlainMessage<MultiAppResponse> | undefined, b: MultiAppResponse | PlainMessage<MultiAppResponse> | undefined): boolean {
    return proto3.util.equals(MultiAppResponse, a, b);
  }
}

/**
 * ListCollaboratorsRequest
 *
 * @generated from message clarifai.api.ListCollaboratorsRequest
 */
export class ListCollaboratorsRequest extends Message<ListCollaboratorsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Set this flag to list both deleted and not deleted collaborators
   * by default it's listing only not deleted collaborators
   *
   * @generated from field: bool list_all_collaborators = 2;
   */
  listAllCollaborators = false;

  constructor(data?: PartialMessage<ListCollaboratorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListCollaboratorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "list_all_collaborators", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCollaboratorsRequest {
    return new ListCollaboratorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCollaboratorsRequest {
    return new ListCollaboratorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCollaboratorsRequest {
    return new ListCollaboratorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCollaboratorsRequest | PlainMessage<ListCollaboratorsRequest> | undefined, b: ListCollaboratorsRequest | PlainMessage<ListCollaboratorsRequest> | undefined): boolean {
    return proto3.util.equals(ListCollaboratorsRequest, a, b);
  }
}

/**
 * PostCollaboratorsRequest
 *
 * @generated from message clarifai.api.PostCollaboratorsRequest
 */
export class PostCollaboratorsRequest extends Message<PostCollaboratorsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Collaborator collaborators = 2;
   */
  collaborators: Collaborator[] = [];

  constructor(data?: PartialMessage<PostCollaboratorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostCollaboratorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "collaborators", kind: "message", T: Collaborator, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostCollaboratorsRequest {
    return new PostCollaboratorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostCollaboratorsRequest {
    return new PostCollaboratorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostCollaboratorsRequest {
    return new PostCollaboratorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostCollaboratorsRequest | PlainMessage<PostCollaboratorsRequest> | undefined, b: PostCollaboratorsRequest | PlainMessage<PostCollaboratorsRequest> | undefined): boolean {
    return proto3.util.equals(PostCollaboratorsRequest, a, b);
  }
}

/**
 * PatchCollaboratorsRequest
 *
 * @generated from message clarifai.api.PatchCollaboratorsRequest
 */
export class PatchCollaboratorsRequest extends Message<PatchCollaboratorsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Collaborator collaborators = 2;
   */
  collaborators: Collaborator[] = [];

  /**
   * The action to perform on the patched objects
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchCollaboratorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchCollaboratorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "collaborators", kind: "message", T: Collaborator, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchCollaboratorsRequest {
    return new PatchCollaboratorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchCollaboratorsRequest {
    return new PatchCollaboratorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchCollaboratorsRequest {
    return new PatchCollaboratorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchCollaboratorsRequest | PlainMessage<PatchCollaboratorsRequest> | undefined, b: PatchCollaboratorsRequest | PlainMessage<PatchCollaboratorsRequest> | undefined): boolean {
    return proto3.util.equals(PatchCollaboratorsRequest, a, b);
  }
}

/**
 * DeleteCollaboratorsRequest
 *
 * @generated from message clarifai.api.DeleteCollaboratorsRequest
 */
export class DeleteCollaboratorsRequest extends Message<DeleteCollaboratorsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string collaborator_ids = 2;
   */
  collaboratorIds: string[] = [];

  /**
   * @generated from field: repeated string user_emails = 3;
   */
  userEmails: string[] = [];

  constructor(data?: PartialMessage<DeleteCollaboratorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteCollaboratorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "collaborator_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "user_emails", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCollaboratorsRequest {
    return new DeleteCollaboratorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCollaboratorsRequest {
    return new DeleteCollaboratorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCollaboratorsRequest {
    return new DeleteCollaboratorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCollaboratorsRequest | PlainMessage<DeleteCollaboratorsRequest> | undefined, b: DeleteCollaboratorsRequest | PlainMessage<DeleteCollaboratorsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCollaboratorsRequest, a, b);
  }
}

/**
 * MultiCollaboratorsResponse
 *
 * @generated from message clarifai.api.MultiCollaboratorsResponse
 */
export class MultiCollaboratorsResponse extends Message<MultiCollaboratorsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Collaborator collaborators = 2;
   */
  collaborators: Collaborator[] = [];

  constructor(data?: PartialMessage<MultiCollaboratorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiCollaboratorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "collaborators", kind: "message", T: Collaborator, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiCollaboratorsResponse {
    return new MultiCollaboratorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiCollaboratorsResponse {
    return new MultiCollaboratorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiCollaboratorsResponse {
    return new MultiCollaboratorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiCollaboratorsResponse | PlainMessage<MultiCollaboratorsResponse> | undefined, b: MultiCollaboratorsResponse | PlainMessage<MultiCollaboratorsResponse> | undefined): boolean {
    return proto3.util.equals(MultiCollaboratorsResponse, a, b);
  }
}

/**
 * ListCollaborationsRequest
 *
 * @generated from message clarifai.api.ListCollaborationsRequest
 */
export class ListCollaborationsRequest extends Message<ListCollaborationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListCollaborationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListCollaborationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCollaborationsRequest {
    return new ListCollaborationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCollaborationsRequest {
    return new ListCollaborationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCollaborationsRequest {
    return new ListCollaborationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCollaborationsRequest | PlainMessage<ListCollaborationsRequest> | undefined, b: ListCollaborationsRequest | PlainMessage<ListCollaborationsRequest> | undefined): boolean {
    return proto3.util.equals(ListCollaborationsRequest, a, b);
  }
}

/**
 * MultiCollaborationsResponse
 *
 * @generated from message clarifai.api.MultiCollaborationsResponse
 */
export class MultiCollaborationsResponse extends Message<MultiCollaborationsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Collaboration collaborations = 2;
   */
  collaborations: Collaboration[] = [];

  constructor(data?: PartialMessage<MultiCollaborationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiCollaborationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "collaborations", kind: "message", T: Collaboration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiCollaborationsResponse {
    return new MultiCollaborationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiCollaborationsResponse {
    return new MultiCollaborationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiCollaborationsResponse {
    return new MultiCollaborationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiCollaborationsResponse | PlainMessage<MultiCollaborationsResponse> | undefined, b: MultiCollaborationsResponse | PlainMessage<MultiCollaborationsResponse> | undefined): boolean {
    return proto3.util.equals(MultiCollaborationsResponse, a, b);
  }
}

/**
 * PostVerifyEmailRequest
 *
 * @generated from message clarifai.api.PostVerifyEmailRequest
 */
export class PostVerifyEmailRequest extends Message<PostVerifyEmailRequest> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<PostVerifyEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostVerifyEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostVerifyEmailRequest {
    return new PostVerifyEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostVerifyEmailRequest {
    return new PostVerifyEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostVerifyEmailRequest {
    return new PostVerifyEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostVerifyEmailRequest | PlainMessage<PostVerifyEmailRequest> | undefined, b: PostVerifyEmailRequest | PlainMessage<PostVerifyEmailRequest> | undefined): boolean {
    return proto3.util.equals(PostVerifyEmailRequest, a, b);
  }
}

/**
 * SingleVerifyEmailResponse
 *
 * @generated from message clarifai.api.SingleVerifyEmailResponse
 */
export class SingleVerifyEmailResponse extends Message<SingleVerifyEmailResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<SingleVerifyEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleVerifyEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleVerifyEmailResponse {
    return new SingleVerifyEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleVerifyEmailResponse {
    return new SingleVerifyEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleVerifyEmailResponse {
    return new SingleVerifyEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleVerifyEmailResponse | PlainMessage<SingleVerifyEmailResponse> | undefined, b: SingleVerifyEmailResponse | PlainMessage<SingleVerifyEmailResponse> | undefined): boolean {
    return proto3.util.equals(SingleVerifyEmailResponse, a, b);
  }
}

/**
 * ListAuthMethodsRequest
 *
 * @generated from message clarifai.api.ListAuthMethodsRequest
 */
export class ListAuthMethodsRequest extends Message<ListAuthMethodsRequest> {
  /**
   * (optional URL parameter) Recovery path that the user will be redirected back to after login
   *
   * @generated from field: string recovery_path = 1;
   */
  recoveryPath = "";

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  /**
   * this applies to org auth only. when true sso flows will redirect to 'recovery_path' upon successful redirect from idp (instead of doing additional actiosn to support id_login)
   *
   * @generated from field: bool dry_run = 3;
   */
  dryRun = false;

  /**
   * this applies to org auth only. when present finalizer will associate PAT with IDP
   *
   * @generated from field: string authorize_pat = 4;
   */
  authorizePat = "";

  constructor(data?: PartialMessage<ListAuthMethodsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAuthMethodsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recovery_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 3, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "authorize_pat", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuthMethodsRequest {
    return new ListAuthMethodsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuthMethodsRequest {
    return new ListAuthMethodsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuthMethodsRequest {
    return new ListAuthMethodsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuthMethodsRequest | PlainMessage<ListAuthMethodsRequest> | undefined, b: ListAuthMethodsRequest | PlainMessage<ListAuthMethodsRequest> | undefined): boolean {
    return proto3.util.equals(ListAuthMethodsRequest, a, b);
  }
}

/**
 * PostLinkIdpUserRequest
 *
 * @generated from message clarifai.api.PostLinkIdpUserRequest
 */
export class PostLinkIdpUserRequest extends Message<PostLinkIdpUserRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string login_id = 2;
   */
  loginId = "";

  constructor(data?: PartialMessage<PostLinkIdpUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostLinkIdpUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "login_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostLinkIdpUserRequest {
    return new PostLinkIdpUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostLinkIdpUserRequest {
    return new PostLinkIdpUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostLinkIdpUserRequest {
    return new PostLinkIdpUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostLinkIdpUserRequest | PlainMessage<PostLinkIdpUserRequest> | undefined, b: PostLinkIdpUserRequest | PlainMessage<PostLinkIdpUserRequest> | undefined): boolean {
    return proto3.util.equals(PostLinkIdpUserRequest, a, b);
  }
}

/**
 * GetLoginInfoRequest
 *
 * @generated from message clarifai.api.GetLoginInfoRequest
 */
export class GetLoginInfoRequest extends Message<GetLoginInfoRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string login_id = 2;
   */
  loginId = "";

  constructor(data?: PartialMessage<GetLoginInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetLoginInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "login_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLoginInfoRequest {
    return new GetLoginInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLoginInfoRequest {
    return new GetLoginInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLoginInfoRequest {
    return new GetLoginInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLoginInfoRequest | PlainMessage<GetLoginInfoRequest> | undefined, b: GetLoginInfoRequest | PlainMessage<GetLoginInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetLoginInfoRequest, a, b);
  }
}

/**
 * GetLoginInfoResponse
 *
 * @generated from message clarifai.api.GetLoginInfoResponse
 */
export class GetLoginInfoResponse extends Message<GetLoginInfoResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string subject_email = 2;
   */
  subjectEmail = "";

  /**
   * @generated from field: string idp_name = 3;
   */
  idpName = "";

  /**
   * @generated from field: string idp_id = 4;
   */
  idpId = "";

  /**
   * this will be true if caller is linked to the authenticated subject from idp
   * if true then the idp linking step should be skipped and proceed to PostIdLoginFinalizer directly
   *
   * @generated from field: bool is_linked_to_subject = 5;
   */
  isLinkedToSubject = false;

  /**
   * @generated from field: bool subject_authorized_at_idp = 6;
   */
  subjectAuthorizedAtIdp = false;

  constructor(data?: PartialMessage<GetLoginInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetLoginInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "subject_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "idp_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "idp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_linked_to_subject", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "subject_authorized_at_idp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLoginInfoResponse {
    return new GetLoginInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLoginInfoResponse {
    return new GetLoginInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLoginInfoResponse {
    return new GetLoginInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLoginInfoResponse | PlainMessage<GetLoginInfoResponse> | undefined, b: GetLoginInfoResponse | PlainMessage<GetLoginInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetLoginInfoResponse, a, b);
  }
}

/**
 * PostLinkIdpUserResponse
 *
 * @generated from message clarifai.api.PostLinkIdpUserResponse
 */
export class PostLinkIdpUserResponse extends Message<PostLinkIdpUserResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<PostLinkIdpUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostLinkIdpUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostLinkIdpUserResponse {
    return new PostLinkIdpUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostLinkIdpUserResponse {
    return new PostLinkIdpUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostLinkIdpUserResponse {
    return new PostLinkIdpUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostLinkIdpUserResponse | PlainMessage<PostLinkIdpUserResponse> | undefined, b: PostLinkIdpUserResponse | PlainMessage<PostLinkIdpUserResponse> | undefined): boolean {
    return proto3.util.equals(PostLinkIdpUserResponse, a, b);
  }
}

/**
 * PostIdLoginFinalizerRequest
 *
 * @generated from message clarifai.api.PostIdLoginFinalizerRequest
 */
export class PostIdLoginFinalizerRequest extends Message<PostIdLoginFinalizerRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string login_id = 2;
   */
  loginId = "";

  constructor(data?: PartialMessage<PostIdLoginFinalizerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostIdLoginFinalizerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "login_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostIdLoginFinalizerRequest {
    return new PostIdLoginFinalizerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostIdLoginFinalizerRequest {
    return new PostIdLoginFinalizerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostIdLoginFinalizerRequest {
    return new PostIdLoginFinalizerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostIdLoginFinalizerRequest | PlainMessage<PostIdLoginFinalizerRequest> | undefined, b: PostIdLoginFinalizerRequest | PlainMessage<PostIdLoginFinalizerRequest> | undefined): boolean {
    return proto3.util.equals(PostIdLoginFinalizerRequest, a, b);
  }
}

/**
 * PostIdLoginFinalizerResponse
 *
 * @generated from message clarifai.api.PostIdLoginFinalizerResponse
 */
export class PostIdLoginFinalizerResponse extends Message<PostIdLoginFinalizerResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string recovery_path = 2;
   */
  recoveryPath = "";

  constructor(data?: PartialMessage<PostIdLoginFinalizerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostIdLoginFinalizerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "recovery_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostIdLoginFinalizerResponse {
    return new PostIdLoginFinalizerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostIdLoginFinalizerResponse {
    return new PostIdLoginFinalizerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostIdLoginFinalizerResponse {
    return new PostIdLoginFinalizerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostIdLoginFinalizerResponse | PlainMessage<PostIdLoginFinalizerResponse> | undefined, b: PostIdLoginFinalizerResponse | PlainMessage<PostIdLoginFinalizerResponse> | undefined): boolean {
    return proto3.util.equals(PostIdLoginFinalizerResponse, a, b);
  }
}

/**
 * ListAuthMethodsResponse
 *
 * @generated from message clarifai.api.ListAuthMethodsResponse
 */
export class ListAuthMethodsResponse extends Message<ListAuthMethodsResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of authentication methods.
   *
   * @generated from field: repeated clarifai.api.AuthMethod auth_methods = 2;
   */
  authMethods: AuthMethod[] = [];

  constructor(data?: PartialMessage<ListAuthMethodsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAuthMethodsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "auth_methods", kind: "message", T: AuthMethod, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuthMethodsResponse {
    return new ListAuthMethodsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuthMethodsResponse {
    return new ListAuthMethodsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuthMethodsResponse {
    return new ListAuthMethodsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuthMethodsResponse | PlainMessage<ListAuthMethodsResponse> | undefined, b: ListAuthMethodsResponse | PlainMessage<ListAuthMethodsResponse> | undefined): boolean {
    return proto3.util.equals(ListAuthMethodsResponse, a, b);
  }
}

/**
 * 2FA (Two factor authentication)
 *
 * @generated from message clarifai.api.List2FAMethodsRequest
 */
export class List2FAMethodsRequest extends Message<List2FAMethodsRequest> {
  /**
   * Contains the user_id. Has to match the caller.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<List2FAMethodsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.List2FAMethodsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): List2FAMethodsRequest {
    return new List2FAMethodsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): List2FAMethodsRequest {
    return new List2FAMethodsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): List2FAMethodsRequest {
    return new List2FAMethodsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: List2FAMethodsRequest | PlainMessage<List2FAMethodsRequest> | undefined, b: List2FAMethodsRequest | PlainMessage<List2FAMethodsRequest> | undefined): boolean {
    return proto3.util.equals(List2FAMethodsRequest, a, b);
  }
}

/**
 * List2FAMethodsResponse
 *
 * @generated from message clarifai.api.List2FAMethodsResponse
 */
export class List2FAMethodsResponse extends Message<List2FAMethodsResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of authentication methods.
   *
   * @generated from field: repeated clarifai.api.TwoFactorAuthMethod two_factor_auth_methods = 2;
   */
  twoFactorAuthMethods: TwoFactorAuthMethod[] = [];

  constructor(data?: PartialMessage<List2FAMethodsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.List2FAMethodsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "two_factor_auth_methods", kind: "message", T: TwoFactorAuthMethod, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): List2FAMethodsResponse {
    return new List2FAMethodsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): List2FAMethodsResponse {
    return new List2FAMethodsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): List2FAMethodsResponse {
    return new List2FAMethodsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: List2FAMethodsResponse | PlainMessage<List2FAMethodsResponse> | undefined, b: List2FAMethodsResponse | PlainMessage<List2FAMethodsResponse> | undefined): boolean {
    return proto3.util.equals(List2FAMethodsResponse, a, b);
  }
}

/**
 * PostAuth2FATotpRegisterEnableRequest
 *
 * @generated from message clarifai.api.PostAuth2FATotpRegisterEnableRequest
 */
export class PostAuth2FATotpRegisterEnableRequest extends Message<PostAuth2FATotpRegisterEnableRequest> {
  /**
   * Contains the user_id. Has to match the caller.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostAuth2FATotpRegisterEnableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpRegisterEnableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpRegisterEnableRequest {
    return new PostAuth2FATotpRegisterEnableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpRegisterEnableRequest {
    return new PostAuth2FATotpRegisterEnableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpRegisterEnableRequest {
    return new PostAuth2FATotpRegisterEnableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpRegisterEnableRequest | PlainMessage<PostAuth2FATotpRegisterEnableRequest> | undefined, b: PostAuth2FATotpRegisterEnableRequest | PlainMessage<PostAuth2FATotpRegisterEnableRequest> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpRegisterEnableRequest, a, b);
  }
}

/**
 * PostAuth2FATotpRegisterEnableResponse
 *
 * @generated from message clarifai.api.PostAuth2FATotpRegisterEnableResponse
 */
export class PostAuth2FATotpRegisterEnableResponse extends Message<PostAuth2FATotpRegisterEnableResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string secret = 2;
   */
  secret = "";

  /**
   * @generated from field: string qr_code = 3;
   */
  qrCode = "";

  /**
   * @generated from field: string state = 4;
   */
  state = "";

  constructor(data?: PartialMessage<PostAuth2FATotpRegisterEnableResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpRegisterEnableResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "qr_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpRegisterEnableResponse {
    return new PostAuth2FATotpRegisterEnableResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpRegisterEnableResponse {
    return new PostAuth2FATotpRegisterEnableResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpRegisterEnableResponse {
    return new PostAuth2FATotpRegisterEnableResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpRegisterEnableResponse | PlainMessage<PostAuth2FATotpRegisterEnableResponse> | undefined, b: PostAuth2FATotpRegisterEnableResponse | PlainMessage<PostAuth2FATotpRegisterEnableResponse> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpRegisterEnableResponse, a, b);
  }
}

/**
 * PostAuth2FATotpDisableRequest
 *
 * @generated from message clarifai.api.PostAuth2FATotpDisableRequest
 */
export class PostAuth2FATotpDisableRequest extends Message<PostAuth2FATotpDisableRequest> {
  /**
   * @generated from field: string passcode = 1;
   */
  passcode = "";

  /**
   * Contains the user_id. Has to match the caller.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostAuth2FATotpDisableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpDisableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "passcode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpDisableRequest {
    return new PostAuth2FATotpDisableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpDisableRequest {
    return new PostAuth2FATotpDisableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpDisableRequest {
    return new PostAuth2FATotpDisableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpDisableRequest | PlainMessage<PostAuth2FATotpDisableRequest> | undefined, b: PostAuth2FATotpDisableRequest | PlainMessage<PostAuth2FATotpDisableRequest> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpDisableRequest, a, b);
  }
}

/**
 * PostAuth2FATotpDisableResponse
 *
 * @generated from message clarifai.api.PostAuth2FATotpDisableResponse
 */
export class PostAuth2FATotpDisableResponse extends Message<PostAuth2FATotpDisableResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<PostAuth2FATotpDisableResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpDisableResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpDisableResponse {
    return new PostAuth2FATotpDisableResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpDisableResponse {
    return new PostAuth2FATotpDisableResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpDisableResponse {
    return new PostAuth2FATotpDisableResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpDisableResponse | PlainMessage<PostAuth2FATotpDisableResponse> | undefined, b: PostAuth2FATotpDisableResponse | PlainMessage<PostAuth2FATotpDisableResponse> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpDisableResponse, a, b);
  }
}

/**
 * PostAuth2FATotpRegisterVerifyRequest
 *
 * @generated from message clarifai.api.PostAuth2FATotpRegisterVerifyRequest
 */
export class PostAuth2FATotpRegisterVerifyRequest extends Message<PostAuth2FATotpRegisterVerifyRequest> {
  /**
   * @generated from field: string passcode = 1;
   */
  passcode = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * Contains the user_id. Has to match the caller.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostAuth2FATotpRegisterVerifyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpRegisterVerifyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "passcode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpRegisterVerifyRequest {
    return new PostAuth2FATotpRegisterVerifyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpRegisterVerifyRequest {
    return new PostAuth2FATotpRegisterVerifyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpRegisterVerifyRequest {
    return new PostAuth2FATotpRegisterVerifyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpRegisterVerifyRequest | PlainMessage<PostAuth2FATotpRegisterVerifyRequest> | undefined, b: PostAuth2FATotpRegisterVerifyRequest | PlainMessage<PostAuth2FATotpRegisterVerifyRequest> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpRegisterVerifyRequest, a, b);
  }
}

/**
 * PostAuth2FATotpRegisterVerifyResponse
 *
 * @generated from message clarifai.api.PostAuth2FATotpRegisterVerifyResponse
 */
export class PostAuth2FATotpRegisterVerifyResponse extends Message<PostAuth2FATotpRegisterVerifyResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string recovery_key = 2;
   */
  recoveryKey = "";

  constructor(data?: PartialMessage<PostAuth2FATotpRegisterVerifyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpRegisterVerifyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "recovery_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpRegisterVerifyResponse {
    return new PostAuth2FATotpRegisterVerifyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpRegisterVerifyResponse {
    return new PostAuth2FATotpRegisterVerifyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpRegisterVerifyResponse {
    return new PostAuth2FATotpRegisterVerifyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpRegisterVerifyResponse | PlainMessage<PostAuth2FATotpRegisterVerifyResponse> | undefined, b: PostAuth2FATotpRegisterVerifyResponse | PlainMessage<PostAuth2FATotpRegisterVerifyResponse> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpRegisterVerifyResponse, a, b);
  }
}

/**
 * PostAuth2FATotpLoginRequest
 *
 * @generated from message clarifai.api.PostAuth2FATotpLoginRequest
 */
export class PostAuth2FATotpLoginRequest extends Message<PostAuth2FATotpLoginRequest> {
  /**
   * @generated from field: string passcode = 1;
   */
  passcode = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: bool long_lived = 4;
   */
  longLived = false;

  constructor(data?: PartialMessage<PostAuth2FATotpLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "passcode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "long_lived", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpLoginRequest {
    return new PostAuth2FATotpLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpLoginRequest {
    return new PostAuth2FATotpLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpLoginRequest {
    return new PostAuth2FATotpLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpLoginRequest | PlainMessage<PostAuth2FATotpLoginRequest> | undefined, b: PostAuth2FATotpLoginRequest | PlainMessage<PostAuth2FATotpLoginRequest> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpLoginRequest, a, b);
  }
}

/**
 * PostAuth2FATotpRecoverRequest
 *
 * @generated from message clarifai.api.PostAuth2FATotpRecoverRequest
 */
export class PostAuth2FATotpRecoverRequest extends Message<PostAuth2FATotpRecoverRequest> {
  /**
   * @generated from field: string state = 1;
   */
  state = "";

  /**
   * @generated from field: string recovery_code = 2;
   */
  recoveryCode = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  constructor(data?: PartialMessage<PostAuth2FATotpRecoverRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpRecoverRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recovery_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpRecoverRequest {
    return new PostAuth2FATotpRecoverRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpRecoverRequest {
    return new PostAuth2FATotpRecoverRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpRecoverRequest {
    return new PostAuth2FATotpRecoverRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpRecoverRequest | PlainMessage<PostAuth2FATotpRecoverRequest> | undefined, b: PostAuth2FATotpRecoverRequest | PlainMessage<PostAuth2FATotpRecoverRequest> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpRecoverRequest, a, b);
  }
}

/**
 * PostAuth2FATotpRecoverResponse
 *
 * @generated from message clarifai.api.PostAuth2FATotpRecoverResponse
 */
export class PostAuth2FATotpRecoverResponse extends Message<PostAuth2FATotpRecoverResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<PostAuth2FATotpRecoverResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAuth2FATotpRecoverResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAuth2FATotpRecoverResponse {
    return new PostAuth2FATotpRecoverResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAuth2FATotpRecoverResponse {
    return new PostAuth2FATotpRecoverResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAuth2FATotpRecoverResponse {
    return new PostAuth2FATotpRecoverResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostAuth2FATotpRecoverResponse | PlainMessage<PostAuth2FATotpRecoverResponse> | undefined, b: PostAuth2FATotpRecoverResponse | PlainMessage<PostAuth2FATotpRecoverResponse> | undefined): boolean {
    return proto3.util.equals(PostAuth2FATotpRecoverResponse, a, b);
  }
}

/**
 * GetAuth2FATotpRecoverConfirmRequest
 *
 * @generated from message clarifai.api.GetAuth2FATotpRecoverConfirmRequest
 */
export class GetAuth2FATotpRecoverConfirmRequest extends Message<GetAuth2FATotpRecoverConfirmRequest> {
  /**
   * (required URL parameter) Confirmation secret for validation
   *
   * @generated from field: string state = 1;
   */
  state = "";

  constructor(data?: PartialMessage<GetAuth2FATotpRecoverConfirmRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetAuth2FATotpRecoverConfirmRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuth2FATotpRecoverConfirmRequest {
    return new GetAuth2FATotpRecoverConfirmRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuth2FATotpRecoverConfirmRequest {
    return new GetAuth2FATotpRecoverConfirmRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuth2FATotpRecoverConfirmRequest {
    return new GetAuth2FATotpRecoverConfirmRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuth2FATotpRecoverConfirmRequest | PlainMessage<GetAuth2FATotpRecoverConfirmRequest> | undefined, b: GetAuth2FATotpRecoverConfirmRequest | PlainMessage<GetAuth2FATotpRecoverConfirmRequest> | undefined): boolean {
    return proto3.util.equals(GetAuth2FATotpRecoverConfirmRequest, a, b);
  }
}

/**
 * GetAuth2FATotpRecoverConfirmResponse
 *
 * @generated from message clarifai.api.GetAuth2FATotpRecoverConfirmResponse
 */
export class GetAuth2FATotpRecoverConfirmResponse extends Message<GetAuth2FATotpRecoverConfirmResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetAuth2FATotpRecoverConfirmResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetAuth2FATotpRecoverConfirmResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuth2FATotpRecoverConfirmResponse {
    return new GetAuth2FATotpRecoverConfirmResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuth2FATotpRecoverConfirmResponse {
    return new GetAuth2FATotpRecoverConfirmResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuth2FATotpRecoverConfirmResponse {
    return new GetAuth2FATotpRecoverConfirmResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuth2FATotpRecoverConfirmResponse | PlainMessage<GetAuth2FATotpRecoverConfirmResponse> | undefined, b: GetAuth2FATotpRecoverConfirmResponse | PlainMessage<GetAuth2FATotpRecoverConfirmResponse> | undefined): boolean {
    return proto3.util.equals(GetAuth2FATotpRecoverConfirmResponse, a, b);
  }
}

/**
 * Reset Password
 *
 * @generated from message clarifai.api.RequestResetPasswordRequest
 */
export class RequestResetPasswordRequest extends Message<RequestResetPasswordRequest> {
  /**
   * To find associated account.
   *
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<RequestResetPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.RequestResetPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestResetPasswordRequest {
    return new RequestResetPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestResetPasswordRequest {
    return new RequestResetPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestResetPasswordRequest {
    return new RequestResetPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RequestResetPasswordRequest | PlainMessage<RequestResetPasswordRequest> | undefined, b: RequestResetPasswordRequest | PlainMessage<RequestResetPasswordRequest> | undefined): boolean {
    return proto3.util.equals(RequestResetPasswordRequest, a, b);
  }
}

/**
 * CompleteResetPasswordRequest
 *
 * @generated from message clarifai.api.CompleteResetPasswordRequest
 */
export class CompleteResetPasswordRequest extends Message<CompleteResetPasswordRequest> {
  /**
   * key to retrieve user
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * new password to set.
   *
   * @generated from field: string new_password = 2;
   */
  newPassword = "";

  constructor(data?: PartialMessage<CompleteResetPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.CompleteResetPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompleteResetPasswordRequest {
    return new CompleteResetPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompleteResetPasswordRequest {
    return new CompleteResetPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompleteResetPasswordRequest {
    return new CompleteResetPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CompleteResetPasswordRequest | PlainMessage<CompleteResetPasswordRequest> | undefined, b: CompleteResetPasswordRequest | PlainMessage<CompleteResetPasswordRequest> | undefined): boolean {
    return proto3.util.equals(CompleteResetPasswordRequest, a, b);
  }
}

/**
 * Login and Signup
 *
 * @generated from message clarifai.api.PostLoginRequest
 */
export class PostLoginRequest extends Message<PostLoginRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: bool long_lived = 3;
   */
  longLived = false;

  constructor(data?: PartialMessage<PostLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "long_lived", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostLoginRequest {
    return new PostLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostLoginRequest {
    return new PostLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostLoginRequest {
    return new PostLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostLoginRequest | PlainMessage<PostLoginRequest> | undefined, b: PostLoginRequest | PlainMessage<PostLoginRequest> | undefined): boolean {
    return proto3.util.equals(PostLoginRequest, a, b);
  }
}

/**
 * PostSignupRequest
 *
 * @generated from message clarifai.api.PostSignupRequest
 */
export class PostSignupRequest extends Message<PostSignupRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = "";

  /**
   * @generated from field: string company_name = 5;
   */
  companyName = "";

  /**
   * @generated from field: string captcha_response_token = 6;
   */
  captchaResponseToken = "";

  /**
   * same as captcha_response_token but for callers that are opted-in to v3 captcha
   *
   * @generated from field: string captcha_response_token_v3 = 14;
   */
  captchaResponseTokenV3 = "";

  /**
   * This field is only for registrations that come from the AWS marketplace
   *
   * @generated from field: string aws_registration_token = 7;
   */
  awsRegistrationToken = "";

  /**
   * @generated from field: bool gdpr_consent = 8;
   */
  gdprConsent = false;

  /**
   * @generated from field: bool tos_consent = 9;
   */
  tosConsent = false;

  /**
   * @generated from field: bool marketing_consent = 10;
   */
  marketingConsent = false;

  /**
   * @generated from field: string job_title = 11;
   */
  jobTitle = "";

  /**
   * @generated from field: string job_role = 12;
   */
  jobRole = "";

  /**
   * @generated from field: clarifai.api.Utm utm = 13;
   */
  utm?: Utm;

  constructor(data?: PartialMessage<PostSignupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostSignupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "company_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "captcha_response_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "captcha_response_token_v3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "aws_registration_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "gdpr_consent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "tos_consent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "marketing_consent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "job_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "job_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "utm", kind: "message", T: Utm },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostSignupRequest {
    return new PostSignupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostSignupRequest {
    return new PostSignupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostSignupRequest {
    return new PostSignupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostSignupRequest | PlainMessage<PostSignupRequest> | undefined, b: PostSignupRequest | PlainMessage<PostSignupRequest> | undefined): boolean {
    return proto3.util.equals(PostSignupRequest, a, b);
  }
}

/**
 * Utm
 *
 * @generated from message clarifai.api.Utm
 */
export class Utm extends Message<Utm> {
  /**
   * @generated from field: string source = 1;
   */
  source = "";

  /**
   * @generated from field: string medium = 2;
   */
  medium = "";

  /**
   * @generated from field: string campaign = 3;
   */
  campaign = "";

  /**
   * @generated from field: string term = 4;
   */
  term = "";

  /**
   * @generated from field: string content = 5;
   */
  content = "";

  constructor(data?: PartialMessage<Utm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.Utm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "medium", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "campaign", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "term", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Utm {
    return new Utm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Utm {
    return new Utm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Utm {
    return new Utm().fromJsonString(jsonString, options);
  }

  static equals(a: Utm | PlainMessage<Utm> | undefined, b: Utm | PlainMessage<Utm> | undefined): boolean {
    return proto3.util.equals(Utm, a, b);
  }
}

/**
 * SingleLoginResponse
 *
 * @generated from message clarifai.api.SingleLoginResponse
 */
export class SingleLoginResponse extends Message<SingleLoginResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = "";

  /**
   * @generated from field: string company_name = 5;
   */
  companyName = "";

  /**
   * @generated from field: string date_joined = 6;
   */
  dateJoined = "";

  /**
   * @generated from field: repeated clarifai.api.EmailAddress email_addresses = 8;
   */
  emailAddresses: EmailAddress[] = [];

  /**
   * @generated from field: string session_token = 9;
   */
  sessionToken = "";

  /**
   * @generated from field: string token_expires = 10;
   */
  tokenExpires = "";

  /**
   * This is deprecated in favor of user_id
   *
   * @generated from field: string v2_user_id = 11 [deprecated = true];
   * @deprecated
   */
  v2UserId = "";

  /**
   * @generated from field: string date_gdpr_consent = 12;
   */
  dateGdprConsent = "";

  /**
   * @generated from field: string date_tos_consent = 13;
   */
  dateTosConsent = "";

  /**
   * @generated from field: string date_marketing_consent = 14;
   */
  dateMarketingConsent = "";

  /**
   * For checking if password expired
   *
   * @generated from field: string password_expired_at = 15;
   */
  passwordExpiredAt = "";

  /**
   * @generated from field: bool is_new_user = 16;
   */
  isNewUser = false;

  /**
   * @generated from field: bool two_factor_auth_enabled = 17;
   */
  twoFactorAuthEnabled = false;

  /**
   * @generated from field: string state = 18;
   */
  state = "";

  /**
   * User id
   *
   * @generated from field: string user_id = 19;
   */
  userId = "";

  constructor(data?: PartialMessage<SingleLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "company_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "date_joined", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "email_addresses", kind: "message", T: EmailAddress, repeated: true },
    { no: 9, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "token_expires", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "v2_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "date_gdpr_consent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "date_tos_consent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "date_marketing_consent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "password_expired_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "is_new_user", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "two_factor_auth_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleLoginResponse {
    return new SingleLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleLoginResponse {
    return new SingleLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleLoginResponse {
    return new SingleLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleLoginResponse | PlainMessage<SingleLoginResponse> | undefined, b: SingleLoginResponse | PlainMessage<SingleLoginResponse> | undefined): boolean {
    return proto3.util.equals(SingleLoginResponse, a, b);
  }
}

/**
 * PostLogoutRequest
 *
 * @generated from message clarifai.api.PostLogoutRequest
 */
export class PostLogoutRequest extends Message<PostLogoutRequest> {
  /**
   * Contains the user_id to logout. Has to match the caller.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostLogoutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostLogoutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostLogoutRequest {
    return new PostLogoutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostLogoutRequest {
    return new PostLogoutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostLogoutRequest {
    return new PostLogoutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostLogoutRequest | PlainMessage<PostLogoutRequest> | undefined, b: PostLogoutRequest | PlainMessage<PostLogoutRequest> | undefined): boolean {
    return proto3.util.equals(PostLogoutRequest, a, b);
  }
}

/**
 * SingleLogoutResponse
 *
 * @generated from message clarifai.api.SingleLogoutResponse
 */
export class SingleLogoutResponse extends Message<SingleLogoutResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<SingleLogoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleLogoutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleLogoutResponse {
    return new SingleLogoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleLogoutResponse {
    return new SingleLogoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleLogoutResponse {
    return new SingleLogoutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleLogoutResponse | PlainMessage<SingleLogoutResponse> | undefined, b: SingleLogoutResponse | PlainMessage<SingleLogoutResponse> | undefined): boolean {
    return proto3.util.equals(SingleLogoutResponse, a, b);
  }
}

/**
 * Billing Usage
 *
 * @generated from message clarifai.api.GetBillingUsageRequest
 */
export class GetBillingUsageRequest extends Message<GetBillingUsageRequest> {
  /**
   * Contains the user_id. Has to match the caller.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<GetBillingUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetBillingUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingUsageRequest {
    return new GetBillingUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingUsageRequest {
    return new GetBillingUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingUsageRequest {
    return new GetBillingUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingUsageRequest | PlainMessage<GetBillingUsageRequest> | undefined, b: GetBillingUsageRequest | PlainMessage<GetBillingUsageRequest> | undefined): boolean {
    return proto3.util.equals(GetBillingUsageRequest, a, b);
  }
}

/**
 * GetBillingUsageResponse
 *
 * @generated from message clarifai.api.GetBillingUsageResponse
 */
export class GetBillingUsageResponse extends Message<GetBillingUsageResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.InvoiceItem invoice_items = 2;
   */
  invoiceItems: InvoiceItem[] = [];

  /**
   * @generated from field: clarifai.api.BillingCycle billing_cycle = 3;
   */
  billingCycle?: BillingCycle;

  constructor(data?: PartialMessage<GetBillingUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetBillingUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "invoice_items", kind: "message", T: InvoiceItem, repeated: true },
    { no: 3, name: "billing_cycle", kind: "message", T: BillingCycle },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingUsageResponse {
    return new GetBillingUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingUsageResponse {
    return new GetBillingUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingUsageResponse {
    return new GetBillingUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingUsageResponse | PlainMessage<GetBillingUsageResponse> | undefined, b: GetBillingUsageResponse | PlainMessage<GetBillingUsageResponse> | undefined): boolean {
    return proto3.util.equals(GetBillingUsageResponse, a, b);
  }
}

/**
 * GetStatusCodeRequest
 *
 * @generated from message clarifai.api.GetStatusCodeRequest
 */
export class GetStatusCodeRequest extends Message<GetStatusCodeRequest> {
  /**
   * @generated from field: string status_code_id = 1;
   */
  statusCodeId = "";

  constructor(data?: PartialMessage<GetStatusCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetStatusCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status_code_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatusCodeRequest {
    return new GetStatusCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatusCodeRequest {
    return new GetStatusCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatusCodeRequest {
    return new GetStatusCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatusCodeRequest | PlainMessage<GetStatusCodeRequest> | undefined, b: GetStatusCodeRequest | PlainMessage<GetStatusCodeRequest> | undefined): boolean {
    return proto3.util.equals(GetStatusCodeRequest, a, b);
  }
}

/**
 * ListStatusCodesRequest
 *
 * @generated from message clarifai.api.ListStatusCodesRequest
 */
export class ListStatusCodesRequest extends Message<ListStatusCodesRequest> {
  constructor(data?: PartialMessage<ListStatusCodesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListStatusCodesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStatusCodesRequest {
    return new ListStatusCodesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStatusCodesRequest {
    return new ListStatusCodesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStatusCodesRequest {
    return new ListStatusCodesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListStatusCodesRequest | PlainMessage<ListStatusCodesRequest> | undefined, b: ListStatusCodesRequest | PlainMessage<ListStatusCodesRequest> | undefined): boolean {
    return proto3.util.equals(ListStatusCodesRequest, a, b);
  }
}

/**
 * SingleStatusCodeResponse
 *
 * @generated from message clarifai.api.SingleStatusCodeResponse
 */
export class SingleStatusCodeResponse extends Message<SingleStatusCodeResponse> {
  /**
   * Status of this request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<SingleStatusCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleStatusCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleStatusCodeResponse {
    return new SingleStatusCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleStatusCodeResponse {
    return new SingleStatusCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleStatusCodeResponse {
    return new SingleStatusCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleStatusCodeResponse | PlainMessage<SingleStatusCodeResponse> | undefined, b: SingleStatusCodeResponse | PlainMessage<SingleStatusCodeResponse> | undefined): boolean {
    return proto3.util.equals(SingleStatusCodeResponse, a, b);
  }
}

/**
 * MultiStatusCodeResponse
 *
 * @generated from message clarifai.api.MultiStatusCodeResponse
 */
export class MultiStatusCodeResponse extends Message<MultiStatusCodeResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.status.Status statuses = 2;
   */
  statuses: Status[] = [];

  constructor(data?: PartialMessage<MultiStatusCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiStatusCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "statuses", kind: "message", T: Status, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiStatusCodeResponse {
    return new MultiStatusCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiStatusCodeResponse {
    return new MultiStatusCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiStatusCodeResponse {
    return new MultiStatusCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiStatusCodeResponse | PlainMessage<MultiStatusCodeResponse> | undefined, b: MultiStatusCodeResponse | PlainMessage<MultiStatusCodeResponse> | undefined): boolean {
    return proto3.util.equals(MultiStatusCodeResponse, a, b);
  }
}

/**
 * GetConceptRequest
 *
 * @generated from message clarifai.api.GetConceptRequest
 */
export class GetConceptRequest extends Message<GetConceptRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The concept's id.
   *
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  constructor(data?: PartialMessage<GetConceptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetConceptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConceptRequest {
    return new GetConceptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConceptRequest {
    return new GetConceptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConceptRequest {
    return new GetConceptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConceptRequest | PlainMessage<GetConceptRequest> | undefined, b: GetConceptRequest | PlainMessage<GetConceptRequest> | undefined): boolean {
    return proto3.util.equals(GetConceptRequest, a, b);
  }
}

/**
 * ListConceptsRequest
 *
 * @generated from message clarifai.api.ListConceptsRequest
 */
export class ListConceptsRequest extends Message<ListConceptsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListConceptsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListConceptsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConceptsRequest {
    return new ListConceptsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConceptsRequest {
    return new ListConceptsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConceptsRequest {
    return new ListConceptsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConceptsRequest | PlainMessage<ListConceptsRequest> | undefined, b: ListConceptsRequest | PlainMessage<ListConceptsRequest> | undefined): boolean {
    return proto3.util.equals(ListConceptsRequest, a, b);
  }
}

/**
 * PostConceptsSearchesRequest
 *
 * @generated from message clarifai.api.PostConceptsSearchesRequest
 */
export class PostConceptsSearchesRequest extends Message<PostConceptsSearchesRequest> {
  /**
   * Ids present in the url of the request.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The body of the request.
   *
   * @generated from field: clarifai.api.ConceptQuery concept_query = 2;
   */
  conceptQuery?: ConceptQuery;

  /**
   * Pagination parameters here since there are no url args in this
   * POST request.
   *
   * @generated from field: clarifai.api.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<PostConceptsSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostConceptsSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_query", kind: "message", T: ConceptQuery },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostConceptsSearchesRequest {
    return new PostConceptsSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostConceptsSearchesRequest {
    return new PostConceptsSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostConceptsSearchesRequest {
    return new PostConceptsSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostConceptsSearchesRequest | PlainMessage<PostConceptsSearchesRequest> | undefined, b: PostConceptsSearchesRequest | PlainMessage<PostConceptsSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PostConceptsSearchesRequest, a, b);
  }
}

/**
 * PostConceptsRequest
 *
 * @generated from message clarifai.api.PostConceptsRequest
 */
export class PostConceptsRequest extends Message<PostConceptsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The concepts to add.
   *
   * @generated from field: repeated clarifai.api.Concept concepts = 2;
   */
  concepts: Concept[] = [];

  constructor(data?: PartialMessage<PostConceptsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostConceptsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concepts", kind: "message", T: Concept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostConceptsRequest {
    return new PostConceptsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostConceptsRequest {
    return new PostConceptsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostConceptsRequest {
    return new PostConceptsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostConceptsRequest | PlainMessage<PostConceptsRequest> | undefined, b: PostConceptsRequest | PlainMessage<PostConceptsRequest> | undefined): boolean {
    return proto3.util.equals(PostConceptsRequest, a, b);
  }
}

/**
 * PatchConceptsRequest
 *
 * @generated from message clarifai.api.PatchConceptsRequest
 */
export class PatchConceptsRequest extends Message<PatchConceptsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The concepts to patch.
   *
   * @generated from field: repeated clarifai.api.Concept concepts = 2;
   */
  concepts: Concept[] = [];

  /**
   * The action to perform on the patched objects
   * For now ony action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchConceptsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchConceptsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concepts", kind: "message", T: Concept, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchConceptsRequest {
    return new PatchConceptsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchConceptsRequest {
    return new PatchConceptsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchConceptsRequest {
    return new PatchConceptsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchConceptsRequest | PlainMessage<PatchConceptsRequest> | undefined, b: PatchConceptsRequest | PlainMessage<PatchConceptsRequest> | undefined): boolean {
    return proto3.util.equals(PatchConceptsRequest, a, b);
  }
}

/**
 * GetConceptCountsRequest
 *
 * @generated from message clarifai.api.GetConceptCountsRequest
 */
export class GetConceptCountsRequest extends Message<GetConceptCountsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<GetConceptCountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetConceptCountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConceptCountsRequest {
    return new GetConceptCountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConceptCountsRequest {
    return new GetConceptCountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConceptCountsRequest {
    return new GetConceptCountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConceptCountsRequest | PlainMessage<GetConceptCountsRequest> | undefined, b: GetConceptCountsRequest | PlainMessage<GetConceptCountsRequest> | undefined): boolean {
    return proto3.util.equals(GetConceptCountsRequest, a, b);
  }
}

/**
 * SingleConceptResponse
 *
 * @generated from message clarifai.api.SingleConceptResponse
 */
export class SingleConceptResponse extends Message<SingleConceptResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned concept.
   *
   * @generated from field: clarifai.api.Concept concept = 2;
   */
  concept?: Concept;

  constructor(data?: PartialMessage<SingleConceptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleConceptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept", kind: "message", T: Concept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleConceptResponse {
    return new SingleConceptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleConceptResponse {
    return new SingleConceptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleConceptResponse {
    return new SingleConceptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleConceptResponse | PlainMessage<SingleConceptResponse> | undefined, b: SingleConceptResponse | PlainMessage<SingleConceptResponse> | undefined): boolean {
    return proto3.util.equals(SingleConceptResponse, a, b);
  }
}

/**
 * MultiConceptResponse
 *
 * @generated from message clarifai.api.MultiConceptResponse
 */
export class MultiConceptResponse extends Message<MultiConceptResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned concepts.
   *
   * @generated from field: repeated clarifai.api.Concept concepts = 2;
   */
  concepts: Concept[] = [];

  constructor(data?: PartialMessage<MultiConceptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiConceptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concepts", kind: "message", T: Concept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiConceptResponse {
    return new MultiConceptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiConceptResponse {
    return new MultiConceptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiConceptResponse {
    return new MultiConceptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiConceptResponse | PlainMessage<MultiConceptResponse> | undefined, b: MultiConceptResponse | PlainMessage<MultiConceptResponse> | undefined): boolean {
    return proto3.util.equals(MultiConceptResponse, a, b);
  }
}

/**
 * MultiConceptCountResponse
 *
 * @generated from message clarifai.api.MultiConceptCountResponse
 */
export class MultiConceptCountResponse extends Message<MultiConceptCountResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned concept counts.
   *
   * @generated from field: repeated clarifai.api.ConceptCount concept_counts = 2;
   */
  conceptCounts: ConceptCount[] = [];

  constructor(data?: PartialMessage<MultiConceptCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiConceptCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_counts", kind: "message", T: ConceptCount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiConceptCountResponse {
    return new MultiConceptCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiConceptCountResponse {
    return new MultiConceptCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiConceptCountResponse {
    return new MultiConceptCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiConceptCountResponse | PlainMessage<MultiConceptCountResponse> | undefined, b: MultiConceptCountResponse | PlainMessage<MultiConceptCountResponse> | undefined): boolean {
    return proto3.util.equals(MultiConceptCountResponse, a, b);
  }
}

/**
 * GET all relations such that the concept_id refers to the subject of the relation
 *
 * @generated from message clarifai.api.ListConceptRelationsRequest
 */
export class ListConceptRelationsRequest extends Message<ListConceptRelationsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The subject concept id in your app to get all the relationships for.
   * Leave as an empty string (GET /concepts/relations) to list ALL the relations in the app.
   * 
   * When listing all the relations it will only return one direction of the relationship
   * with the predicate acting on the subject and not the inverse like is done when providing a
   * concept_id so that we can return a reliable page size always.
   * 
   * When providing a concept_id, if a hyponym is present in the DB such as:
   * 'honey' (subject), 'hyponym' (predict for "is a kind of"), 'food' (object)
   * then you can list the concept relations for 'honey' and get hyponym predicate with 'food'
   * object.
   * But you can also list the concept relations for 'food' and it will return the same hyponym
   * relationship with 'honey' as subject and 'food' as predicate.
   * Synonyms by nature are symmetrical relationships so either side can be the concept_id (subject)
   * when listing the relations.
   *
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  /**
   * This is part of the url so we can extend to multiple link types in the future.
   * Valid predicates are:
   * 'hypernyms'
   * 'hyponyms'
   *
   * @generated from field: string predicate = 3;
   */
  predicate = "";

  /**
   * If knowledge_graph_id is provided then just list relations from that knowledge graph.
   * If not provided then list relations from all knowledge graphs including the global one for this
   * app one (ie. knowledge_graph "") and any specific ones in the app.
   *
   * @generated from field: string knowledge_graph_id = 4;
   */
  knowledgeGraphId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 5;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 6;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListConceptRelationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListConceptRelationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "predicate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "knowledge_graph_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConceptRelationsRequest {
    return new ListConceptRelationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConceptRelationsRequest {
    return new ListConceptRelationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConceptRelationsRequest {
    return new ListConceptRelationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConceptRelationsRequest | PlainMessage<ListConceptRelationsRequest> | undefined, b: ListConceptRelationsRequest | PlainMessage<ListConceptRelationsRequest> | undefined): boolean {
    return proto3.util.equals(ListConceptRelationsRequest, a, b);
  }
}

/**
 * POST new concept relations
 *
 * @generated from message clarifai.api.PostConceptRelationsRequest
 */
export class PostConceptRelationsRequest extends Message<PostConceptRelationsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The subject concept id you're going to add relations for.
   *
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  /**
   * The relationships you're going to add.
   *
   * @generated from field: repeated clarifai.api.ConceptRelation concept_relations = 3;
   */
  conceptRelations: ConceptRelation[] = [];

  constructor(data?: PartialMessage<PostConceptRelationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostConceptRelationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "concept_relations", kind: "message", T: ConceptRelation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostConceptRelationsRequest {
    return new PostConceptRelationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostConceptRelationsRequest {
    return new PostConceptRelationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostConceptRelationsRequest {
    return new PostConceptRelationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostConceptRelationsRequest | PlainMessage<PostConceptRelationsRequest> | undefined, b: PostConceptRelationsRequest | PlainMessage<PostConceptRelationsRequest> | undefined): boolean {
    return proto3.util.equals(PostConceptRelationsRequest, a, b);
  }
}

/**
 * DELETE concept relations
 *
 * @generated from message clarifai.api.DeleteConceptRelationsRequest
 */
export class DeleteConceptRelationsRequest extends Message<DeleteConceptRelationsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The concept to delete relationship for.
   *
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  /**
   * The concept relationship ids to delete.
   *
   * @generated from field: repeated string ids = 3;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteConceptRelationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteConceptRelationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteConceptRelationsRequest {
    return new DeleteConceptRelationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteConceptRelationsRequest {
    return new DeleteConceptRelationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteConceptRelationsRequest {
    return new DeleteConceptRelationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteConceptRelationsRequest | PlainMessage<DeleteConceptRelationsRequest> | undefined, b: DeleteConceptRelationsRequest | PlainMessage<DeleteConceptRelationsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteConceptRelationsRequest, a, b);
  }
}

/**
 * GET all knowledge graphs
 *
 * @generated from message clarifai.api.ListKnowledgeGraphsRequest
 */
export class ListKnowledgeGraphsRequest extends Message<ListKnowledgeGraphsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListKnowledgeGraphsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListKnowledgeGraphsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKnowledgeGraphsRequest {
    return new ListKnowledgeGraphsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKnowledgeGraphsRequest {
    return new ListKnowledgeGraphsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKnowledgeGraphsRequest {
    return new ListKnowledgeGraphsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListKnowledgeGraphsRequest | PlainMessage<ListKnowledgeGraphsRequest> | undefined, b: ListKnowledgeGraphsRequest | PlainMessage<ListKnowledgeGraphsRequest> | undefined): boolean {
    return proto3.util.equals(ListKnowledgeGraphsRequest, a, b);
  }
}

/**
 * POST new knowledge graphs
 *
 * @generated from message clarifai.api.PostKnowledgeGraphsRequest
 */
export class PostKnowledgeGraphsRequest extends Message<PostKnowledgeGraphsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.KnowledgeGraph knowledge_graphs = 2;
   */
  knowledgeGraphs: KnowledgeGraph[] = [];

  constructor(data?: PartialMessage<PostKnowledgeGraphsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostKnowledgeGraphsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "knowledge_graphs", kind: "message", T: KnowledgeGraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostKnowledgeGraphsRequest {
    return new PostKnowledgeGraphsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostKnowledgeGraphsRequest {
    return new PostKnowledgeGraphsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostKnowledgeGraphsRequest {
    return new PostKnowledgeGraphsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostKnowledgeGraphsRequest | PlainMessage<PostKnowledgeGraphsRequest> | undefined, b: PostKnowledgeGraphsRequest | PlainMessage<PostKnowledgeGraphsRequest> | undefined): boolean {
    return proto3.util.equals(PostKnowledgeGraphsRequest, a, b);
  }
}

/**
 * GET all concept mappings for the app
 *
 * @generated from message clarifai.api.ListConceptMappingsRequest
 */
export class ListConceptMappingsRequest extends Message<ListConceptMappingsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListConceptMappingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListConceptMappingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConceptMappingsRequest {
    return new ListConceptMappingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConceptMappingsRequest {
    return new ListConceptMappingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConceptMappingsRequest {
    return new ListConceptMappingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConceptMappingsRequest | PlainMessage<ListConceptMappingsRequest> | undefined, b: ListConceptMappingsRequest | PlainMessage<ListConceptMappingsRequest> | undefined): boolean {
    return proto3.util.equals(ListConceptMappingsRequest, a, b);
  }
}

/**
 * POST concept mappings
 *
 * @generated from message clarifai.api.PostConceptMappingsRequest
 */
export class PostConceptMappingsRequest extends Message<PostConceptMappingsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The concept mappings that are being added
   *
   * @generated from field: repeated clarifai.api.ConceptMapping concept_mappings = 2;
   */
  conceptMappings: ConceptMapping[] = [];

  /**
   * The knowledge graph that is being used for these concept mappings
   *
   * @generated from field: clarifai.api.KnowledgeGraph knowledge_graph = 3;
   */
  knowledgeGraph?: KnowledgeGraph;

  constructor(data?: PartialMessage<PostConceptMappingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostConceptMappingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_mappings", kind: "message", T: ConceptMapping, repeated: true },
    { no: 3, name: "knowledge_graph", kind: "message", T: KnowledgeGraph },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostConceptMappingsRequest {
    return new PostConceptMappingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostConceptMappingsRequest {
    return new PostConceptMappingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostConceptMappingsRequest {
    return new PostConceptMappingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostConceptMappingsRequest | PlainMessage<PostConceptMappingsRequest> | undefined, b: PostConceptMappingsRequest | PlainMessage<PostConceptMappingsRequest> | undefined): boolean {
    return proto3.util.equals(PostConceptMappingsRequest, a, b);
  }
}

/**
 * Start concept mapping jobs
 *
 * @generated from message clarifai.api.PostConceptMappingJobsRequest
 */
export class PostConceptMappingJobsRequest extends Message<PostConceptMappingJobsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The concept mapping jobs that are being started
   *
   * @generated from field: repeated clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
   */
  conceptMappingJobs: ConceptMappingJob[] = [];

  constructor(data?: PartialMessage<PostConceptMappingJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostConceptMappingJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_mapping_jobs", kind: "message", T: ConceptMappingJob, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostConceptMappingJobsRequest {
    return new PostConceptMappingJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostConceptMappingJobsRequest {
    return new PostConceptMappingJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostConceptMappingJobsRequest {
    return new PostConceptMappingJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostConceptMappingJobsRequest | PlainMessage<PostConceptMappingJobsRequest> | undefined, b: PostConceptMappingJobsRequest | PlainMessage<PostConceptMappingJobsRequest> | undefined): boolean {
    return proto3.util.equals(PostConceptMappingJobsRequest, a, b);
  }
}

/**
 * SingleConceptRelationResponse
 *
 * @generated from message clarifai.api.SingleConceptRelationResponse
 */
export class SingleConceptRelationResponse extends Message<SingleConceptRelationResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned concept relation.
   *
   * @generated from field: clarifai.api.ConceptRelation concept_relation = 2;
   */
  conceptRelation?: ConceptRelation;

  constructor(data?: PartialMessage<SingleConceptRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleConceptRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_relation", kind: "message", T: ConceptRelation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleConceptRelationResponse {
    return new SingleConceptRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleConceptRelationResponse {
    return new SingleConceptRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleConceptRelationResponse {
    return new SingleConceptRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleConceptRelationResponse | PlainMessage<SingleConceptRelationResponse> | undefined, b: SingleConceptRelationResponse | PlainMessage<SingleConceptRelationResponse> | undefined): boolean {
    return proto3.util.equals(SingleConceptRelationResponse, a, b);
  }
}

/**
 * MultiConceptRelationResponse
 *
 * @generated from message clarifai.api.MultiConceptRelationResponse
 */
export class MultiConceptRelationResponse extends Message<MultiConceptRelationResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned concept relations.
   *
   * @generated from field: repeated clarifai.api.ConceptRelation concept_relations = 2;
   */
  conceptRelations: ConceptRelation[] = [];

  constructor(data?: PartialMessage<MultiConceptRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiConceptRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_relations", kind: "message", T: ConceptRelation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiConceptRelationResponse {
    return new MultiConceptRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiConceptRelationResponse {
    return new MultiConceptRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiConceptRelationResponse {
    return new MultiConceptRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiConceptRelationResponse | PlainMessage<MultiConceptRelationResponse> | undefined, b: MultiConceptRelationResponse | PlainMessage<MultiConceptRelationResponse> | undefined): boolean {
    return proto3.util.equals(MultiConceptRelationResponse, a, b);
  }
}

/**
 * SingleKnowledgeGraphResponse
 *
 * @generated from message clarifai.api.SingleKnowledgeGraphResponse
 */
export class SingleKnowledgeGraphResponse extends Message<SingleKnowledgeGraphResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned knowledge graph.
   *
   * @generated from field: clarifai.api.KnowledgeGraph knowledge_graph = 2;
   */
  knowledgeGraph?: KnowledgeGraph;

  constructor(data?: PartialMessage<SingleKnowledgeGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleKnowledgeGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "knowledge_graph", kind: "message", T: KnowledgeGraph },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleKnowledgeGraphResponse {
    return new SingleKnowledgeGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleKnowledgeGraphResponse {
    return new SingleKnowledgeGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleKnowledgeGraphResponse {
    return new SingleKnowledgeGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleKnowledgeGraphResponse | PlainMessage<SingleKnowledgeGraphResponse> | undefined, b: SingleKnowledgeGraphResponse | PlainMessage<SingleKnowledgeGraphResponse> | undefined): boolean {
    return proto3.util.equals(SingleKnowledgeGraphResponse, a, b);
  }
}

/**
 * MultiKnowledgeGraphResponse
 *
 * @generated from message clarifai.api.MultiKnowledgeGraphResponse
 */
export class MultiKnowledgeGraphResponse extends Message<MultiKnowledgeGraphResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned knowledge graphs.
   *
   * @generated from field: repeated clarifai.api.KnowledgeGraph knowledge_graphs = 2;
   */
  knowledgeGraphs: KnowledgeGraph[] = [];

  constructor(data?: PartialMessage<MultiKnowledgeGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiKnowledgeGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "knowledge_graphs", kind: "message", T: KnowledgeGraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiKnowledgeGraphResponse {
    return new MultiKnowledgeGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiKnowledgeGraphResponse {
    return new MultiKnowledgeGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiKnowledgeGraphResponse {
    return new MultiKnowledgeGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiKnowledgeGraphResponse | PlainMessage<MultiKnowledgeGraphResponse> | undefined, b: MultiKnowledgeGraphResponse | PlainMessage<MultiKnowledgeGraphResponse> | undefined): boolean {
    return proto3.util.equals(MultiKnowledgeGraphResponse, a, b);
  }
}

/**
 * SingleConceptMappingResponse
 *
 * @generated from message clarifai.api.SingleConceptMappingResponse
 */
export class SingleConceptMappingResponse extends Message<SingleConceptMappingResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned mapped concept.
   *
   * @generated from field: clarifai.api.ConceptMapping concept_mapping = 2;
   */
  conceptMapping?: ConceptMapping;

  constructor(data?: PartialMessage<SingleConceptMappingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleConceptMappingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_mapping", kind: "message", T: ConceptMapping },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleConceptMappingResponse {
    return new SingleConceptMappingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleConceptMappingResponse {
    return new SingleConceptMappingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleConceptMappingResponse {
    return new SingleConceptMappingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleConceptMappingResponse | PlainMessage<SingleConceptMappingResponse> | undefined, b: SingleConceptMappingResponse | PlainMessage<SingleConceptMappingResponse> | undefined): boolean {
    return proto3.util.equals(SingleConceptMappingResponse, a, b);
  }
}

/**
 * MultiConceptMappingResponse
 *
 * @generated from message clarifai.api.MultiConceptMappingResponse
 */
export class MultiConceptMappingResponse extends Message<MultiConceptMappingResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned mapped concepts.
   *
   * @generated from field: repeated clarifai.api.ConceptMapping concept_mappings = 2;
   */
  conceptMappings: ConceptMapping[] = [];

  constructor(data?: PartialMessage<MultiConceptMappingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiConceptMappingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_mappings", kind: "message", T: ConceptMapping, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiConceptMappingResponse {
    return new MultiConceptMappingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiConceptMappingResponse {
    return new MultiConceptMappingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiConceptMappingResponse {
    return new MultiConceptMappingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiConceptMappingResponse | PlainMessage<MultiConceptMappingResponse> | undefined, b: MultiConceptMappingResponse | PlainMessage<MultiConceptMappingResponse> | undefined): boolean {
    return proto3.util.equals(MultiConceptMappingResponse, a, b);
  }
}

/**
 * SingleConceptMappingJobResponse
 *
 * @generated from message clarifai.api.SingleConceptMappingJobResponse
 */
export class SingleConceptMappingJobResponse extends Message<SingleConceptMappingJobResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The id of the concept mapping job underway.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<SingleConceptMappingJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleConceptMappingJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleConceptMappingJobResponse {
    return new SingleConceptMappingJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleConceptMappingJobResponse {
    return new SingleConceptMappingJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleConceptMappingJobResponse {
    return new SingleConceptMappingJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleConceptMappingJobResponse | PlainMessage<SingleConceptMappingJobResponse> | undefined, b: SingleConceptMappingJobResponse | PlainMessage<SingleConceptMappingJobResponse> | undefined): boolean {
    return proto3.util.equals(SingleConceptMappingJobResponse, a, b);
  }
}

/**
 * MultiConceptMappingJobResponse
 *
 * @generated from message clarifai.api.MultiConceptMappingJobResponse
 */
export class MultiConceptMappingJobResponse extends Message<MultiConceptMappingJobResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The ids of the concept mapping jobs underway.
   *
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<MultiConceptMappingJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiConceptMappingJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiConceptMappingJobResponse {
    return new MultiConceptMappingJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiConceptMappingJobResponse {
    return new MultiConceptMappingJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiConceptMappingJobResponse {
    return new MultiConceptMappingJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiConceptMappingJobResponse | PlainMessage<MultiConceptMappingJobResponse> | undefined, b: MultiConceptMappingJobResponse | PlainMessage<MultiConceptMappingJobResponse> | undefined): boolean {
    return proto3.util.equals(MultiConceptMappingJobResponse, a, b);
  }
}

/**
 * GET single concept language for the given concept.
 *
 * @generated from message clarifai.api.GetConceptLanguageRequest
 */
export class GetConceptLanguageRequest extends Message<GetConceptLanguageRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  /**
   * This is the language identifier.
   *
   * @generated from field: string language = 3;
   */
  language = "";

  constructor(data?: PartialMessage<GetConceptLanguageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetConceptLanguageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConceptLanguageRequest {
    return new GetConceptLanguageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConceptLanguageRequest {
    return new GetConceptLanguageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConceptLanguageRequest {
    return new GetConceptLanguageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConceptLanguageRequest | PlainMessage<GetConceptLanguageRequest> | undefined, b: GetConceptLanguageRequest | PlainMessage<GetConceptLanguageRequest> | undefined): boolean {
    return proto3.util.equals(GetConceptLanguageRequest, a, b);
  }
}

/**
 * List multiple concept languages for the given concept.
 *
 * @generated from message clarifai.api.ListConceptLanguagesRequest
 */
export class ListConceptLanguagesRequest extends Message<ListConceptLanguagesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListConceptLanguagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListConceptLanguagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConceptLanguagesRequest {
    return new ListConceptLanguagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConceptLanguagesRequest {
    return new ListConceptLanguagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConceptLanguagesRequest {
    return new ListConceptLanguagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConceptLanguagesRequest | PlainMessage<ListConceptLanguagesRequest> | undefined, b: ListConceptLanguagesRequest | PlainMessage<ListConceptLanguagesRequest> | undefined): boolean {
    return proto3.util.equals(ListConceptLanguagesRequest, a, b);
  }
}

/**
 * PATCH multiple concept languages for the given concept.
 *
 * @generated from message clarifai.api.PatchConceptLanguagesRequest
 */
export class PatchConceptLanguagesRequest extends Message<PatchConceptLanguagesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  /**
   * @generated from field: repeated clarifai.api.ConceptLanguage concept_languages = 3;
   */
  conceptLanguages: ConceptLanguage[] = [];

  /**
   * The action to perform with the objects in the PATCH.
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchConceptLanguagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchConceptLanguagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "concept_languages", kind: "message", T: ConceptLanguage, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchConceptLanguagesRequest {
    return new PatchConceptLanguagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchConceptLanguagesRequest {
    return new PatchConceptLanguagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchConceptLanguagesRequest {
    return new PatchConceptLanguagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchConceptLanguagesRequest | PlainMessage<PatchConceptLanguagesRequest> | undefined, b: PatchConceptLanguagesRequest | PlainMessage<PatchConceptLanguagesRequest> | undefined): boolean {
    return proto3.util.equals(PatchConceptLanguagesRequest, a, b);
  }
}

/**
 * POST multiple concept languages for the given concept.
 *
 * @generated from message clarifai.api.PostConceptLanguagesRequest
 */
export class PostConceptLanguagesRequest extends Message<PostConceptLanguagesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  /**
   * @generated from field: repeated clarifai.api.ConceptLanguage concept_languages = 3;
   */
  conceptLanguages: ConceptLanguage[] = [];

  constructor(data?: PartialMessage<PostConceptLanguagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostConceptLanguagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "concept_languages", kind: "message", T: ConceptLanguage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostConceptLanguagesRequest {
    return new PostConceptLanguagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostConceptLanguagesRequest {
    return new PostConceptLanguagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostConceptLanguagesRequest {
    return new PostConceptLanguagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostConceptLanguagesRequest | PlainMessage<PostConceptLanguagesRequest> | undefined, b: PostConceptLanguagesRequest | PlainMessage<PostConceptLanguagesRequest> | undefined): boolean {
    return proto3.util.equals(PostConceptLanguagesRequest, a, b);
  }
}

/**
 * SingleConceptLanguageResponse
 *
 * @generated from message clarifai.api.SingleConceptLanguageResponse
 */
export class SingleConceptLanguageResponse extends Message<SingleConceptLanguageResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.ConceptLanguage concept_language = 2;
   */
  conceptLanguage?: ConceptLanguage;

  constructor(data?: PartialMessage<SingleConceptLanguageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleConceptLanguageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_language", kind: "message", T: ConceptLanguage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleConceptLanguageResponse {
    return new SingleConceptLanguageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleConceptLanguageResponse {
    return new SingleConceptLanguageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleConceptLanguageResponse {
    return new SingleConceptLanguageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleConceptLanguageResponse | PlainMessage<SingleConceptLanguageResponse> | undefined, b: SingleConceptLanguageResponse | PlainMessage<SingleConceptLanguageResponse> | undefined): boolean {
    return proto3.util.equals(SingleConceptLanguageResponse, a, b);
  }
}

/**
 * MultiConceptLanguageResponse
 *
 * @generated from message clarifai.api.MultiConceptLanguageResponse
 */
export class MultiConceptLanguageResponse extends Message<MultiConceptLanguageResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.ConceptLanguage concept_languages = 2;
   */
  conceptLanguages: ConceptLanguage[] = [];

  constructor(data?: PartialMessage<MultiConceptLanguageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiConceptLanguageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_languages", kind: "message", T: ConceptLanguage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiConceptLanguageResponse {
    return new MultiConceptLanguageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiConceptLanguageResponse {
    return new MultiConceptLanguageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiConceptLanguageResponse {
    return new MultiConceptLanguageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiConceptLanguageResponse | PlainMessage<MultiConceptLanguageResponse> | undefined, b: MultiConceptLanguageResponse | PlainMessage<MultiConceptLanguageResponse> | undefined): boolean {
    return proto3.util.equals(MultiConceptLanguageResponse, a, b);
  }
}

/**
 * ListConceptReferencesRequest
 *
 * @generated from message clarifai.api.ListConceptReferencesRequest
 */
export class ListConceptReferencesRequest extends Message<ListConceptReferencesRequest> {
  /**
   * The user id and app id set in the url.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The concept id you want to list translations for.
   *
   * @generated from field: string concept_id = 2;
   */
  conceptId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListConceptReferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListConceptReferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConceptReferencesRequest {
    return new ListConceptReferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConceptReferencesRequest {
    return new ListConceptReferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConceptReferencesRequest {
    return new ListConceptReferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConceptReferencesRequest | PlainMessage<ListConceptReferencesRequest> | undefined, b: ListConceptReferencesRequest | PlainMessage<ListConceptReferencesRequest> | undefined): boolean {
    return proto3.util.equals(ListConceptReferencesRequest, a, b);
  }
}

/**
 * SingleConceptReferenceResponse
 *
 * @generated from message clarifai.api.SingleConceptReferenceResponse
 */
export class SingleConceptReferenceResponse extends Message<SingleConceptReferenceResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.ConceptReference concept_reference = 2;
   */
  conceptReference?: ConceptReference;

  constructor(data?: PartialMessage<SingleConceptReferenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleConceptReferenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_reference", kind: "message", T: ConceptReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleConceptReferenceResponse {
    return new SingleConceptReferenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleConceptReferenceResponse {
    return new SingleConceptReferenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleConceptReferenceResponse {
    return new SingleConceptReferenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleConceptReferenceResponse | PlainMessage<SingleConceptReferenceResponse> | undefined, b: SingleConceptReferenceResponse | PlainMessage<SingleConceptReferenceResponse> | undefined): boolean {
    return proto3.util.equals(SingleConceptReferenceResponse, a, b);
  }
}

/**
 * MultiConceptReferenceResponse
 *
 * @generated from message clarifai.api.MultiConceptReferenceResponse
 */
export class MultiConceptReferenceResponse extends Message<MultiConceptReferenceResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.ConceptReference concept_references = 2;
   */
  conceptReferences: ConceptReference[] = [];

  constructor(data?: PartialMessage<MultiConceptReferenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiConceptReferenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "concept_references", kind: "message", T: ConceptReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiConceptReferenceResponse {
    return new MultiConceptReferenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiConceptReferenceResponse {
    return new MultiConceptReferenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiConceptReferenceResponse {
    return new MultiConceptReferenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiConceptReferenceResponse | PlainMessage<MultiConceptReferenceResponse> | undefined, b: MultiConceptReferenceResponse | PlainMessage<MultiConceptReferenceResponse> | undefined): boolean {
    return proto3.util.equals(MultiConceptReferenceResponse, a, b);
  }
}

/**
 * GetHealthzRequest
 *
 * @generated from message clarifai.api.GetHealthzRequest
 */
export class GetHealthzRequest extends Message<GetHealthzRequest> {
  constructor(data?: PartialMessage<GetHealthzRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetHealthzRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHealthzRequest {
    return new GetHealthzRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHealthzRequest {
    return new GetHealthzRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHealthzRequest {
    return new GetHealthzRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHealthzRequest | PlainMessage<GetHealthzRequest> | undefined, b: GetHealthzRequest | PlainMessage<GetHealthzRequest> | undefined): boolean {
    return proto3.util.equals(GetHealthzRequest, a, b);
  }
}

/**
 * GetHealthzResponse
 *
 * @generated from message clarifai.api.GetHealthzResponse
 */
export class GetHealthzResponse extends Message<GetHealthzResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string time = 2;
   */
  time = "";

  constructor(data?: PartialMessage<GetHealthzResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetHealthzResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHealthzResponse {
    return new GetHealthzResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHealthzResponse {
    return new GetHealthzResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHealthzResponse {
    return new GetHealthzResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHealthzResponse | PlainMessage<GetHealthzResponse> | undefined, b: GetHealthzResponse | PlainMessage<GetHealthzResponse> | undefined): boolean {
    return proto3.util.equals(GetHealthzResponse, a, b);
  }
}

/**
 * GetInputRequest
 *
 * @generated from message clarifai.api.GetInputRequest
 */
export class GetInputRequest extends Message<GetInputRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string input_id = 2;
   */
  inputId = "";

  constructor(data?: PartialMessage<GetInputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetInputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "input_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInputRequest {
    return new GetInputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInputRequest {
    return new GetInputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInputRequest {
    return new GetInputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInputRequest | PlainMessage<GetInputRequest> | undefined, b: GetInputRequest | PlainMessage<GetInputRequest> | undefined): boolean {
    return proto3.util.equals(GetInputRequest, a, b);
  }
}

/**
 * GetInputSamplesRequest
 *
 * @generated from message clarifai.api.GetInputSamplesRequest
 */
export class GetInputSamplesRequest extends Message<GetInputSamplesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string task_id = 2;
   */
  taskId = "";

  /**
   * URL param. If zero ids provided, returns for all task labelers
   *
   * @generated from field: repeated string user_ids = 3;
   */
  userIds: string[] = [];

  constructor(data?: PartialMessage<GetInputSamplesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetInputSamplesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInputSamplesRequest {
    return new GetInputSamplesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInputSamplesRequest {
    return new GetInputSamplesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInputSamplesRequest {
    return new GetInputSamplesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInputSamplesRequest | PlainMessage<GetInputSamplesRequest> | undefined, b: GetInputSamplesRequest | PlainMessage<GetInputSamplesRequest> | undefined): boolean {
    return proto3.util.equals(GetInputSamplesRequest, a, b);
  }
}

/**
 * ListInputsRequest
 *
 * @generated from message clarifai.api.ListInputsRequest
 */
export class ListInputsRequest extends Message<ListInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  /**
   * Set status to filter by status
   *
   * @generated from field: clarifai.api.status.Status status = 5;
   */
  status?: Status;

  /**
   * @generated from field: repeated string ids = 4;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<ListInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "status", kind: "message", T: Status },
    { no: 4, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInputsRequest {
    return new ListInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInputsRequest {
    return new ListInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInputsRequest {
    return new ListInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInputsRequest | PlainMessage<ListInputsRequest> | undefined, b: ListInputsRequest | PlainMessage<ListInputsRequest> | undefined): boolean {
    return proto3.util.equals(ListInputsRequest, a, b);
  }
}

/**
 * StreamInputsRequest
 *
 * @generated from message clarifai.api.StreamInputsRequest
 */
export class StreamInputsRequest extends Message<StreamInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 20.
   *
   * @generated from field: uint32 per_page = 2;
   */
  perPage = 0;

  /**
   * @generated from field: string last_id = 3;
   */
  lastId = "";

  /**
   * By default, the endpoint return inputs by the time when it is added.
   * If this is set to true, we will return inputs by id.
   *
   * @generated from field: bool order_by_id = 5;
   */
  orderById = false;

  /**
   * @generated from field: bool descending = 4;
   */
  descending = false;

  constructor(data?: PartialMessage<StreamInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.StreamInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "last_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_by_id", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "descending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamInputsRequest {
    return new StreamInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamInputsRequest {
    return new StreamInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamInputsRequest {
    return new StreamInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamInputsRequest | PlainMessage<StreamInputsRequest> | undefined, b: StreamInputsRequest | PlainMessage<StreamInputsRequest> | undefined): boolean {
    return proto3.util.equals(StreamInputsRequest, a, b);
  }
}

/**
 * PostInputsRequest
 *
 * @generated from message clarifai.api.PostInputsRequest
 */
export class PostInputsRequest extends Message<PostInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of inputs to post.
   * For each input, the following fields are used:
   * * id
   * * data
   * * dataset_ids
   *
   * @generated from field: repeated clarifai.api.Input inputs = 2;
   */
  inputs: Input[] = [];

  constructor(data?: PartialMessage<PostInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "inputs", kind: "message", T: Input, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInputsRequest {
    return new PostInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInputsRequest {
    return new PostInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInputsRequest {
    return new PostInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostInputsRequest | PlainMessage<PostInputsRequest> | undefined, b: PostInputsRequest | PlainMessage<PostInputsRequest> | undefined): boolean {
    return proto3.util.equals(PostInputsRequest, a, b);
  }
}

/**
 * PostInputsFileRequest
 *
 * @generated from message clarifai.api.PostInputsFileRequest
 */
export class PostInputsFileRequest extends Message<PostInputsFileRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * url to the file.
   *
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * type of the file. Currently only support `csv`
   *
   * @generated from field: string filetype = 3;
   */
  filetype = "";

  constructor(data?: PartialMessage<PostInputsFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInputsFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filetype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInputsFileRequest {
    return new PostInputsFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInputsFileRequest {
    return new PostInputsFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInputsFileRequest {
    return new PostInputsFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostInputsFileRequest | PlainMessage<PostInputsFileRequest> | undefined, b: PostInputsFileRequest | PlainMessage<PostInputsFileRequest> | undefined): boolean {
    return proto3.util.equals(PostInputsFileRequest, a, b);
  }
}

/**
 * PostInputsNiFiRequest
 *
 * @generated from message clarifai.api.PostInputsNiFiRequest
 */
export class PostInputsNiFiRequest extends Message<PostInputsNiFiRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: google.protobuf.ListValue urls = 2;
   */
  urls?: ListValue;

  /**
   * For arbitrary JSON input, use a struct field:
   * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
   * The metadata contains info about the provenance of the files. The provenance info allows user
   * locate the original source files after ingestion. Metadata should be searchable and displayed
   * in output.
   *
   * @generated from field: google.protobuf.Struct metadata = 3;
   */
  metadata?: Struct;

  /**
   * The params contains key/value pairs sent by NiFi in case we need certain parameters to be set
   * to successfully ingest inputs.
   *
   * @generated from field: google.protobuf.Struct params = 4;
   */
  params?: Struct;

  constructor(data?: PartialMessage<PostInputsNiFiRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInputsNiFiRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "urls", kind: "message", T: ListValue },
    { no: 3, name: "metadata", kind: "message", T: Struct },
    { no: 4, name: "params", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInputsNiFiRequest {
    return new PostInputsNiFiRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInputsNiFiRequest {
    return new PostInputsNiFiRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInputsNiFiRequest {
    return new PostInputsNiFiRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostInputsNiFiRequest | PlainMessage<PostInputsNiFiRequest> | undefined, b: PostInputsNiFiRequest | PlainMessage<PostInputsNiFiRequest> | undefined): boolean {
    return proto3.util.equals(PostInputsNiFiRequest, a, b);
  }
}

/**
 * PostInputsDocumentRequest
 *
 * @generated from message clarifai.api.PostInputsDocumentRequest
 */
export class PostInputsDocumentRequest extends Message<PostInputsDocumentRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Body of the request
   *
   * @generated from field: clarifai.api.PostInputsDocumentRequestBody body = 2;
   */
  body?: PostInputsDocumentRequestBody;

  /**
   * Query parameter: send the status of the inputs to 3rd party using this url.
   * If empty, the status will not be sent.
   *
   * @generated from field: string statusCallbackUrl = 3;
   */
  statusCallbackUrl = "";

  /**
   * Query parameter: send the prediction of the inputs (i.e. entities) to 3rd party using this url.
   * If empty, the entities will not be sent.
   *
   * @generated from field: string entityCallbackUrl = 4;
   */
  entityCallbackUrl = "";

  constructor(data?: PartialMessage<PostInputsDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInputsDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "body", kind: "message", T: PostInputsDocumentRequestBody },
    { no: 3, name: "statusCallbackUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "entityCallbackUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInputsDocumentRequest {
    return new PostInputsDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInputsDocumentRequest {
    return new PostInputsDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInputsDocumentRequest {
    return new PostInputsDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostInputsDocumentRequest | PlainMessage<PostInputsDocumentRequest> | undefined, b: PostInputsDocumentRequest | PlainMessage<PostInputsDocumentRequest> | undefined): boolean {
    return proto3.util.equals(PostInputsDocumentRequest, a, b);
  }
}

/**
 * PostInputsDocumentRequestBody
 *
 * @generated from message clarifai.api.PostInputsDocumentRequestBody
 */
export class PostInputsDocumentRequestBody extends Message<PostInputsDocumentRequestBody> {
  /**
   * Track batch status using this batch identifier.
   * 3rd party calls sent to statusCallbackUrl and entityCallbackUrl will use this batch id.
   *
   * @generated from field: string batchId_t = 1;
   */
  batchIdT = "";

  /**
   * List of documents which contain inputs.
   *
   * @generated from field: google.protobuf.ListValue document = 2;
   */
  document?: ListValue;

  /**
   * Not used, but needs to be supported.
   *
   * @generated from field: google.protobuf.Struct complete = 3;
   */
  complete?: Struct;

  /**
   * Not used, but needs to be supported.
   *
   * @generated from field: google.protobuf.Struct metadata = 4;
   */
  metadata?: Struct;

  constructor(data?: PartialMessage<PostInputsDocumentRequestBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInputsDocumentRequestBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "batchId_t", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document", kind: "message", T: ListValue },
    { no: 3, name: "complete", kind: "message", T: Struct },
    { no: 4, name: "metadata", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInputsDocumentRequestBody {
    return new PostInputsDocumentRequestBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInputsDocumentRequestBody {
    return new PostInputsDocumentRequestBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInputsDocumentRequestBody {
    return new PostInputsDocumentRequestBody().fromJsonString(jsonString, options);
  }

  static equals(a: PostInputsDocumentRequestBody | PlainMessage<PostInputsDocumentRequestBody> | undefined, b: PostInputsDocumentRequestBody | PlainMessage<PostInputsDocumentRequestBody> | undefined): boolean {
    return proto3.util.equals(PostInputsDocumentRequestBody, a, b);
  }
}

/**
 * PatchInputsRequest
 *
 * @generated from message clarifai.api.PatchInputsRequest
 */
export class PatchInputsRequest extends Message<PatchInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of inputs to patch.
   * Inputs are identified by id field.
   * For each input, the following fields are patchable:
   * * data
   *
   * @generated from field: repeated clarifai.api.Input inputs = 2;
   */
  inputs: Input[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "inputs", kind: "message", T: Input, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchInputsRequest {
    return new PatchInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchInputsRequest {
    return new PatchInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchInputsRequest {
    return new PatchInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchInputsRequest | PlainMessage<PatchInputsRequest> | undefined, b: PatchInputsRequest | PlainMessage<PatchInputsRequest> | undefined): boolean {
    return proto3.util.equals(PatchInputsRequest, a, b);
  }
}

/**
 * DeleteInputRequest
 *
 * @generated from message clarifai.api.DeleteInputRequest
 */
export class DeleteInputRequest extends Message<DeleteInputRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string input_id = 2;
   */
  inputId = "";

  constructor(data?: PartialMessage<DeleteInputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteInputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "input_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInputRequest {
    return new DeleteInputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInputRequest {
    return new DeleteInputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInputRequest {
    return new DeleteInputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInputRequest | PlainMessage<DeleteInputRequest> | undefined, b: DeleteInputRequest | PlainMessage<DeleteInputRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInputRequest, a, b);
  }
}

/**
 * Request to delete several things by the list of ids.
 *
 * @generated from message clarifai.api.DeleteInputsRequest
 */
export class DeleteInputsRequest extends Message<DeleteInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInputsRequest {
    return new DeleteInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInputsRequest {
    return new DeleteInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInputsRequest {
    return new DeleteInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInputsRequest | PlainMessage<DeleteInputsRequest> | undefined, b: DeleteInputsRequest | PlainMessage<DeleteInputsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInputsRequest, a, b);
  }
}

/**
 * SingleInputResponse
 *
 * @generated from message clarifai.api.SingleInputResponse
 */
export class SingleInputResponse extends Message<SingleInputResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Input input = 2;
   */
  input?: Input;

  constructor(data?: PartialMessage<SingleInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "input", kind: "message", T: Input },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleInputResponse {
    return new SingleInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleInputResponse {
    return new SingleInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleInputResponse {
    return new SingleInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleInputResponse | PlainMessage<SingleInputResponse> | undefined, b: SingleInputResponse | PlainMessage<SingleInputResponse> | undefined): boolean {
    return proto3.util.equals(SingleInputResponse, a, b);
  }
}

/**
 * MultiInputResponse
 *
 * @generated from message clarifai.api.MultiInputResponse
 */
export class MultiInputResponse extends Message<MultiInputResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Input inputs = 2;
   */
  inputs: Input[] = [];

  constructor(data?: PartialMessage<MultiInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "inputs", kind: "message", T: Input, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiInputResponse {
    return new MultiInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiInputResponse {
    return new MultiInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiInputResponse {
    return new MultiInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiInputResponse | PlainMessage<MultiInputResponse> | undefined, b: MultiInputResponse | PlainMessage<MultiInputResponse> | undefined): boolean {
    return proto3.util.equals(MultiInputResponse, a, b);
  }
}

/**
 * MultiInputAnnotationResponse
 *
 * @generated from message clarifai.api.MultiInputAnnotationResponse
 */
export class MultiInputAnnotationResponse extends Message<MultiInputAnnotationResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Hit hits = 3;
   */
  hits: Hit[] = [];

  constructor(data?: PartialMessage<MultiInputAnnotationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiInputAnnotationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 3, name: "hits", kind: "message", T: Hit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiInputAnnotationResponse {
    return new MultiInputAnnotationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiInputAnnotationResponse {
    return new MultiInputAnnotationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiInputAnnotationResponse {
    return new MultiInputAnnotationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiInputAnnotationResponse | PlainMessage<MultiInputAnnotationResponse> | undefined, b: MultiInputAnnotationResponse | PlainMessage<MultiInputAnnotationResponse> | undefined): boolean {
    return proto3.util.equals(MultiInputAnnotationResponse, a, b);
  }
}

/**
 * SingleInputCountResponse
 *
 * @generated from message clarifai.api.SingleInputCountResponse
 */
export class SingleInputCountResponse extends Message<SingleInputCountResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.InputCount counts = 2;
   */
  counts?: InputCount;

  constructor(data?: PartialMessage<SingleInputCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleInputCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "counts", kind: "message", T: InputCount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleInputCountResponse {
    return new SingleInputCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleInputCountResponse {
    return new SingleInputCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleInputCountResponse {
    return new SingleInputCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleInputCountResponse | PlainMessage<SingleInputCountResponse> | undefined, b: SingleInputCountResponse | PlainMessage<SingleInputCountResponse> | undefined): boolean {
    return proto3.util.equals(SingleInputCountResponse, a, b);
  }
}

/**
 * GetInputCountRequest
 *
 * @generated from message clarifai.api.GetInputCountRequest
 */
export class GetInputCountRequest extends Message<GetInputCountRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<GetInputCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetInputCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInputCountRequest {
    return new GetInputCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInputCountRequest {
    return new GetInputCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInputCountRequest {
    return new GetInputCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInputCountRequest | PlainMessage<GetInputCountRequest> | undefined, b: GetInputCountRequest | PlainMessage<GetInputCountRequest> | undefined): boolean {
    return proto3.util.equals(GetInputCountRequest, a, b);
  }
}

/**
 * ListDatasetsRequest
 *
 * @generated from message clarifai.api.ListDatasetsRequest
 */
export class ListDatasetsRequest extends Message<ListDatasetsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListDatasetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListDatasetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetsRequest {
    return new ListDatasetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetsRequest {
    return new ListDatasetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetsRequest {
    return new ListDatasetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatasetsRequest | PlainMessage<ListDatasetsRequest> | undefined, b: ListDatasetsRequest | PlainMessage<ListDatasetsRequest> | undefined): boolean {
    return proto3.util.equals(ListDatasetsRequest, a, b);
  }
}

/**
 * GetDatasetRequest
 *
 * @generated from message clarifai.api.GetDatasetRequest
 */
export class GetDatasetRequest extends Message<GetDatasetRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  constructor(data?: PartialMessage<GetDatasetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetDatasetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetRequest {
    return new GetDatasetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetRequest {
    return new GetDatasetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetRequest {
    return new GetDatasetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatasetRequest | PlainMessage<GetDatasetRequest> | undefined, b: GetDatasetRequest | PlainMessage<GetDatasetRequest> | undefined): boolean {
    return proto3.util.equals(GetDatasetRequest, a, b);
  }
}

/**
 * Request to add one or more datasets.
 *
 * @generated from message clarifai.api.PostDatasetsRequest
 */
export class PostDatasetsRequest extends Message<PostDatasetsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of datasets that are requested to be added.
   *
   * @generated from field: repeated clarifai.api.Dataset datasets = 2;
   */
  datasets: Dataset[] = [];

  constructor(data?: PartialMessage<PostDatasetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostDatasetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "datasets", kind: "message", T: Dataset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostDatasetsRequest {
    return new PostDatasetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostDatasetsRequest {
    return new PostDatasetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostDatasetsRequest {
    return new PostDatasetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostDatasetsRequest | PlainMessage<PostDatasetsRequest> | undefined, b: PostDatasetsRequest | PlainMessage<PostDatasetsRequest> | undefined): boolean {
    return proto3.util.equals(PostDatasetsRequest, a, b);
  }
}

/**
 * Request to patch several datasets.
 *
 * @generated from message clarifai.api.PatchDatasetsRequest
 */
export class PatchDatasetsRequest extends Message<PatchDatasetsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of datasets that are requested to be updated.
   *
   * @generated from field: repeated clarifai.api.Dataset datasets = 2;
   */
  datasets: Dataset[] = [];

  /**
   * The action to perform on the patched objects
   * Supported values: 'overwrite' and 'merge'
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchDatasetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchDatasetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "datasets", kind: "message", T: Dataset, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchDatasetsRequest {
    return new PatchDatasetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchDatasetsRequest {
    return new PatchDatasetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchDatasetsRequest {
    return new PatchDatasetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchDatasetsRequest | PlainMessage<PatchDatasetsRequest> | undefined, b: PatchDatasetsRequest | PlainMessage<PatchDatasetsRequest> | undefined): boolean {
    return proto3.util.equals(PatchDatasetsRequest, a, b);
  }
}

/**
 * Request to delete several datasets by list of ids.
 *
 * @generated from message clarifai.api.DeleteDatasetsRequest
 */
export class DeleteDatasetsRequest extends Message<DeleteDatasetsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string dataset_ids = 2;
   */
  datasetIds: string[] = [];

  constructor(data?: PartialMessage<DeleteDatasetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteDatasetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDatasetsRequest {
    return new DeleteDatasetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDatasetsRequest {
    return new DeleteDatasetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDatasetsRequest {
    return new DeleteDatasetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDatasetsRequest | PlainMessage<DeleteDatasetsRequest> | undefined, b: DeleteDatasetsRequest | PlainMessage<DeleteDatasetsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDatasetsRequest, a, b);
  }
}

/**
 * MultiDatasetResponse
 *
 * @generated from message clarifai.api.MultiDatasetResponse
 */
export class MultiDatasetResponse extends Message<MultiDatasetResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Dataset datasets = 2;
   */
  datasets: Dataset[] = [];

  constructor(data?: PartialMessage<MultiDatasetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiDatasetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "datasets", kind: "message", T: Dataset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiDatasetResponse {
    return new MultiDatasetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiDatasetResponse {
    return new MultiDatasetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiDatasetResponse {
    return new MultiDatasetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiDatasetResponse | PlainMessage<MultiDatasetResponse> | undefined, b: MultiDatasetResponse | PlainMessage<MultiDatasetResponse> | undefined): boolean {
    return proto3.util.equals(MultiDatasetResponse, a, b);
  }
}

/**
 * SingleDatasetResponse
 *
 * @generated from message clarifai.api.SingleDatasetResponse
 */
export class SingleDatasetResponse extends Message<SingleDatasetResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Dataset dataset = 2;
   */
  dataset?: Dataset;

  constructor(data?: PartialMessage<SingleDatasetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleDatasetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "dataset", kind: "message", T: Dataset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleDatasetResponse {
    return new SingleDatasetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleDatasetResponse {
    return new SingleDatasetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleDatasetResponse {
    return new SingleDatasetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleDatasetResponse | PlainMessage<SingleDatasetResponse> | undefined, b: SingleDatasetResponse | PlainMessage<SingleDatasetResponse> | undefined): boolean {
    return proto3.util.equals(SingleDatasetResponse, a, b);
  }
}

/**
 * ListDatasetInputsRequest
 *
 * @generated from message clarifai.api.ListDatasetInputsRequest
 */
export class ListDatasetInputsRequest extends Message<ListDatasetInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListDatasetInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListDatasetInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetInputsRequest {
    return new ListDatasetInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetInputsRequest {
    return new ListDatasetInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetInputsRequest {
    return new ListDatasetInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatasetInputsRequest | PlainMessage<ListDatasetInputsRequest> | undefined, b: ListDatasetInputsRequest | PlainMessage<ListDatasetInputsRequest> | undefined): boolean {
    return proto3.util.equals(ListDatasetInputsRequest, a, b);
  }
}

/**
 * GetDatasetInputRequest
 *
 * @generated from message clarifai.api.GetDatasetInputRequest
 */
export class GetDatasetInputRequest extends Message<GetDatasetInputRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * Identify dataset input by id.
   *
   * @generated from field: string input_id = 3;
   */
  inputId = "";

  constructor(data?: PartialMessage<GetDatasetInputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetDatasetInputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "input_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetInputRequest {
    return new GetDatasetInputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetInputRequest {
    return new GetDatasetInputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetInputRequest {
    return new GetDatasetInputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatasetInputRequest | PlainMessage<GetDatasetInputRequest> | undefined, b: GetDatasetInputRequest | PlainMessage<GetDatasetInputRequest> | undefined): boolean {
    return proto3.util.equals(GetDatasetInputRequest, a, b);
  }
}

/**
 * Request to add one or more datasets.
 *
 * @generated from message clarifai.api.PostDatasetInputsRequest
 */
export class PostDatasetInputsRequest extends Message<PostDatasetInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * List of inputs that are requested to be added to this dataset.
   * Identify each input by id field. All other inputs fields are ignored.
   *
   * @generated from field: repeated clarifai.api.DatasetInput dataset_inputs = 3;
   */
  datasetInputs: DatasetInput[] = [];

  /**
   * Query to search inputs to be added to this dataset.
   *
   * @generated from field: clarifai.api.Search search = 4;
   */
  search?: Search;

  constructor(data?: PartialMessage<PostDatasetInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostDatasetInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_inputs", kind: "message", T: DatasetInput, repeated: true },
    { no: 4, name: "search", kind: "message", T: Search },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostDatasetInputsRequest {
    return new PostDatasetInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostDatasetInputsRequest {
    return new PostDatasetInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostDatasetInputsRequest {
    return new PostDatasetInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostDatasetInputsRequest | PlainMessage<PostDatasetInputsRequest> | undefined, b: PostDatasetInputsRequest | PlainMessage<PostDatasetInputsRequest> | undefined): boolean {
    return proto3.util.equals(PostDatasetInputsRequest, a, b);
  }
}

/**
 * Request to delete several dataset inputs by list of ids.
 *
 * @generated from message clarifai.api.DeleteDatasetInputsRequest
 */
export class DeleteDatasetInputsRequest extends Message<DeleteDatasetInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * Specify which inputs to delete from dataset.
   *
   * @generated from field: repeated string input_ids = 3;
   */
  inputIds: string[] = [];

  constructor(data?: PartialMessage<DeleteDatasetInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteDatasetInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "input_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDatasetInputsRequest {
    return new DeleteDatasetInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDatasetInputsRequest {
    return new DeleteDatasetInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDatasetInputsRequest {
    return new DeleteDatasetInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDatasetInputsRequest | PlainMessage<DeleteDatasetInputsRequest> | undefined, b: DeleteDatasetInputsRequest | PlainMessage<DeleteDatasetInputsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDatasetInputsRequest, a, b);
  }
}

/**
 * MultiDatasetInputResponse
 *
 * @generated from message clarifai.api.MultiDatasetInputResponse
 */
export class MultiDatasetInputResponse extends Message<MultiDatasetInputResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.DatasetInput dataset_inputs = 2;
   */
  datasetInputs: DatasetInput[] = [];

  /**
   * @generated from field: clarifai.api.DatasetInputsSearchAddJob dataset_inputs_search_add_job = 3;
   */
  datasetInputsSearchAddJob?: DatasetInputsSearchAddJob;

  constructor(data?: PartialMessage<MultiDatasetInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiDatasetInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "dataset_inputs", kind: "message", T: DatasetInput, repeated: true },
    { no: 3, name: "dataset_inputs_search_add_job", kind: "message", T: DatasetInputsSearchAddJob },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiDatasetInputResponse {
    return new MultiDatasetInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiDatasetInputResponse {
    return new MultiDatasetInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiDatasetInputResponse {
    return new MultiDatasetInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiDatasetInputResponse | PlainMessage<MultiDatasetInputResponse> | undefined, b: MultiDatasetInputResponse | PlainMessage<MultiDatasetInputResponse> | undefined): boolean {
    return proto3.util.equals(MultiDatasetInputResponse, a, b);
  }
}

/**
 * SingleDatasetInputResponse
 *
 * @generated from message clarifai.api.SingleDatasetInputResponse
 */
export class SingleDatasetInputResponse extends Message<SingleDatasetInputResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.DatasetInput dataset_input = 2;
   */
  datasetInput?: DatasetInput;

  constructor(data?: PartialMessage<SingleDatasetInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleDatasetInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "dataset_input", kind: "message", T: DatasetInput },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleDatasetInputResponse {
    return new SingleDatasetInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleDatasetInputResponse {
    return new SingleDatasetInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleDatasetInputResponse {
    return new SingleDatasetInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleDatasetInputResponse | PlainMessage<SingleDatasetInputResponse> | undefined, b: SingleDatasetInputResponse | PlainMessage<SingleDatasetInputResponse> | undefined): boolean {
    return proto3.util.equals(SingleDatasetInputResponse, a, b);
  }
}

/**
 * ListDatasetVersionsRequest
 *
 * @generated from message clarifai.api.ListDatasetVersionsRequest
 */
export class ListDatasetVersionsRequest extends Message<ListDatasetVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListDatasetVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListDatasetVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetVersionsRequest {
    return new ListDatasetVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetVersionsRequest {
    return new ListDatasetVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetVersionsRequest {
    return new ListDatasetVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatasetVersionsRequest | PlainMessage<ListDatasetVersionsRequest> | undefined, b: ListDatasetVersionsRequest | PlainMessage<ListDatasetVersionsRequest> | undefined): boolean {
    return proto3.util.equals(ListDatasetVersionsRequest, a, b);
  }
}

/**
 * GetDatasetVersionRequest
 *
 * @generated from message clarifai.api.GetDatasetVersionRequest
 */
export class GetDatasetVersionRequest extends Message<GetDatasetVersionRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * Identify dataset version by id.
   *
   * @generated from field: string dataset_version_id = 3;
   */
  datasetVersionId = "";

  constructor(data?: PartialMessage<GetDatasetVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetDatasetVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetVersionRequest {
    return new GetDatasetVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetVersionRequest {
    return new GetDatasetVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetVersionRequest {
    return new GetDatasetVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatasetVersionRequest | PlainMessage<GetDatasetVersionRequest> | undefined, b: GetDatasetVersionRequest | PlainMessage<GetDatasetVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetDatasetVersionRequest, a, b);
  }
}

/**
 * ListDatasetVersionMetricsGroupsRequest
 *
 * @generated from message clarifai.api.ListDatasetVersionMetricsGroupsRequest
 */
export class ListDatasetVersionMetricsGroupsRequest extends Message<ListDatasetVersionMetricsGroupsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * Identify dataset version by id.
   *
   * @generated from field: string dataset_version_id = 3;
   */
  datasetVersionId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 4;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 5;
   */
  perPage = 0;

  /**
   * Filter by parent path. Multiple parent paths are OR-ed. Empty list results in no filter.
   *
   * @generated from field: repeated string parent_paths = 6;
   */
  parentPaths: string[] = [];

  /**
   * Filter by parent type. Multiple types are OR-ed. Empty list results in no filter.
   *
   * @generated from field: repeated clarifai.api.DatasetVersionMetricsGroupType types = 7;
   */
  types: DatasetVersionMetricsGroupType[] = [];

  /**
   * Filter by value. Multiple values are OR-ed. Empty list results in no filter.
   *
   * @generated from field: repeated google.protobuf.Value values = 8;
   */
  values: Value[] = [];

  constructor(data?: PartialMessage<ListDatasetVersionMetricsGroupsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListDatasetVersionMetricsGroupsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "parent_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "types", kind: "enum", T: proto3.getEnumType(DatasetVersionMetricsGroupType), repeated: true },
    { no: 8, name: "values", kind: "message", T: Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetVersionMetricsGroupsRequest {
    return new ListDatasetVersionMetricsGroupsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetVersionMetricsGroupsRequest {
    return new ListDatasetVersionMetricsGroupsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetVersionMetricsGroupsRequest {
    return new ListDatasetVersionMetricsGroupsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatasetVersionMetricsGroupsRequest | PlainMessage<ListDatasetVersionMetricsGroupsRequest> | undefined, b: ListDatasetVersionMetricsGroupsRequest | PlainMessage<ListDatasetVersionMetricsGroupsRequest> | undefined): boolean {
    return proto3.util.equals(ListDatasetVersionMetricsGroupsRequest, a, b);
  }
}

/**
 * Request to add one or more dataset versions.
 *
 * @generated from message clarifai.api.PostDatasetVersionsRequest
 */
export class PostDatasetVersionsRequest extends Message<PostDatasetVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * List of dataset versions that are requested to be added.
   *
   * @generated from field: repeated clarifai.api.DatasetVersion dataset_versions = 3;
   */
  datasetVersions: DatasetVersion[] = [];

  constructor(data?: PartialMessage<PostDatasetVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostDatasetVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_versions", kind: "message", T: DatasetVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostDatasetVersionsRequest {
    return new PostDatasetVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostDatasetVersionsRequest {
    return new PostDatasetVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostDatasetVersionsRequest {
    return new PostDatasetVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostDatasetVersionsRequest | PlainMessage<PostDatasetVersionsRequest> | undefined, b: PostDatasetVersionsRequest | PlainMessage<PostDatasetVersionsRequest> | undefined): boolean {
    return proto3.util.equals(PostDatasetVersionsRequest, a, b);
  }
}

/**
 * Request to patch several dataset versions.
 *
 * @generated from message clarifai.api.PatchDatasetVersionsRequest
 */
export class PatchDatasetVersionsRequest extends Message<PatchDatasetVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * List of dataset versions that are requested to be updated.
   *
   * @generated from field: repeated clarifai.api.DatasetVersion dataset_versions = 3;
   */
  datasetVersions: DatasetVersion[] = [];

  /**
   * The action to perform on the patched objects
   * For now, only 'overwrite' action is supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchDatasetVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchDatasetVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_versions", kind: "message", T: DatasetVersion, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchDatasetVersionsRequest {
    return new PatchDatasetVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchDatasetVersionsRequest {
    return new PatchDatasetVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchDatasetVersionsRequest {
    return new PatchDatasetVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchDatasetVersionsRequest | PlainMessage<PatchDatasetVersionsRequest> | undefined, b: PatchDatasetVersionsRequest | PlainMessage<PatchDatasetVersionsRequest> | undefined): boolean {
    return proto3.util.equals(PatchDatasetVersionsRequest, a, b);
  }
}

/**
 * Request to delete several dataset versions by list of ids.
 *
 * @generated from message clarifai.api.DeleteDatasetVersionsRequest
 */
export class DeleteDatasetVersionsRequest extends Message<DeleteDatasetVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * @generated from field: repeated string dataset_version_ids = 3;
   */
  datasetVersionIds: string[] = [];

  constructor(data?: PartialMessage<DeleteDatasetVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteDatasetVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_version_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDatasetVersionsRequest {
    return new DeleteDatasetVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDatasetVersionsRequest {
    return new DeleteDatasetVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDatasetVersionsRequest {
    return new DeleteDatasetVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDatasetVersionsRequest | PlainMessage<DeleteDatasetVersionsRequest> | undefined, b: DeleteDatasetVersionsRequest | PlainMessage<DeleteDatasetVersionsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDatasetVersionsRequest, a, b);
  }
}

/**
 * Request to create exports of a dataset version.
 *
 * @generated from message clarifai.api.PutDatasetVersionExportsRequest
 */
export class PutDatasetVersionExportsRequest extends Message<PutDatasetVersionExportsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify dataset by id.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * Identify dataset version by id.
   *
   * @generated from field: string dataset_version_id = 3;
   */
  datasetVersionId = "";

  /**
   * exports is the list of requested dataset version exports.
   * Only setting the 'format' field of the export is supported.
   *
   * @generated from field: repeated clarifai.api.DatasetVersionExport exports = 4;
   */
  exports: DatasetVersionExport[] = [];

  constructor(data?: PartialMessage<PutDatasetVersionExportsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PutDatasetVersionExportsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "exports", kind: "message", T: DatasetVersionExport, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutDatasetVersionExportsRequest {
    return new PutDatasetVersionExportsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutDatasetVersionExportsRequest {
    return new PutDatasetVersionExportsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutDatasetVersionExportsRequest {
    return new PutDatasetVersionExportsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutDatasetVersionExportsRequest | PlainMessage<PutDatasetVersionExportsRequest> | undefined, b: PutDatasetVersionExportsRequest | PlainMessage<PutDatasetVersionExportsRequest> | undefined): boolean {
    return proto3.util.equals(PutDatasetVersionExportsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiDatasetVersionResponse
 */
export class MultiDatasetVersionResponse extends Message<MultiDatasetVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.DatasetVersion dataset_versions = 2;
   */
  datasetVersions: DatasetVersion[] = [];

  constructor(data?: PartialMessage<MultiDatasetVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiDatasetVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "dataset_versions", kind: "message", T: DatasetVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiDatasetVersionResponse {
    return new MultiDatasetVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiDatasetVersionResponse {
    return new MultiDatasetVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiDatasetVersionResponse {
    return new MultiDatasetVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiDatasetVersionResponse | PlainMessage<MultiDatasetVersionResponse> | undefined, b: MultiDatasetVersionResponse | PlainMessage<MultiDatasetVersionResponse> | undefined): boolean {
    return proto3.util.equals(MultiDatasetVersionResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiDatasetVersionExportResponse
 */
export class MultiDatasetVersionExportResponse extends Message<MultiDatasetVersionExportResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.DatasetVersionExport exports = 2;
   */
  exports: DatasetVersionExport[] = [];

  constructor(data?: PartialMessage<MultiDatasetVersionExportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiDatasetVersionExportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "exports", kind: "message", T: DatasetVersionExport, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiDatasetVersionExportResponse {
    return new MultiDatasetVersionExportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiDatasetVersionExportResponse {
    return new MultiDatasetVersionExportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiDatasetVersionExportResponse {
    return new MultiDatasetVersionExportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiDatasetVersionExportResponse | PlainMessage<MultiDatasetVersionExportResponse> | undefined, b: MultiDatasetVersionExportResponse | PlainMessage<MultiDatasetVersionExportResponse> | undefined): boolean {
    return proto3.util.equals(MultiDatasetVersionExportResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiDatasetVersionMetricsGroupResponse
 */
export class MultiDatasetVersionMetricsGroupResponse extends Message<MultiDatasetVersionMetricsGroupResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2;
   */
  datasetVersionMetricsGroups: DatasetVersionMetricsGroup[] = [];

  constructor(data?: PartialMessage<MultiDatasetVersionMetricsGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiDatasetVersionMetricsGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "dataset_version_metrics_groups", kind: "message", T: DatasetVersionMetricsGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiDatasetVersionMetricsGroupResponse {
    return new MultiDatasetVersionMetricsGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiDatasetVersionMetricsGroupResponse {
    return new MultiDatasetVersionMetricsGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiDatasetVersionMetricsGroupResponse {
    return new MultiDatasetVersionMetricsGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiDatasetVersionMetricsGroupResponse | PlainMessage<MultiDatasetVersionMetricsGroupResponse> | undefined, b: MultiDatasetVersionMetricsGroupResponse | PlainMessage<MultiDatasetVersionMetricsGroupResponse> | undefined): boolean {
    return proto3.util.equals(MultiDatasetVersionMetricsGroupResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.SingleDatasetVersionResponse
 */
export class SingleDatasetVersionResponse extends Message<SingleDatasetVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.DatasetVersion dataset_version = 2;
   */
  datasetVersion?: DatasetVersion;

  constructor(data?: PartialMessage<SingleDatasetVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleDatasetVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "dataset_version", kind: "message", T: DatasetVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleDatasetVersionResponse {
    return new SingleDatasetVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleDatasetVersionResponse {
    return new SingleDatasetVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleDatasetVersionResponse {
    return new SingleDatasetVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleDatasetVersionResponse | PlainMessage<SingleDatasetVersionResponse> | undefined, b: SingleDatasetVersionResponse | PlainMessage<SingleDatasetVersionResponse> | undefined): boolean {
    return proto3.util.equals(SingleDatasetVersionResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.GetDatasetInputsSearchAddJobRequest
 */
export class GetDatasetInputsSearchAddJobRequest extends Message<GetDatasetInputsSearchAddJobRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string job_id = 2;
   */
  jobId = "";

  constructor(data?: PartialMessage<GetDatasetInputsSearchAddJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetDatasetInputsSearchAddJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetInputsSearchAddJobRequest {
    return new GetDatasetInputsSearchAddJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetInputsSearchAddJobRequest {
    return new GetDatasetInputsSearchAddJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetInputsSearchAddJobRequest {
    return new GetDatasetInputsSearchAddJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatasetInputsSearchAddJobRequest | PlainMessage<GetDatasetInputsSearchAddJobRequest> | undefined, b: GetDatasetInputsSearchAddJobRequest | PlainMessage<GetDatasetInputsSearchAddJobRequest> | undefined): boolean {
    return proto3.util.equals(GetDatasetInputsSearchAddJobRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.SingleDatasetInputsSearchAddJobResponse
 */
export class SingleDatasetInputsSearchAddJobResponse extends Message<SingleDatasetInputsSearchAddJobResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.DatasetInputsSearchAddJob job = 2;
   */
  job?: DatasetInputsSearchAddJob;

  constructor(data?: PartialMessage<SingleDatasetInputsSearchAddJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleDatasetInputsSearchAddJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "job", kind: "message", T: DatasetInputsSearchAddJob },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleDatasetInputsSearchAddJobResponse {
    return new SingleDatasetInputsSearchAddJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleDatasetInputsSearchAddJobResponse {
    return new SingleDatasetInputsSearchAddJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleDatasetInputsSearchAddJobResponse {
    return new SingleDatasetInputsSearchAddJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleDatasetInputsSearchAddJobResponse | PlainMessage<SingleDatasetInputsSearchAddJobResponse> | undefined, b: SingleDatasetInputsSearchAddJobResponse | PlainMessage<SingleDatasetInputsSearchAddJobResponse> | undefined): boolean {
    return proto3.util.equals(SingleDatasetInputsSearchAddJobResponse, a, b);
  }
}

/**
 * //////////////////////////////////////////////////
 * Model prediction related stuff needs inputs and produces outputs.
 * //////////////////////////////////////////////////
 * Model prediction.
 *
 * @generated from message clarifai.api.PostModelOutputsRequest
 */
export class PostModelOutputsRequest extends Message<PostModelOutputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: string version_id = 3;
   */
  versionId = "";

  /**
   * @generated from field: repeated clarifai.api.Input inputs = 4;
   */
  inputs: Input[] = [];

  /**
   * This allows you to specify config options for the model such as
   * the language which appear's in the model's output_info.
   *
   * @generated from field: clarifai.api.Model model = 5;
   */
  model?: Model;

  constructor(data?: PartialMessage<PostModelOutputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelOutputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "inputs", kind: "message", T: Input, repeated: true },
    { no: 5, name: "model", kind: "message", T: Model },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelOutputsRequest {
    return new PostModelOutputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelOutputsRequest {
    return new PostModelOutputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelOutputsRequest {
    return new PostModelOutputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelOutputsRequest | PlainMessage<PostModelOutputsRequest> | undefined, b: PostModelOutputsRequest | PlainMessage<PostModelOutputsRequest> | undefined): boolean {
    return proto3.util.equals(PostModelOutputsRequest, a, b);
  }
}

/**
 * Listing the inputs that went into training this model.
 *
 * @generated from message clarifai.api.ListModelInputsRequest
 */
export class ListModelInputsRequest extends Message<ListModelInputsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: string version_id = 3;
   */
  versionId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 4;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 5;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListModelInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListModelInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelInputsRequest {
    return new ListModelInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelInputsRequest {
    return new ListModelInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelInputsRequest {
    return new ListModelInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelInputsRequest | PlainMessage<ListModelInputsRequest> | undefined, b: ListModelInputsRequest | PlainMessage<ListModelInputsRequest> | undefined): boolean {
    return proto3.util.equals(ListModelInputsRequest, a, b);
  }
}

/**
 * GetKeyRequest
 *
 * @generated from message clarifai.api.GetKeyRequest
 */
export class GetKeyRequest extends Message<GetKeyRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string key_id = 2;
   */
  keyId = "";

  constructor(data?: PartialMessage<GetKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyRequest | PlainMessage<GetKeyRequest> | undefined, b: GetKeyRequest | PlainMessage<GetKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetKeyRequest, a, b);
  }
}

/**
 * ListKeysRequest
 *
 * @generated from message clarifai.api.ListKeysRequest
 */
export class ListKeysRequest extends Message<ListKeysRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined, b: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListKeysRequest, a, b);
  }
}

/**
 * ListAppKeysRequest
 *
 * @generated from message clarifai.api.ListAppKeysRequest
 */
export class ListAppKeysRequest extends Message<ListAppKeysRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListAppKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAppKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppKeysRequest {
    return new ListAppKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppKeysRequest {
    return new ListAppKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppKeysRequest {
    return new ListAppKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppKeysRequest | PlainMessage<ListAppKeysRequest> | undefined, b: ListAppKeysRequest | PlainMessage<ListAppKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListAppKeysRequest, a, b);
  }
}

/**
 * PostKeysRequest
 *
 * @generated from message clarifai.api.PostKeysRequest
 */
export class PostKeysRequest extends Message<PostKeysRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Key keys = 2;
   */
  keys: Key[] = [];

  constructor(data?: PartialMessage<PostKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "keys", kind: "message", T: Key, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostKeysRequest {
    return new PostKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostKeysRequest {
    return new PostKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostKeysRequest {
    return new PostKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostKeysRequest | PlainMessage<PostKeysRequest> | undefined, b: PostKeysRequest | PlainMessage<PostKeysRequest> | undefined): boolean {
    return proto3.util.equals(PostKeysRequest, a, b);
  }
}

/**
 * DeleteKeyRequest
 *
 * @generated from message clarifai.api.DeleteKeyRequest
 */
export class DeleteKeyRequest extends Message<DeleteKeyRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string key_id = 2;
   */
  keyId = "";

  constructor(data?: PartialMessage<DeleteKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteKeyRequest | PlainMessage<DeleteKeyRequest> | undefined, b: DeleteKeyRequest | PlainMessage<DeleteKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteKeyRequest, a, b);
  }
}

/**
 * PatchKeysRequest
 *
 * @generated from message clarifai.api.PatchKeysRequest
 */
export class PatchKeysRequest extends Message<PatchKeysRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Key keys = 2;
   */
  keys: Key[] = [];

  /**
   * The action to perform on the patched objects
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "keys", kind: "message", T: Key, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchKeysRequest {
    return new PatchKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchKeysRequest {
    return new PatchKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchKeysRequest {
    return new PatchKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchKeysRequest | PlainMessage<PatchKeysRequest> | undefined, b: PatchKeysRequest | PlainMessage<PatchKeysRequest> | undefined): boolean {
    return proto3.util.equals(PatchKeysRequest, a, b);
  }
}

/**
 * SingleKeyResponse
 *
 * @generated from message clarifai.api.SingleKeyResponse
 */
export class SingleKeyResponse extends Message<SingleKeyResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Key key = 2;
   */
  key?: Key;

  constructor(data?: PartialMessage<SingleKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "key", kind: "message", T: Key },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleKeyResponse {
    return new SingleKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleKeyResponse {
    return new SingleKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleKeyResponse {
    return new SingleKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleKeyResponse | PlainMessage<SingleKeyResponse> | undefined, b: SingleKeyResponse | PlainMessage<SingleKeyResponse> | undefined): boolean {
    return proto3.util.equals(SingleKeyResponse, a, b);
  }
}

/**
 * MultiKeyResponse
 *
 * @generated from message clarifai.api.MultiKeyResponse
 */
export class MultiKeyResponse extends Message<MultiKeyResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Key keys = 2;
   */
  keys: Key[] = [];

  constructor(data?: PartialMessage<MultiKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "keys", kind: "message", T: Key, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiKeyResponse {
    return new MultiKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiKeyResponse {
    return new MultiKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiKeyResponse {
    return new MultiKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiKeyResponse | PlainMessage<MultiKeyResponse> | undefined, b: MultiKeyResponse | PlainMessage<MultiKeyResponse> | undefined): boolean {
    return proto3.util.equals(MultiKeyResponse, a, b);
  }
}

/**
 * FetchLicenseRequest
 *
 * @generated from message clarifai.api.FetchLicenseRequest
 */
export class FetchLicenseRequest extends Message<FetchLicenseRequest> {
  /**
   * @generated from field: string license_id = 1;
   */
  licenseId = "";

  /**
   * public key generated in client side, per-activation scope (only created when client first fetches license file, but it is decided by client)
   *
   * @generated from field: string public_key = 2;
   */
  publicKey = "";

  /**
   * @generated from field: bytes signature = 3;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<FetchLicenseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.FetchLicenseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "license_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchLicenseRequest {
    return new FetchLicenseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchLicenseRequest {
    return new FetchLicenseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchLicenseRequest {
    return new FetchLicenseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchLicenseRequest | PlainMessage<FetchLicenseRequest> | undefined, b: FetchLicenseRequest | PlainMessage<FetchLicenseRequest> | undefined): boolean {
    return proto3.util.equals(FetchLicenseRequest, a, b);
  }
}

/**
 * FetchLicenseResponse
 *
 * @generated from message clarifai.api.FetchLicenseResponse
 */
export class FetchLicenseResponse extends Message<FetchLicenseResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: bytes encrypted_bytes = 2;
   */
  encryptedBytes = new Uint8Array(0);

  /**
   * Date and time the deployment was activated
   *
   * @generated from field: google.protobuf.Timestamp activated_at = 3;
   */
  activatedAt?: Timestamp;

  /**
   * @generated from field: string public_key = 4;
   */
  publicKey = "";

  /**
   * @generated from field: bytes signature = 5;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<FetchLicenseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.FetchLicenseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "encrypted_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "activated_at", kind: "message", T: Timestamp },
    { no: 4, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchLicenseResponse {
    return new FetchLicenseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchLicenseResponse {
    return new FetchLicenseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchLicenseResponse {
    return new FetchLicenseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchLicenseResponse | PlainMessage<FetchLicenseResponse> | undefined, b: FetchLicenseResponse | PlainMessage<FetchLicenseResponse> | undefined): boolean {
    return proto3.util.equals(FetchLicenseResponse, a, b);
  }
}

/**
 * ValidateLicenseRequest
 *
 * @generated from message clarifai.api.ValidateLicenseRequest
 */
export class ValidateLicenseRequest extends Message<ValidateLicenseRequest> {
  /**
   * @generated from field: string license_id = 1;
   */
  licenseId = "";

  /**
   * used to prevent users providing faked but valid response
   *
   * @generated from field: string request_id = 2;
   */
  requestId = "";

  /**
   * for example, returned by previous successful validation
   *
   * @generated from field: google.protobuf.Timestamp activated_at = 3;
   */
  activatedAt?: Timestamp;

  /**
   * public key generated in client side
   *
   * @generated from field: string public_key = 4;
   */
  publicKey = "";

  /**
   * @generated from field: bytes signature = 5;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<ValidateLicenseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ValidateLicenseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "license_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "activated_at", kind: "message", T: Timestamp },
    { no: 4, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateLicenseRequest {
    return new ValidateLicenseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateLicenseRequest {
    return new ValidateLicenseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateLicenseRequest {
    return new ValidateLicenseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateLicenseRequest | PlainMessage<ValidateLicenseRequest> | undefined, b: ValidateLicenseRequest | PlainMessage<ValidateLicenseRequest> | undefined): boolean {
    return proto3.util.equals(ValidateLicenseRequest, a, b);
  }
}

/**
 * ValidateLicenseResponse
 *
 * @generated from message clarifai.api.ValidateLicenseResponse
 */
export class ValidateLicenseResponse extends Message<ValidateLicenseResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * mapping to the request_id in request
   *
   * @generated from field: string request_id = 2;
   */
  requestId = "";

  /**
   * @generated from field: repeated clarifai.api.LicenseLimit limits = 3;
   */
  limits: LicenseLimit[] = [];

  /**
   * @generated from field: bytes signature = 4;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<ValidateLicenseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ValidateLicenseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limits", kind: "message", T: LicenseLimit, repeated: true },
    { no: 4, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateLicenseResponse {
    return new ValidateLicenseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateLicenseResponse {
    return new ValidateLicenseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateLicenseResponse {
    return new ValidateLicenseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateLicenseResponse | PlainMessage<ValidateLicenseResponse> | undefined, b: ValidateLicenseResponse | PlainMessage<ValidateLicenseResponse> | undefined): boolean {
    return proto3.util.equals(ValidateLicenseResponse, a, b);
  }
}

/**
 * ListLicensesRequest
 *
 * @generated from message clarifai.api.ListLicensesRequest
 */
export class ListLicensesRequest extends Message<ListLicensesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListLicensesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListLicensesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListLicensesRequest {
    return new ListLicensesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListLicensesRequest {
    return new ListLicensesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListLicensesRequest {
    return new ListLicensesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListLicensesRequest | PlainMessage<ListLicensesRequest> | undefined, b: ListLicensesRequest | PlainMessage<ListLicensesRequest> | undefined): boolean {
    return proto3.util.equals(ListLicensesRequest, a, b);
  }
}

/**
 * GetLicenseRequest
 *
 * @generated from message clarifai.api.GetLicenseRequest
 */
export class GetLicenseRequest extends Message<GetLicenseRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string license_id = 2;
   */
  licenseId = "";

  constructor(data?: PartialMessage<GetLicenseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetLicenseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "license_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLicenseRequest {
    return new GetLicenseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLicenseRequest {
    return new GetLicenseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLicenseRequest {
    return new GetLicenseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLicenseRequest | PlainMessage<GetLicenseRequest> | undefined, b: GetLicenseRequest | PlainMessage<GetLicenseRequest> | undefined): boolean {
    return proto3.util.equals(GetLicenseRequest, a, b);
  }
}

/**
 * SingleLicenseResponse
 *
 * @generated from message clarifai.api.SingleLicenseResponse
 */
export class SingleLicenseResponse extends Message<SingleLicenseResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.License license = 2;
   */
  license?: License;

  constructor(data?: PartialMessage<SingleLicenseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleLicenseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "license", kind: "message", T: License },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleLicenseResponse {
    return new SingleLicenseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleLicenseResponse {
    return new SingleLicenseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleLicenseResponse {
    return new SingleLicenseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleLicenseResponse | PlainMessage<SingleLicenseResponse> | undefined, b: SingleLicenseResponse | PlainMessage<SingleLicenseResponse> | undefined): boolean {
    return proto3.util.equals(SingleLicenseResponse, a, b);
  }
}

/**
 * MultipleLicensesResponse
 *
 * @generated from message clarifai.api.MultipleLicensesResponse
 */
export class MultipleLicensesResponse extends Message<MultipleLicensesResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.License licenses = 2;
   */
  licenses: License[] = [];

  constructor(data?: PartialMessage<MultipleLicensesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultipleLicensesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "licenses", kind: "message", T: License, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultipleLicensesResponse {
    return new MultipleLicensesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultipleLicensesResponse {
    return new MultipleLicensesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultipleLicensesResponse {
    return new MultipleLicensesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultipleLicensesResponse | PlainMessage<MultipleLicensesResponse> | undefined, b: MultipleLicensesResponse | PlainMessage<MultipleLicensesResponse> | undefined): boolean {
    return proto3.util.equals(MultipleLicensesResponse, a, b);
  }
}

/**
 * GetModelRequest
 *
 * @generated from message clarifai.api.GetModelRequest
 */
export class GetModelRequest extends Message<GetModelRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * This is included so that we can re-use this request for multiple
   * rpcs with and without the version_id.
   *
   * @generated from field: string version_id = 3;
   */
  versionId = "";

  /**
   * @generated from field: string language = 4;
   */
  language = "";

  /**
   * @generated from field: bool trained_before = 5;
   */
  trainedBefore = false;

  /**
   * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets
   *
   * @generated from field: repeated string additional_fields = 19;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<GetModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "trained_before", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelRequest {
    return new GetModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelRequest {
    return new GetModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelRequest {
    return new GetModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelRequest | PlainMessage<GetModelRequest> | undefined, b: GetModelRequest | PlainMessage<GetModelRequest> | undefined): boolean {
    return proto3.util.equals(GetModelRequest, a, b);
  }
}

/**
 * ListModelsRequest
 *
 * @generated from message clarifai.api.ListModelsRequest
 */
export class ListModelsRequest extends Message<ListModelsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  /**
   * Sorting options:
   * Whether to sort in ascending order. If false, will order in descending order.
   *
   * @generated from field: bool sort_ascending = 10;
   */
  sortAscending = false;

  /**
   * @generated from oneof clarifai.api.ListModelsRequest.sort_by
   */
  sortBy: {
    /**
     * Whether to order by the name
     *
     * @generated from field: bool sort_by_name = 11;
     */
    value: boolean;
    case: "sortByName";
  } | {
    /**
     * Whether to order by the number of training inputs
     *
     * @generated from field: bool sort_by_num_inputs = 12;
     */
    value: boolean;
    case: "sortByNumInputs";
  } | {
    /**
     * Whether to order by the modified_at time of the latest model version.
     * If neither sort option is set to true, will sort by modified_at.
     *
     * @generated from field: bool sort_by_modified_at = 13;
     */
    value: boolean;
    case: "sortByModifiedAt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Filtering options:
   * Query name, description and id fields, that can contain the words in the query string. Does NOT support wildcards - full words only. Supports operators "OR" and "-" as NOT.
   *
   * @generated from field: string query = 14;
   */
  query = "";

  /**
   * Filter by the description and id of the model. This supports wildcard queries like "gen*" to match "general" as an example.
   *
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * Extends the name filter to include the user_id of the application owner that the model belongs to.
   *
   * @generated from field: bool filter_by_user_id = 22;
   */
  filterByUserId = false;

  /**
   * Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
   * supported.
   *
   * @generated from field: string model_type_id = 6;
   */
  modelTypeId = "";

  /**
   * If true, we only return models that have the status MODEL_TRAINED, which includes non-trainable model types.
   *
   * @generated from field: bool trained_only = 7;
   */
  trainedOnly = false;

  /**
   * The list of input fields to the model.
   * For example, you can specify 'image', which will return models that make inferences on images like visual-classifier models.
   *
   * @generated from field: repeated string input_fields = 8;
   */
  inputFields: string[] = [];

  /**
   * The list of output fields to the model.
   * For example, you can specify 'regions[...].data.concepts', which will return visual-detector models.
   *
   * @generated from field: repeated string output_fields = 9;
   */
  outputFields: string[] = [];

  /**
   * Filter by the license of the model version
   *
   * @generated from field: string license = 15;
   */
  license = "";

  /**
   * If true, we only return models that are handpicked by clarifai staff
   *
   * @generated from field: bool featured_only = 16;
   */
  featuredOnly = false;

  /**
   * If true, we only return models that are starred by the requesting user
   *
   * @generated from field: bool starred_only = 20;
   */
  starredOnly = false;

  /**
   * List of toolkit tags to filter by
   *
   * @generated from field: repeated string toolkits = 17;
   */
  toolkits: string[] = [];

  /**
   * List of use_case tags to filter by
   *
   * @generated from field: repeated string use_cases = 18;
   */
  useCases: string[] = [];

  /**
   * List of language tags to filter by
   *
   * @generated from field: repeated string languages = 21;
   */
  languages: string[] = [];

  /**
   * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets
   *
   * @generated from field: repeated string additional_fields = 19;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<ListModelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListModelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "sort_ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "sort_by_name", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 12, name: "sort_by_num_inputs", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 13, name: "sort_by_modified_at", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 14, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "filter_by_user_id", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "model_type_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "trained_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "input_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "output_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "license", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "featured_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "starred_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "toolkits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 18, name: "use_cases", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 21, name: "languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 19, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelsRequest {
    return new ListModelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelsRequest {
    return new ListModelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelsRequest {
    return new ListModelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelsRequest | PlainMessage<ListModelsRequest> | undefined, b: ListModelsRequest | PlainMessage<ListModelsRequest> | undefined): boolean {
    return proto3.util.equals(ListModelsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PatchModelToolkitsRequest
 */
export class PatchModelToolkitsRequest extends Message<PatchModelToolkitsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: repeated string toolkits = 3;
   */
  toolkits: string[] = [];

  /**
   * overwrite supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchModelToolkitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchModelToolkitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "toolkits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchModelToolkitsRequest {
    return new PatchModelToolkitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchModelToolkitsRequest {
    return new PatchModelToolkitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchModelToolkitsRequest {
    return new PatchModelToolkitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchModelToolkitsRequest | PlainMessage<PatchModelToolkitsRequest> | undefined, b: PatchModelToolkitsRequest | PlainMessage<PatchModelToolkitsRequest> | undefined): boolean {
    return proto3.util.equals(PatchModelToolkitsRequest, a, b);
  }
}

/**
 * PatchModelCheckConsentsRequest
 *
 * @generated from message clarifai.api.PatchModelCheckConsentsRequest
 */
export class PatchModelCheckConsentsRequest extends Message<PatchModelCheckConsentsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * the model id
   *
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * the consents
   *
   * @generated from field: repeated string check_consents = 3;
   */
  checkConsents: string[] = [];

  /**
   * overwrite supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchModelCheckConsentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchModelCheckConsentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "check_consents", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchModelCheckConsentsRequest {
    return new PatchModelCheckConsentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchModelCheckConsentsRequest {
    return new PatchModelCheckConsentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchModelCheckConsentsRequest {
    return new PatchModelCheckConsentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchModelCheckConsentsRequest | PlainMessage<PatchModelCheckConsentsRequest> | undefined, b: PatchModelCheckConsentsRequest | PlainMessage<PatchModelCheckConsentsRequest> | undefined): boolean {
    return proto3.util.equals(PatchModelCheckConsentsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PatchModelUseCasesRequest
 */
export class PatchModelUseCasesRequest extends Message<PatchModelUseCasesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: repeated string usecases = 3;
   */
  usecases: string[] = [];

  /**
   * overwrite supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchModelUseCasesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchModelUseCasesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "usecases", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchModelUseCasesRequest {
    return new PatchModelUseCasesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchModelUseCasesRequest {
    return new PatchModelUseCasesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchModelUseCasesRequest {
    return new PatchModelUseCasesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchModelUseCasesRequest | PlainMessage<PatchModelUseCasesRequest> | undefined, b: PatchModelUseCasesRequest | PlainMessage<PatchModelUseCasesRequest> | undefined): boolean {
    return proto3.util.equals(PatchModelUseCasesRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PatchModelLanguagesRequest
 */
export class PatchModelLanguagesRequest extends Message<PatchModelLanguagesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: repeated string languages = 3;
   */
  languages: string[] = [];

  /**
   * Only overwrite supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchModelLanguagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchModelLanguagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchModelLanguagesRequest {
    return new PatchModelLanguagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchModelLanguagesRequest {
    return new PatchModelLanguagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchModelLanguagesRequest {
    return new PatchModelLanguagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchModelLanguagesRequest | PlainMessage<PatchModelLanguagesRequest> | undefined, b: PatchModelLanguagesRequest | PlainMessage<PatchModelLanguagesRequest> | undefined): boolean {
    return proto3.util.equals(PatchModelLanguagesRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiModelToolkitResponse
 */
export class MultiModelToolkitResponse extends Message<MultiModelToolkitResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated string toolkits = 2;
   */
  toolkits: string[] = [];

  constructor(data?: PartialMessage<MultiModelToolkitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelToolkitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "toolkits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelToolkitResponse {
    return new MultiModelToolkitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelToolkitResponse {
    return new MultiModelToolkitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelToolkitResponse {
    return new MultiModelToolkitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelToolkitResponse | PlainMessage<MultiModelToolkitResponse> | undefined, b: MultiModelToolkitResponse | PlainMessage<MultiModelToolkitResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelToolkitResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiModelCheckConsentResponse
 */
export class MultiModelCheckConsentResponse extends Message<MultiModelCheckConsentResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated string check_consents = 2;
   */
  checkConsents: string[] = [];

  constructor(data?: PartialMessage<MultiModelCheckConsentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelCheckConsentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "check_consents", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelCheckConsentResponse {
    return new MultiModelCheckConsentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelCheckConsentResponse {
    return new MultiModelCheckConsentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelCheckConsentResponse {
    return new MultiModelCheckConsentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelCheckConsentResponse | PlainMessage<MultiModelCheckConsentResponse> | undefined, b: MultiModelCheckConsentResponse | PlainMessage<MultiModelCheckConsentResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelCheckConsentResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiModelUseCaseResponse
 */
export class MultiModelUseCaseResponse extends Message<MultiModelUseCaseResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated string usecases = 2;
   */
  usecases: string[] = [];

  constructor(data?: PartialMessage<MultiModelUseCaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelUseCaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "usecases", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelUseCaseResponse {
    return new MultiModelUseCaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelUseCaseResponse {
    return new MultiModelUseCaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelUseCaseResponse {
    return new MultiModelUseCaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelUseCaseResponse | PlainMessage<MultiModelUseCaseResponse> | undefined, b: MultiModelUseCaseResponse | PlainMessage<MultiModelUseCaseResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelUseCaseResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiModelLanguageResponse
 */
export class MultiModelLanguageResponse extends Message<MultiModelLanguageResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated string languages = 2;
   */
  languages: string[] = [];

  constructor(data?: PartialMessage<MultiModelLanguageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelLanguageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelLanguageResponse {
    return new MultiModelLanguageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelLanguageResponse {
    return new MultiModelLanguageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelLanguageResponse {
    return new MultiModelLanguageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelLanguageResponse | PlainMessage<MultiModelLanguageResponse> | undefined, b: MultiModelLanguageResponse | PlainMessage<MultiModelLanguageResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelLanguageResponse, a, b);
  }
}

/**
 * PostModelsRequest
 *
 * @generated from message clarifai.api.PostModelsRequest
 */
export class PostModelsRequest extends Message<PostModelsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * NOTE: inconsistent since "model" is not plural, please use "models" below.
   * Previously you could only create one model at a time.
   * We still support this but you should pass it as models=[model] so
   * that this endpoint is consistent with the rest of our API.
   *
   * @generated from field: clarifai.api.Model model = 2 [deprecated = true];
   * @deprecated
   */
  model?: Model;

  /**
   * This allows you to create one or more model by posting it to the API.
   *
   * @generated from field: repeated clarifai.api.Model models = 3;
   */
  models: Model[] = [];

  constructor(data?: PartialMessage<PostModelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model", kind: "message", T: Model },
    { no: 3, name: "models", kind: "message", T: Model, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelsRequest {
    return new PostModelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelsRequest {
    return new PostModelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelsRequest {
    return new PostModelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelsRequest | PlainMessage<PostModelsRequest> | undefined, b: PostModelsRequest | PlainMessage<PostModelsRequest> | undefined): boolean {
    return proto3.util.equals(PostModelsRequest, a, b);
  }
}

/**
 * PatchModelsRequest
 *
 * @generated from message clarifai.api.PatchModelsRequest
 */
export class PatchModelsRequest extends Message<PatchModelsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Model models = 2;
   */
  models: Model[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchModelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchModelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "models", kind: "message", T: Model, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchModelsRequest {
    return new PatchModelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchModelsRequest {
    return new PatchModelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchModelsRequest {
    return new PatchModelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchModelsRequest | PlainMessage<PatchModelsRequest> | undefined, b: PatchModelsRequest | PlainMessage<PatchModelsRequest> | undefined): boolean {
    return proto3.util.equals(PatchModelsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.IdUpdateSource
 */
export class IdUpdateSource extends Message<IdUpdateSource> {
  /**
   * old id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * new id
   *
   * @generated from field: string new_id = 2;
   */
  newId = "";

  constructor(data?: PartialMessage<IdUpdateSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.IdUpdateSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdUpdateSource {
    return new IdUpdateSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdUpdateSource {
    return new IdUpdateSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdUpdateSource {
    return new IdUpdateSource().fromJsonString(jsonString, options);
  }

  static equals(a: IdUpdateSource | PlainMessage<IdUpdateSource> | undefined, b: IdUpdateSource | PlainMessage<IdUpdateSource> | undefined): boolean {
    return proto3.util.equals(IdUpdateSource, a, b);
  }
}

/**
 * PatchModelIdRequest
 *
 * @generated from message clarifai.api.PatchModelIdsRequest
 */
export class PatchModelIdsRequest extends Message<PatchModelIdsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Array containing 1 entry
   *
   * @generated from field: repeated clarifai.api.IdUpdateSource ids = 3;
   */
  ids: IdUpdateSource[] = [];

  /**
   * The action to perform on the patched objects
   * Only 'overwrite' is supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchModelIdsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchModelIdsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 3, name: "ids", kind: "message", T: IdUpdateSource, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchModelIdsRequest {
    return new PatchModelIdsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchModelIdsRequest {
    return new PatchModelIdsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchModelIdsRequest {
    return new PatchModelIdsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchModelIdsRequest | PlainMessage<PatchModelIdsRequest> | undefined, b: PatchModelIdsRequest | PlainMessage<PatchModelIdsRequest> | undefined): boolean {
    return proto3.util.equals(PatchModelIdsRequest, a, b);
  }
}

/**
 * DeleteModelRequest
 *
 * @generated from message clarifai.api.DeleteModelRequest
 */
export class DeleteModelRequest extends Message<DeleteModelRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  constructor(data?: PartialMessage<DeleteModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModelRequest {
    return new DeleteModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModelRequest {
    return new DeleteModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModelRequest {
    return new DeleteModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModelRequest | PlainMessage<DeleteModelRequest> | undefined, b: DeleteModelRequest | PlainMessage<DeleteModelRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModelRequest, a, b);
  }
}

/**
 * Request to delete several things by the list of ids.
 *
 * @generated from message clarifai.api.DeleteModelsRequest
 */
export class DeleteModelsRequest extends Message<DeleteModelsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  /**
   * @generated from field: bool delete_all = 3;
   */
  deleteAll = false;

  constructor(data?: PartialMessage<DeleteModelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "delete_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModelsRequest {
    return new DeleteModelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModelsRequest {
    return new DeleteModelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModelsRequest {
    return new DeleteModelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModelsRequest | PlainMessage<DeleteModelsRequest> | undefined, b: DeleteModelsRequest | PlainMessage<DeleteModelsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModelsRequest, a, b);
  }
}

/**
 * Search over the available models.
 *
 * @generated from message clarifai.api.PostModelsSearchesRequest
 */
export class PostModelsSearchesRequest extends Message<PostModelsSearchesRequest> {
  /**
   * Ids present in the url of the request.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The body of the request.
   *
   * @generated from field: clarifai.api.ModelQuery model_query = 2;
   */
  modelQuery?: ModelQuery;

  /**
   * Pagination parameters here since there are no url args in this
   * POST request.
   *
   * @generated from field: clarifai.api.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<PostModelsSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelsSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_query", kind: "message", T: ModelQuery },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelsSearchesRequest {
    return new PostModelsSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelsSearchesRequest {
    return new PostModelsSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelsSearchesRequest {
    return new PostModelsSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelsSearchesRequest | PlainMessage<PostModelsSearchesRequest> | undefined, b: PostModelsSearchesRequest | PlainMessage<PostModelsSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PostModelsSearchesRequest, a, b);
  }
}

/**
 * SingleModelResponse
 *
 * @generated from message clarifai.api.SingleModelResponse
 */
export class SingleModelResponse extends Message<SingleModelResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Model model = 2;
   */
  model?: Model;

  constructor(data?: PartialMessage<SingleModelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleModelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model", kind: "message", T: Model },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleModelResponse {
    return new SingleModelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleModelResponse {
    return new SingleModelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleModelResponse {
    return new SingleModelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleModelResponse | PlainMessage<SingleModelResponse> | undefined, b: SingleModelResponse | PlainMessage<SingleModelResponse> | undefined): boolean {
    return proto3.util.equals(SingleModelResponse, a, b);
  }
}

/**
 * MultiModelResponse
 *
 * @generated from message clarifai.api.MultiModelResponse
 */
export class MultiModelResponse extends Message<MultiModelResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Model models = 2;
   */
  models: Model[] = [];

  constructor(data?: PartialMessage<MultiModelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "models", kind: "message", T: Model, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelResponse {
    return new MultiModelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelResponse {
    return new MultiModelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelResponse {
    return new MultiModelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelResponse | PlainMessage<MultiModelResponse> | undefined, b: MultiModelResponse | PlainMessage<MultiModelResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelResponse, a, b);
  }
}

/**
 * PatchModelVersionsRequest
 *
 * @generated from message clarifai.api.PatchModelVersionsRequest
 */
export class PatchModelVersionsRequest extends Message<PatchModelVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: repeated clarifai.api.ModelVersion model_versions = 3;
   */
  modelVersions: ModelVersion[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchModelVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchModelVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_versions", kind: "message", T: ModelVersion, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchModelVersionsRequest {
    return new PatchModelVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchModelVersionsRequest {
    return new PatchModelVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchModelVersionsRequest {
    return new PatchModelVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchModelVersionsRequest | PlainMessage<PatchModelVersionsRequest> | undefined, b: PatchModelVersionsRequest | PlainMessage<PatchModelVersionsRequest> | undefined): boolean {
    return proto3.util.equals(PatchModelVersionsRequest, a, b);
  }
}

/**
 * request for different endpoints currently.
 *
 * @generated from message clarifai.api.GetModelVersionRequest
 */
export class GetModelVersionRequest extends Message<GetModelVersionRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: string version_id = 3;
   */
  versionId = "";

  constructor(data?: PartialMessage<GetModelVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetModelVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelVersionRequest {
    return new GetModelVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelVersionRequest {
    return new GetModelVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelVersionRequest {
    return new GetModelVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelVersionRequest | PlainMessage<GetModelVersionRequest> | undefined, b: GetModelVersionRequest | PlainMessage<GetModelVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetModelVersionRequest, a, b);
  }
}

/**
 * ListModelVersionsRequest
 *
 * @generated from message clarifai.api.ListModelVersionsRequest
 */
export class ListModelVersionsRequest extends Message<ListModelVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  /**
   * To list only the model versions that have these concept ids present in them.
   *
   * @generated from field: repeated string concept_ids = 5;
   */
  conceptIds: string[] = [];

  constructor(data?: PartialMessage<ListModelVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListModelVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "concept_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelVersionsRequest {
    return new ListModelVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelVersionsRequest {
    return new ListModelVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelVersionsRequest {
    return new ListModelVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelVersionsRequest | PlainMessage<ListModelVersionsRequest> | undefined, b: ListModelVersionsRequest | PlainMessage<ListModelVersionsRequest> | undefined): boolean {
    return proto3.util.equals(ListModelVersionsRequest, a, b);
  }
}

/**
 * DeleteModelVersionRequest
 *
 * @generated from message clarifai.api.DeleteModelVersionRequest
 */
export class DeleteModelVersionRequest extends Message<DeleteModelVersionRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 3;
   */
  modelId = "";

  /**
   * @generated from field: string version_id = 4;
   */
  versionId = "";

  constructor(data?: PartialMessage<DeleteModelVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModelVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 3, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModelVersionRequest {
    return new DeleteModelVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModelVersionRequest {
    return new DeleteModelVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModelVersionRequest {
    return new DeleteModelVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModelVersionRequest | PlainMessage<DeleteModelVersionRequest> | undefined, b: DeleteModelVersionRequest | PlainMessage<DeleteModelVersionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModelVersionRequest, a, b);
  }
}

/**
 * SingleModelVersionResponse
 *
 * @generated from message clarifai.api.SingleModelVersionResponse
 */
export class SingleModelVersionResponse extends Message<SingleModelVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.ModelVersion model_version = 2;
   */
  modelVersion?: ModelVersion;

  constructor(data?: PartialMessage<SingleModelVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleModelVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_version", kind: "message", T: ModelVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleModelVersionResponse {
    return new SingleModelVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleModelVersionResponse {
    return new SingleModelVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleModelVersionResponse {
    return new SingleModelVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleModelVersionResponse | PlainMessage<SingleModelVersionResponse> | undefined, b: SingleModelVersionResponse | PlainMessage<SingleModelVersionResponse> | undefined): boolean {
    return proto3.util.equals(SingleModelVersionResponse, a, b);
  }
}

/**
 * MultiModelVersionResponse
 *
 * @generated from message clarifai.api.MultiModelVersionResponse
 */
export class MultiModelVersionResponse extends Message<MultiModelVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.ModelVersion model_versions = 2;
   */
  modelVersions: ModelVersion[] = [];

  constructor(data?: PartialMessage<MultiModelVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_versions", kind: "message", T: ModelVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelVersionResponse {
    return new MultiModelVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelVersionResponse {
    return new MultiModelVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelVersionResponse {
    return new MultiModelVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelVersionResponse | PlainMessage<MultiModelVersionResponse> | undefined, b: MultiModelVersionResponse | PlainMessage<MultiModelVersionResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelVersionResponse, a, b);
  }
}

/**
 * Create (train) a new model version.
 *
 * @generated from message clarifai.api.PostModelVersionsRequest
 */
export class PostModelVersionsRequest extends Message<PostModelVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * This lets you post an existing model version rather than training a new one.
   * For internal Clarifai use only to start.
   *
   * @generated from field: repeated clarifai.api.ModelVersion model_versions = 3;
   */
  modelVersions: ModelVersion[] = [];

  /**
   * Use this to filter inputs that are used in training
   * Alternatively, use train_search & test_search fields OR dataset_version field.
   *
   * @generated from field: clarifai.api.Search search = 4 [deprecated = true];
   * @deprecated
   */
  search?: Search;

  /**
   * train_search is used to specify what data to train on.
   * Alternatively, use dataset_version field.
   *
   * @generated from field: clarifai.api.Search train_search = 5;
   */
  trainSearch?: Search;

  /**
   * test_search is used to specify what data to test on.
   * Alternatively, use dataset_version field.
   *
   * @generated from field: clarifai.api.Search test_search = 6;
   */
  testSearch?: Search;

  /**
   * whether to evaluate the transfer trained model after training
   *
   * @generated from field: bool evaluate_after_training = 7;
   */
  evaluateAfterTraining = false;

  /**
   * Description about this training run
   *
   * @generated from field: string description = 8;
   */
  description = "";

  /**
   * Use the data from this dataset version for training.
   * Set dataset_version.dataset_id to identify the dataset that you would like to use.
   * When dataset_version.id field is set,
   * the system will reuse the data from provided dataset version.
   * When dataset_version.id is not set,
   * a new dataset version will be created in the dataset using provided dataset_version fields.
   *
   * @generated from field: clarifai.api.DatasetVersion dataset_version = 9;
   */
  datasetVersion?: DatasetVersion;

  /**
   * When evaluate_after_training set to true, we will do evaluation immediately after training finishes.
   * We will merge this with default_eval_info.
   *
   * @generated from field: clarifai.api.EvalInfo eval_info = 10;
   */
  evalInfo?: EvalInfo;

  constructor(data?: PartialMessage<PostModelVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_versions", kind: "message", T: ModelVersion, repeated: true },
    { no: 4, name: "search", kind: "message", T: Search },
    { no: 5, name: "train_search", kind: "message", T: Search },
    { no: 6, name: "test_search", kind: "message", T: Search },
    { no: 7, name: "evaluate_after_training", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "dataset_version", kind: "message", T: DatasetVersion },
    { no: 10, name: "eval_info", kind: "message", T: EvalInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelVersionsRequest {
    return new PostModelVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelVersionsRequest {
    return new PostModelVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelVersionsRequest {
    return new PostModelVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelVersionsRequest | PlainMessage<PostModelVersionsRequest> | undefined, b: PostModelVersionsRequest | PlainMessage<PostModelVersionsRequest> | undefined): boolean {
    return proto3.util.equals(PostModelVersionsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PostWorkflowVersionsUnPublishRequest
 */
export class PostWorkflowVersionsUnPublishRequest extends Message<PostWorkflowVersionsUnPublishRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: repeated clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
   */
  publications: WorkflowVersionUnPublishRequest[] = [];

  constructor(data?: PartialMessage<PostWorkflowVersionsUnPublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowVersionsUnPublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "publications", kind: "message", T: WorkflowVersionUnPublishRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowVersionsUnPublishRequest {
    return new PostWorkflowVersionsUnPublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowVersionsUnPublishRequest {
    return new PostWorkflowVersionsUnPublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowVersionsUnPublishRequest {
    return new PostWorkflowVersionsUnPublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowVersionsUnPublishRequest | PlainMessage<PostWorkflowVersionsUnPublishRequest> | undefined, b: PostWorkflowVersionsUnPublishRequest | PlainMessage<PostWorkflowVersionsUnPublishRequest> | undefined): boolean {
    return proto3.util.equals(PostWorkflowVersionsUnPublishRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PostWorkflowVersionsPublishRequest
 */
export class PostWorkflowVersionsPublishRequest extends Message<PostWorkflowVersionsPublishRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: repeated clarifai.api.WorkflowVersionPublishRequest publications = 3;
   */
  publications: WorkflowVersionPublishRequest[] = [];

  constructor(data?: PartialMessage<PostWorkflowVersionsPublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowVersionsPublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "publications", kind: "message", T: WorkflowVersionPublishRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowVersionsPublishRequest {
    return new PostWorkflowVersionsPublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowVersionsPublishRequest {
    return new PostWorkflowVersionsPublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowVersionsPublishRequest {
    return new PostWorkflowVersionsPublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowVersionsPublishRequest | PlainMessage<PostWorkflowVersionsPublishRequest> | undefined, b: PostWorkflowVersionsPublishRequest | PlainMessage<PostWorkflowVersionsPublishRequest> | undefined): boolean {
    return proto3.util.equals(PostWorkflowVersionsPublishRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.WorkflowVersionPublishRequest
 */
export class WorkflowVersionPublishRequest extends Message<WorkflowVersionPublishRequest> {
  /**
   * @generated from field: string version_id = 1;
   */
  versionId = "";

  constructor(data?: PartialMessage<WorkflowVersionPublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.WorkflowVersionPublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowVersionPublishRequest {
    return new WorkflowVersionPublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowVersionPublishRequest {
    return new WorkflowVersionPublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowVersionPublishRequest {
    return new WorkflowVersionPublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowVersionPublishRequest | PlainMessage<WorkflowVersionPublishRequest> | undefined, b: WorkflowVersionPublishRequest | PlainMessage<WorkflowVersionPublishRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowVersionPublishRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.WorkflowVersionUnPublishRequest
 */
export class WorkflowVersionUnPublishRequest extends Message<WorkflowVersionUnPublishRequest> {
  /**
   * @generated from field: string version_id = 1;
   */
  versionId = "";

  constructor(data?: PartialMessage<WorkflowVersionUnPublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.WorkflowVersionUnPublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowVersionUnPublishRequest {
    return new WorkflowVersionUnPublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowVersionUnPublishRequest {
    return new WorkflowVersionUnPublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowVersionUnPublishRequest {
    return new WorkflowVersionUnPublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowVersionUnPublishRequest | PlainMessage<WorkflowVersionUnPublishRequest> | undefined, b: WorkflowVersionUnPublishRequest | PlainMessage<WorkflowVersionUnPublishRequest> | undefined): boolean {
    return proto3.util.equals(WorkflowVersionUnPublishRequest, a, b);
  }
}

/**
 * ModelVersionPublishRequest
 *
 * @generated from message clarifai.api.ModelVersionPublishRequest
 */
export class ModelVersionPublishRequest extends Message<ModelVersionPublishRequest> {
  /**
   * @generated from field: string version_id = 1;
   */
  versionId = "";

  constructor(data?: PartialMessage<ModelVersionPublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ModelVersionPublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelVersionPublishRequest {
    return new ModelVersionPublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelVersionPublishRequest {
    return new ModelVersionPublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelVersionPublishRequest {
    return new ModelVersionPublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModelVersionPublishRequest | PlainMessage<ModelVersionPublishRequest> | undefined, b: ModelVersionPublishRequest | PlainMessage<ModelVersionPublishRequest> | undefined): boolean {
    return proto3.util.equals(ModelVersionPublishRequest, a, b);
  }
}

/**
 * PostModelVersionsPublishRequest
 *
 * @generated from message clarifai.api.PostModelVersionsPublishRequest
 */
export class PostModelVersionsPublishRequest extends Message<PostModelVersionsPublishRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: repeated clarifai.api.ModelVersionPublishRequest publications = 3;
   */
  publications: ModelVersionPublishRequest[] = [];

  constructor(data?: PartialMessage<PostModelVersionsPublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelVersionsPublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "publications", kind: "message", T: ModelVersionPublishRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelVersionsPublishRequest {
    return new PostModelVersionsPublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelVersionsPublishRequest {
    return new PostModelVersionsPublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelVersionsPublishRequest {
    return new PostModelVersionsPublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelVersionsPublishRequest | PlainMessage<PostModelVersionsPublishRequest> | undefined, b: PostModelVersionsPublishRequest | PlainMessage<PostModelVersionsPublishRequest> | undefined): boolean {
    return proto3.util.equals(PostModelVersionsPublishRequest, a, b);
  }
}

/**
 * ModelVersionUnpublishRequest
 *
 * @generated from message clarifai.api.ModelVersionUnpublishRequest
 */
export class ModelVersionUnpublishRequest extends Message<ModelVersionUnpublishRequest> {
  /**
   * @generated from field: string version_id = 1;
   */
  versionId = "";

  constructor(data?: PartialMessage<ModelVersionUnpublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ModelVersionUnpublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelVersionUnpublishRequest {
    return new ModelVersionUnpublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelVersionUnpublishRequest {
    return new ModelVersionUnpublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelVersionUnpublishRequest {
    return new ModelVersionUnpublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModelVersionUnpublishRequest | PlainMessage<ModelVersionUnpublishRequest> | undefined, b: ModelVersionUnpublishRequest | PlainMessage<ModelVersionUnpublishRequest> | undefined): boolean {
    return proto3.util.equals(ModelVersionUnpublishRequest, a, b);
  }
}

/**
 * PostModelVersionsUnPublishRequest
 *
 * @generated from message clarifai.api.PostModelVersionsUnPublishRequest
 */
export class PostModelVersionsUnPublishRequest extends Message<PostModelVersionsUnPublishRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: repeated clarifai.api.ModelVersionUnpublishRequest publications = 3;
   */
  publications: ModelVersionUnpublishRequest[] = [];

  constructor(data?: PartialMessage<PostModelVersionsUnPublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelVersionsUnPublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "publications", kind: "message", T: ModelVersionUnpublishRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelVersionsUnPublishRequest {
    return new PostModelVersionsUnPublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelVersionsUnPublishRequest {
    return new PostModelVersionsUnPublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelVersionsUnPublishRequest {
    return new PostModelVersionsUnPublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelVersionsUnPublishRequest | PlainMessage<PostModelVersionsUnPublishRequest> | undefined, b: PostModelVersionsUnPublishRequest | PlainMessage<PostModelVersionsUnPublishRequest> | undefined): boolean {
    return proto3.util.equals(PostModelVersionsUnPublishRequest, a, b);
  }
}

/**
 * Evaluate this model version.
 *
 * @generated from message clarifai.api.PostModelVersionMetricsRequest
 */
export class PostModelVersionMetricsRequest extends Message<PostModelVersionMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: string version_id = 3;
   */
  versionId = "";

  /**
   * @generated from field: uint32 max_examples = 4;
   */
  maxExamples = 0;

  /**
   * Use this to filter inputs that are used in evaluation
   *
   * @generated from field: clarifai.api.Search test_search = 5;
   */
  testSearch?: Search;

  /**
   * evaluation info. Such as dataset used for evaluation.
   *
   * @generated from field: clarifai.api.EvalInfo eval_info = 10;
   */
  evalInfo?: EvalInfo;

  constructor(data?: PartialMessage<PostModelVersionMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelVersionMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "max_examples", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "test_search", kind: "message", T: Search },
    { no: 10, name: "eval_info", kind: "message", T: EvalInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelVersionMetricsRequest {
    return new PostModelVersionMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelVersionMetricsRequest {
    return new PostModelVersionMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelVersionMetricsRequest {
    return new PostModelVersionMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelVersionMetricsRequest | PlainMessage<PostModelVersionMetricsRequest> | undefined, b: PostModelVersionMetricsRequest | PlainMessage<PostModelVersionMetricsRequest> | undefined): boolean {
    return proto3.util.equals(PostModelVersionMetricsRequest, a, b);
  }
}

/**
 * Get the already computed evaluation metrics for this model
 * version.
 *
 * @generated from message clarifai.api.GetModelVersionMetricsRequest
 */
export class GetModelVersionMetricsRequest extends Message<GetModelVersionMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * @generated from field: string version_id = 3;
   */
  versionId = "";

  /**
   * Any of the fields you wish to return from multiclass_metrics
   *
   * @generated from field: clarifai.api.FieldsValue fields = 4;
   */
  fields?: FieldsValue;

  constructor(data?: PartialMessage<GetModelVersionMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetModelVersionMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fields", kind: "message", T: FieldsValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelVersionMetricsRequest {
    return new GetModelVersionMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelVersionMetricsRequest {
    return new GetModelVersionMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelVersionMetricsRequest {
    return new GetModelVersionMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelVersionMetricsRequest | PlainMessage<GetModelVersionMetricsRequest> | undefined, b: GetModelVersionMetricsRequest | PlainMessage<GetModelVersionMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetModelVersionMetricsRequest, a, b);
  }
}

/**
 * GetModelTypeRequest
 *
 * @generated from message clarifai.api.GetModelTypeRequest
 */
export class GetModelTypeRequest extends Message<GetModelTypeRequest> {
  /**
   * use and app combo. Not really used for this endpoint at this time so may go away in future.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The specific ModelType.Id you want to retrieve.
   *
   * @generated from field: string model_type_id = 2;
   */
  modelTypeId = "";

  constructor(data?: PartialMessage<GetModelTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetModelTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_type_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelTypeRequest {
    return new GetModelTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelTypeRequest {
    return new GetModelTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelTypeRequest {
    return new GetModelTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelTypeRequest | PlainMessage<GetModelTypeRequest> | undefined, b: GetModelTypeRequest | PlainMessage<GetModelTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetModelTypeRequest, a, b);
  }
}

/**
 * ListModelTypesRequest
 *
 * @generated from message clarifai.api.ListModelTypesRequest
 */
export class ListModelTypesRequest extends Message<ListModelTypesRequest> {
  /**
   * use and app combo. Not really used for this endpoint at this time so may go away in future.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListModelTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListModelTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelTypesRequest {
    return new ListModelTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelTypesRequest {
    return new ListModelTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelTypesRequest {
    return new ListModelTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelTypesRequest | PlainMessage<ListModelTypesRequest> | undefined, b: ListModelTypesRequest | PlainMessage<ListModelTypesRequest> | undefined): boolean {
    return proto3.util.equals(ListModelTypesRequest, a, b);
  }
}

/**
 * ListOpenSourceLicensesRequest
 *
 * @generated from message clarifai.api.ListOpenSourceLicensesRequest
 */
export class ListOpenSourceLicensesRequest extends Message<ListOpenSourceLicensesRequest> {
  constructor(data?: PartialMessage<ListOpenSourceLicensesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListOpenSourceLicensesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOpenSourceLicensesRequest {
    return new ListOpenSourceLicensesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOpenSourceLicensesRequest {
    return new ListOpenSourceLicensesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOpenSourceLicensesRequest {
    return new ListOpenSourceLicensesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOpenSourceLicensesRequest | PlainMessage<ListOpenSourceLicensesRequest> | undefined, b: ListOpenSourceLicensesRequest | PlainMessage<ListOpenSourceLicensesRequest> | undefined): boolean {
    return proto3.util.equals(ListOpenSourceLicensesRequest, a, b);
  }
}

/**
 * ListOpenSourceLicensesResponse
 *
 * @generated from message clarifai.api.ListOpenSourceLicensesResponse
 */
export class ListOpenSourceLicensesResponse extends Message<ListOpenSourceLicensesResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated string licenses = 2;
   */
  licenses: string[] = [];

  constructor(data?: PartialMessage<ListOpenSourceLicensesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListOpenSourceLicensesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "licenses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOpenSourceLicensesResponse {
    return new ListOpenSourceLicensesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOpenSourceLicensesResponse {
    return new ListOpenSourceLicensesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOpenSourceLicensesResponse {
    return new ListOpenSourceLicensesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOpenSourceLicensesResponse | PlainMessage<ListOpenSourceLicensesResponse> | undefined, b: ListOpenSourceLicensesResponse | PlainMessage<ListOpenSourceLicensesResponse> | undefined): boolean {
    return proto3.util.equals(ListOpenSourceLicensesResponse, a, b);
  }
}

/**
 * SingleModelTypeResponse
 *
 * @generated from message clarifai.api.SingleModelTypeResponse
 */
export class SingleModelTypeResponse extends Message<SingleModelTypeResponse> {
  /**
   * Status of the response.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The retrieved ModelType object. .
   *
   * @generated from field: clarifai.api.ModelType model_type = 2;
   */
  modelType?: ModelType;

  constructor(data?: PartialMessage<SingleModelTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleModelTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_type", kind: "message", T: ModelType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleModelTypeResponse {
    return new SingleModelTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleModelTypeResponse {
    return new SingleModelTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleModelTypeResponse {
    return new SingleModelTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleModelTypeResponse | PlainMessage<SingleModelTypeResponse> | undefined, b: SingleModelTypeResponse | PlainMessage<SingleModelTypeResponse> | undefined): boolean {
    return proto3.util.equals(SingleModelTypeResponse, a, b);
  }
}

/**
 * MultiModelTypeResponse
 *
 * @generated from message clarifai.api.MultiModelTypeResponse
 */
export class MultiModelTypeResponse extends Message<MultiModelTypeResponse> {
  /**
   * Status of the response.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of ModelType objects.
   *
   * @generated from field: repeated clarifai.api.ModelType model_types = 2;
   */
  modelTypes: ModelType[] = [];

  /**
   * List of model importers
   *
   * @generated from field: clarifai.api.ModelTypeField model_importers = 3;
   */
  modelImporters?: ModelTypeField;

  constructor(data?: PartialMessage<MultiModelTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_types", kind: "message", T: ModelType, repeated: true },
    { no: 3, name: "model_importers", kind: "message", T: ModelTypeField },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelTypeResponse {
    return new MultiModelTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelTypeResponse {
    return new MultiModelTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelTypeResponse {
    return new MultiModelTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelTypeResponse | PlainMessage<MultiModelTypeResponse> | undefined, b: MultiModelTypeResponse | PlainMessage<MultiModelTypeResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelTypeResponse, a, b);
  }
}

/**
 * GetModelVersionInputExampleRequest
 *
 * @generated from message clarifai.api.GetModelVersionInputExampleRequest
 */
export class GetModelVersionInputExampleRequest extends Message<GetModelVersionInputExampleRequest> {
  /**
   * authorization field  (contains app/user id info)
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * id of model the example belongs to
   *
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * specific version the example belongs to
   *
   * @generated from field: string model_version_id = 3;
   */
  modelVersionId = "";

  /**
   * Id of example to fetch
   *
   * @generated from field: string example_id = 4;
   */
  exampleId = "";

  constructor(data?: PartialMessage<GetModelVersionInputExampleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetModelVersionInputExampleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "example_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelVersionInputExampleRequest {
    return new GetModelVersionInputExampleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelVersionInputExampleRequest {
    return new GetModelVersionInputExampleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelVersionInputExampleRequest {
    return new GetModelVersionInputExampleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelVersionInputExampleRequest | PlainMessage<GetModelVersionInputExampleRequest> | undefined, b: GetModelVersionInputExampleRequest | PlainMessage<GetModelVersionInputExampleRequest> | undefined): boolean {
    return proto3.util.equals(GetModelVersionInputExampleRequest, a, b);
  }
}

/**
 * ListModelVersionInputExamplesRequest
 *
 * @generated from message clarifai.api.ListModelVersionInputExamplesRequest
 */
export class ListModelVersionInputExamplesRequest extends Message<ListModelVersionInputExamplesRequest> {
  /**
   * authorization field  (contains app/user id info)
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * id of model the example belongs to
   *
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * specific version the example belongs to
   *
   * @generated from field: string model_version_id = 3;
   */
  modelVersionId = "";

  /**
   * Optional, defaults to 1.
   *
   * @generated from field: uint32 page = 4;
   */
  page = 0;

  /**
   * Optional, defaults to 128 references per page.
   *
   * @generated from field: uint32 per_page = 5;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListModelVersionInputExamplesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListModelVersionInputExamplesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelVersionInputExamplesRequest {
    return new ListModelVersionInputExamplesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelVersionInputExamplesRequest {
    return new ListModelVersionInputExamplesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelVersionInputExamplesRequest {
    return new ListModelVersionInputExamplesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelVersionInputExamplesRequest | PlainMessage<ListModelVersionInputExamplesRequest> | undefined, b: ListModelVersionInputExamplesRequest | PlainMessage<ListModelVersionInputExamplesRequest> | undefined): boolean {
    return proto3.util.equals(ListModelVersionInputExamplesRequest, a, b);
  }
}

/**
 * PostModelVersionInputExamplesRequest
 *
 * @generated from message clarifai.api.PostModelVersionInputExamplesRequest
 */
export class PostModelVersionInputExamplesRequest extends Message<PostModelVersionInputExamplesRequest> {
  /**
   * authorization field  (contains app/user id info)
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * id of model the example belongs to
   *
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * specific version the example belongs to
   *
   * @generated from field: string model_version_id = 3;
   */
  modelVersionId = "";

  /**
   * examples to add
   *
   * @generated from field: repeated clarifai.api.ModelVersionInputExample model_version_input_examples = 4;
   */
  modelVersionInputExamples: ModelVersionInputExample[] = [];

  constructor(data?: PartialMessage<PostModelVersionInputExamplesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelVersionInputExamplesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_version_input_examples", kind: "message", T: ModelVersionInputExample, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelVersionInputExamplesRequest {
    return new PostModelVersionInputExamplesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelVersionInputExamplesRequest {
    return new PostModelVersionInputExamplesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelVersionInputExamplesRequest {
    return new PostModelVersionInputExamplesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelVersionInputExamplesRequest | PlainMessage<PostModelVersionInputExamplesRequest> | undefined, b: PostModelVersionInputExamplesRequest | PlainMessage<PostModelVersionInputExamplesRequest> | undefined): boolean {
    return proto3.util.equals(PostModelVersionInputExamplesRequest, a, b);
  }
}

/**
 * DeleteModelVersionInputExamplesRequest
 *
 * @generated from message clarifai.api.DeleteModelVersionInputExamplesRequest
 */
export class DeleteModelVersionInputExamplesRequest extends Message<DeleteModelVersionInputExamplesRequest> {
  /**
   * authorization field (contains app/user id info)
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * id of model the example belongs to
   *
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * specific version the example belongs to
   *
   * @generated from field: string model_version_id = 3;
   */
  modelVersionId = "";

  /**
   * examples to delete
   *
   * @generated from field: repeated string example_ids = 4;
   */
  exampleIds: string[] = [];

  constructor(data?: PartialMessage<DeleteModelVersionInputExamplesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModelVersionInputExamplesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "example_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModelVersionInputExamplesRequest {
    return new DeleteModelVersionInputExamplesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModelVersionInputExamplesRequest {
    return new DeleteModelVersionInputExamplesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModelVersionInputExamplesRequest {
    return new DeleteModelVersionInputExamplesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModelVersionInputExamplesRequest | PlainMessage<DeleteModelVersionInputExamplesRequest> | undefined, b: DeleteModelVersionInputExamplesRequest | PlainMessage<DeleteModelVersionInputExamplesRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModelVersionInputExamplesRequest, a, b);
  }
}

/**
 * SingleModelVersionInputExampleResponse
 *
 * @generated from message clarifai.api.SingleModelVersionInputExampleResponse
 */
export class SingleModelVersionInputExampleResponse extends Message<SingleModelVersionInputExampleResponse> {
  /**
   * status of response
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * model input example message
   *
   * @generated from field: clarifai.api.ModelVersionInputExample model_version_input_example = 2;
   */
  modelVersionInputExample?: ModelVersionInputExample;

  constructor(data?: PartialMessage<SingleModelVersionInputExampleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleModelVersionInputExampleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_version_input_example", kind: "message", T: ModelVersionInputExample },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleModelVersionInputExampleResponse {
    return new SingleModelVersionInputExampleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleModelVersionInputExampleResponse {
    return new SingleModelVersionInputExampleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleModelVersionInputExampleResponse {
    return new SingleModelVersionInputExampleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleModelVersionInputExampleResponse | PlainMessage<SingleModelVersionInputExampleResponse> | undefined, b: SingleModelVersionInputExampleResponse | PlainMessage<SingleModelVersionInputExampleResponse> | undefined): boolean {
    return proto3.util.equals(SingleModelVersionInputExampleResponse, a, b);
  }
}

/**
 * MultiModelVersionInputExampleResponse
 *
 * @generated from message clarifai.api.MultiModelVersionInputExampleResponse
 */
export class MultiModelVersionInputExampleResponse extends Message<MultiModelVersionInputExampleResponse> {
  /**
   * status of response
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * model input example messages
   *
   * @generated from field: repeated clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
   */
  modelVersionInputExamples: ModelVersionInputExample[] = [];

  constructor(data?: PartialMessage<MultiModelVersionInputExampleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelVersionInputExampleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_version_input_examples", kind: "message", T: ModelVersionInputExample, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelVersionInputExampleResponse {
    return new MultiModelVersionInputExampleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelVersionInputExampleResponse {
    return new MultiModelVersionInputExampleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelVersionInputExampleResponse {
    return new MultiModelVersionInputExampleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelVersionInputExampleResponse | PlainMessage<MultiModelVersionInputExampleResponse> | undefined, b: MultiModelVersionInputExampleResponse | PlainMessage<MultiModelVersionInputExampleResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelVersionInputExampleResponse, a, b);
  }
}

/**
 * ListModelReferencesRequest
 *
 * @generated from message clarifai.api.ListModelReferencesRequest
 */
export class ListModelReferencesRequest extends Message<ListModelReferencesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * Optional, defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * Optional, defaults to 128 references per page.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListModelReferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListModelReferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelReferencesRequest {
    return new ListModelReferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelReferencesRequest {
    return new ListModelReferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelReferencesRequest {
    return new ListModelReferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelReferencesRequest | PlainMessage<ListModelReferencesRequest> | undefined, b: ListModelReferencesRequest | PlainMessage<ListModelReferencesRequest> | undefined): boolean {
    return proto3.util.equals(ListModelReferencesRequest, a, b);
  }
}

/**
 * PostModelReferencesRequest
 *
 * @generated from message clarifai.api.PostModelReferencesRequest
 */
export class PostModelReferencesRequest extends Message<PostModelReferencesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * examples to add
   *
   * @generated from field: repeated clarifai.api.ModelReference model_references = 3;
   */
  modelReferences: ModelReference[] = [];

  constructor(data?: PartialMessage<PostModelReferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelReferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_references", kind: "message", T: ModelReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelReferencesRequest {
    return new PostModelReferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelReferencesRequest {
    return new PostModelReferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelReferencesRequest {
    return new PostModelReferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelReferencesRequest | PlainMessage<PostModelReferencesRequest> | undefined, b: PostModelReferencesRequest | PlainMessage<PostModelReferencesRequest> | undefined): boolean {
    return proto3.util.equals(PostModelReferencesRequest, a, b);
  }
}

/**
 * DeleteModelReferencesRequest
 *
 * @generated from message clarifai.api.DeleteModelReferencesRequest
 */
export class DeleteModelReferencesRequest extends Message<DeleteModelReferencesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * examples to delete
   *
   * @generated from field: repeated string ids = 3;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteModelReferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModelReferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModelReferencesRequest {
    return new DeleteModelReferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModelReferencesRequest {
    return new DeleteModelReferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModelReferencesRequest {
    return new DeleteModelReferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModelReferencesRequest | PlainMessage<DeleteModelReferencesRequest> | undefined, b: DeleteModelReferencesRequest | PlainMessage<DeleteModelReferencesRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModelReferencesRequest, a, b);
  }
}

/**
 * MultiModelReferenceResponse
 *
 * @generated from message clarifai.api.MultiModelReferenceResponse
 */
export class MultiModelReferenceResponse extends Message<MultiModelReferenceResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.ModelReference model_references = 2;
   */
  modelReferences: ModelReference[] = [];

  constructor(data?: PartialMessage<MultiModelReferenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelReferenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_references", kind: "message", T: ModelReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelReferenceResponse {
    return new MultiModelReferenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelReferenceResponse {
    return new MultiModelReferenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelReferenceResponse {
    return new MultiModelReferenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelReferenceResponse | PlainMessage<MultiModelReferenceResponse> | undefined, b: MultiModelReferenceResponse | PlainMessage<MultiModelReferenceResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelReferenceResponse, a, b);
  }
}

/**
 * MultiOutputResponse
 *
 * @generated from message clarifai.api.MultiOutputResponse
 */
export class MultiOutputResponse extends Message<MultiOutputResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Output outputs = 2;
   */
  outputs: Output[] = [];

  constructor(data?: PartialMessage<MultiOutputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiOutputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "outputs", kind: "message", T: Output, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiOutputResponse {
    return new MultiOutputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiOutputResponse {
    return new MultiOutputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiOutputResponse {
    return new MultiOutputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiOutputResponse | PlainMessage<MultiOutputResponse> | undefined, b: MultiOutputResponse | PlainMessage<MultiOutputResponse> | undefined): boolean {
    return proto3.util.equals(MultiOutputResponse, a, b);
  }
}

/**
 * ListScopesRequest
 *
 * @generated from message clarifai.api.ListScopesRequest
 */
export class ListScopesRequest extends Message<ListScopesRequest> {
  /**
   * If "personal_access_token" include scopes and endpoints available to personal access tokens.
   * If "api_key" include scopes and endpoints available to app-specific keys. (default)
   *
   * @generated from field: string key_type = 1;
   */
  keyType = "";

  /**
   * For all user specific information we include user_app_id to get the user_id in a consistent way
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListScopesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListScopesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListScopesRequest {
    return new ListScopesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListScopesRequest {
    return new ListScopesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListScopesRequest {
    return new ListScopesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListScopesRequest | PlainMessage<ListScopesRequest> | undefined, b: ListScopesRequest | PlainMessage<ListScopesRequest> | undefined): boolean {
    return proto3.util.equals(ListScopesRequest, a, b);
  }
}

/**
 * MyScopesRequest
 *
 * @generated from message clarifai.api.MyScopesRequest
 */
export class MyScopesRequest extends Message<MyScopesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<MyScopesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MyScopesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MyScopesRequest {
    return new MyScopesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MyScopesRequest {
    return new MyScopesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MyScopesRequest {
    return new MyScopesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MyScopesRequest | PlainMessage<MyScopesRequest> | undefined, b: MyScopesRequest | PlainMessage<MyScopesRequest> | undefined): boolean {
    return proto3.util.equals(MyScopesRequest, a, b);
  }
}

/**
 * MyScopesUserRequest
 *
 * @generated from message clarifai.api.MyScopesUserRequest
 */
export class MyScopesUserRequest extends Message<MyScopesUserRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<MyScopesUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MyScopesUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MyScopesUserRequest {
    return new MyScopesUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MyScopesUserRequest {
    return new MyScopesUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MyScopesUserRequest {
    return new MyScopesUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MyScopesUserRequest | PlainMessage<MyScopesUserRequest> | undefined, b: MyScopesUserRequest | PlainMessage<MyScopesUserRequest> | undefined): boolean {
    return proto3.util.equals(MyScopesUserRequest, a, b);
  }
}

/**
 * MyScopesRootRequest
 *
 * @generated from message clarifai.api.MyScopesRootRequest
 */
export class MyScopesRootRequest extends Message<MyScopesRootRequest> {
  constructor(data?: PartialMessage<MyScopesRootRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MyScopesRootRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MyScopesRootRequest {
    return new MyScopesRootRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MyScopesRootRequest {
    return new MyScopesRootRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MyScopesRootRequest {
    return new MyScopesRootRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MyScopesRootRequest | PlainMessage<MyScopesRootRequest> | undefined, b: MyScopesRootRequest | PlainMessage<MyScopesRootRequest> | undefined): boolean {
    return proto3.util.equals(MyScopesRootRequest, a, b);
  }
}

/**
 * MultiScopeDepsResponse
 *
 * @generated from message clarifai.api.MultiScopeDepsResponse
 */
export class MultiScopeDepsResponse extends Message<MultiScopeDepsResponse> {
  /**
   * The status of the request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * scopes is a list of low-level scopes and their dependencies.
   *
   * @generated from field: repeated clarifai.api.ScopeDeps scope_deps = 2;
   */
  scopeDeps: ScopeDeps[] = [];

  /**
   * endpoint_scopes is a listof all the publicly available endponts which can be
   * used as scopes as well. A call to each of those endpoint depends on a subset
   * of the above "scopes"
   *
   * @generated from field: repeated clarifai.api.EndpointDeps endpoint_deps = 3;
   */
  endpointDeps: EndpointDeps[] = [];

  constructor(data?: PartialMessage<MultiScopeDepsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiScopeDepsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "scope_deps", kind: "message", T: ScopeDeps, repeated: true },
    { no: 3, name: "endpoint_deps", kind: "message", T: EndpointDeps, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiScopeDepsResponse {
    return new MultiScopeDepsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiScopeDepsResponse {
    return new MultiScopeDepsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiScopeDepsResponse {
    return new MultiScopeDepsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiScopeDepsResponse | PlainMessage<MultiScopeDepsResponse> | undefined, b: MultiScopeDepsResponse | PlainMessage<MultiScopeDepsResponse> | undefined): boolean {
    return proto3.util.equals(MultiScopeDepsResponse, a, b);
  }
}

/**
 * MultiScopeResponse
 *
 * @generated from message clarifai.api.MultiScopeResponse
 */
export class MultiScopeResponse extends Message<MultiScopeResponse> {
  /**
   * The status of the request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * This is a list of the scopes that your key has.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[] = [];

  /**
   * The app that the key has access to.
   *
   * @generated from field: clarifai.api.App app = 3;
   */
  app?: App;

  /**
   * This is a list of endpoint permissions that your key has.
   *
   * @generated from field: repeated string endpoints = 4;
   */
  endpoints: string[] = [];

  /**
   * @generated from field: string user_feature_flags = 5;
   */
  userFeatureFlags = "";

  constructor(data?: PartialMessage<MultiScopeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiScopeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "app", kind: "message", T: App },
    { no: 4, name: "endpoints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "user_feature_flags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiScopeResponse {
    return new MultiScopeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiScopeResponse {
    return new MultiScopeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiScopeResponse {
    return new MultiScopeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiScopeResponse | PlainMessage<MultiScopeResponse> | undefined, b: MultiScopeResponse | PlainMessage<MultiScopeResponse> | undefined): boolean {
    return proto3.util.equals(MultiScopeResponse, a, b);
  }
}

/**
 * MultiScopeUserResponse
 *
 * @generated from message clarifai.api.MultiScopeUserResponse
 */
export class MultiScopeUserResponse extends Message<MultiScopeUserResponse> {
  /**
   * The status of the request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * This is a list of the scopes that your key has.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[] = [];

  /**
   * This is a list of endpoint permissions that your key has.
   *
   * @generated from field: repeated string endpoints = 4;
   */
  endpoints: string[] = [];

  /**
   * @generated from field: string user_feature_flags = 5;
   */
  userFeatureFlags = "";

  constructor(data?: PartialMessage<MultiScopeUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiScopeUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "endpoints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "user_feature_flags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiScopeUserResponse {
    return new MultiScopeUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiScopeUserResponse {
    return new MultiScopeUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiScopeUserResponse {
    return new MultiScopeUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiScopeUserResponse | PlainMessage<MultiScopeUserResponse> | undefined, b: MultiScopeUserResponse | PlainMessage<MultiScopeUserResponse> | undefined): boolean {
    return proto3.util.equals(MultiScopeUserResponse, a, b);
  }
}

/**
 * MultiScopeRootResponse
 *
 * @generated from message clarifai.api.MultiScopeRootResponse
 */
export class MultiScopeRootResponse extends Message<MultiScopeRootResponse> {
  /**
   * The status of the request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * This is a list of the scopes that your key has.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[] = [];

  /**
   * This is a list of endpoint permissions that your key has.
   *
   * @generated from field: repeated string endpoints = 4;
   */
  endpoints: string[] = [];

  /**
   * @generated from field: string user_feature_flags = 5;
   */
  userFeatureFlags = "";

  constructor(data?: PartialMessage<MultiScopeRootResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiScopeRootResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "endpoints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "user_feature_flags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiScopeRootResponse {
    return new MultiScopeRootResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiScopeRootResponse {
    return new MultiScopeRootResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiScopeRootResponse {
    return new MultiScopeRootResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiScopeRootResponse | PlainMessage<MultiScopeRootResponse> | undefined, b: MultiScopeRootResponse | PlainMessage<MultiScopeRootResponse> | undefined): boolean {
    return proto3.util.equals(MultiScopeRootResponse, a, b);
  }
}

/**
 * GetSearchRequest
 *
 * @generated from message clarifai.api.GetSearchRequest
 */
export class GetSearchRequest extends Message<GetSearchRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSearchRequest {
    return new GetSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSearchRequest {
    return new GetSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSearchRequest {
    return new GetSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSearchRequest | PlainMessage<GetSearchRequest> | undefined, b: GetSearchRequest | PlainMessage<GetSearchRequest> | undefined): boolean {
    return proto3.util.equals(GetSearchRequest, a, b);
  }
}

/**
 * ListSearchesRequest
 *
 * @generated from message clarifai.api.ListSearchesRequest
 */
export class ListSearchesRequest extends Message<ListSearchesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSearchesRequest {
    return new ListSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSearchesRequest {
    return new ListSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSearchesRequest {
    return new ListSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSearchesRequest | PlainMessage<ListSearchesRequest> | undefined, b: ListSearchesRequest | PlainMessage<ListSearchesRequest> | undefined): boolean {
    return proto3.util.equals(ListSearchesRequest, a, b);
  }
}

/**
 * PostSearchesRequest
 *
 * @generated from message clarifai.api.PostSearchesRequest
 */
export class PostSearchesRequest extends Message<PostSearchesRequest> {
  /**
   * The user_id and app_id to query from.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The query; this specifies how the data to be searched
   * this will be replaced by "Searches"
   *
   * @generated from field: clarifai.api.Query query = 2 [deprecated = true];
   * @deprecated
   */
  query?: Query;

  /**
   * The searched to be executed or saved
   * Eventually the request level fields will be deprecated in favor of this object
   *
   * @generated from field: repeated clarifai.api.Search searches = 3;
   */
  searches: Search[] = [];

  /**
   * Pagination information to paginate through search result Hits.
   *
   * @generated from field: clarifai.api.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<PostSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "query", kind: "message", T: Query },
    { no: 3, name: "searches", kind: "message", T: Search, repeated: true },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostSearchesRequest {
    return new PostSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostSearchesRequest {
    return new PostSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostSearchesRequest {
    return new PostSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostSearchesRequest | PlainMessage<PostSearchesRequest> | undefined, b: PostSearchesRequest | PlainMessage<PostSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PostSearchesRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PatchInputsSearchesRequest
 */
export class PatchInputsSearchesRequest extends Message<PatchInputsSearchesRequest> {
  /**
   * The user_id and app_id to query from.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The searches to be patched
   *
   * @generated from field: repeated clarifai.api.Search searches = 2;
   */
  searches: Search[] = [];

  /**
   * The action to perform on the patched Search objects
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchInputsSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchInputsSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "searches", kind: "message", T: Search, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchInputsSearchesRequest {
    return new PatchInputsSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchInputsSearchesRequest {
    return new PatchInputsSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchInputsSearchesRequest {
    return new PatchInputsSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchInputsSearchesRequest | PlainMessage<PatchInputsSearchesRequest> | undefined, b: PatchInputsSearchesRequest | PlainMessage<PatchInputsSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PatchInputsSearchesRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PatchAnnotationsSearchesRequest
 */
export class PatchAnnotationsSearchesRequest extends Message<PatchAnnotationsSearchesRequest> {
  /**
   * The user_id and app_id to query from.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The searches to be patched
   *
   * @generated from field: repeated clarifai.api.Search searches = 2;
   */
  searches: Search[] = [];

  /**
   * The action to perform on the patched Search objects
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchAnnotationsSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAnnotationsSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "searches", kind: "message", T: Search, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAnnotationsSearchesRequest {
    return new PatchAnnotationsSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAnnotationsSearchesRequest {
    return new PatchAnnotationsSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAnnotationsSearchesRequest {
    return new PatchAnnotationsSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAnnotationsSearchesRequest | PlainMessage<PatchAnnotationsSearchesRequest> | undefined, b: PatchAnnotationsSearchesRequest | PlainMessage<PatchAnnotationsSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PatchAnnotationsSearchesRequest, a, b);
  }
}

/**
 * PatchSearchesRequest
 *
 * @generated from message clarifai.api.PatchSearchesRequest
 */
export class PatchSearchesRequest extends Message<PatchSearchesRequest> {
  /**
   * The user_id and app_id to query from.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The searches to be patched
   *
   * @generated from field: repeated clarifai.api.Search searches = 2;
   */
  searches: Search[] = [];

  /**
   * The action to perform on the patched Search objects
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "searches", kind: "message", T: Search, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchSearchesRequest {
    return new PatchSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchSearchesRequest {
    return new PatchSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchSearchesRequest {
    return new PatchSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchSearchesRequest | PlainMessage<PatchSearchesRequest> | undefined, b: PatchSearchesRequest | PlainMessage<PatchSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PatchSearchesRequest, a, b);
  }
}

/**
 * PostSearchesByIDRequest performs returns results of a saved search given its ID
 *
 * @generated from message clarifai.api.PostSearchesByIDRequest
 */
export class PostSearchesByIDRequest extends Message<PostSearchesByIDRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * ID for saves search to be executed
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * Pagination information to paginate through search result Hits.
   *
   * @generated from field: clarifai.api.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<PostSearchesByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostSearchesByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostSearchesByIDRequest {
    return new PostSearchesByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostSearchesByIDRequest {
    return new PostSearchesByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostSearchesByIDRequest {
    return new PostSearchesByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostSearchesByIDRequest | PlainMessage<PostSearchesByIDRequest> | undefined, b: PostSearchesByIDRequest | PlainMessage<PostSearchesByIDRequest> | undefined): boolean {
    return proto3.util.equals(PostSearchesByIDRequest, a, b);
  }
}

/**
 * DeleteSearchRequest
 *
 * @generated from message clarifai.api.DeleteSearchRequest
 */
export class DeleteSearchRequest extends Message<DeleteSearchRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSearchRequest {
    return new DeleteSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSearchRequest {
    return new DeleteSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSearchRequest {
    return new DeleteSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSearchRequest | PlainMessage<DeleteSearchRequest> | undefined, b: DeleteSearchRequest | PlainMessage<DeleteSearchRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSearchRequest, a, b);
  }
}

/**
 * PostAttributeSearchRequest
 *
 * @generated from message clarifai.api.PostAttributeSearchRequest
 */
export class PostAttributeSearchRequest extends Message<PostAttributeSearchRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: clarifai.api.Pagination pagination = 3;
   */
  pagination?: Pagination;

  /**
   * Perform a brute force search visual search
   *
   * @generated from field: bool brute_force = 4;
   */
  bruteForce = false;

  /**
   * @generated from field: clarifai.api.AttributeQuery attribute_query = 5;
   */
  attributeQuery?: AttributeQuery;

  /**
   * Minimum value of confidence threshold score in result.
   * Defaults to 0.0 which means we won't do any thresholding as all probabilities will
   * likely be > 0.0.
   *
   * @generated from field: float min_value = 6;
   */
  minValue = 0;

  constructor(data?: PartialMessage<PostAttributeSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAttributeSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
    { no: 4, name: "brute_force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "attribute_query", kind: "message", T: AttributeQuery },
    { no: 6, name: "min_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAttributeSearchRequest {
    return new PostAttributeSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAttributeSearchRequest {
    return new PostAttributeSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAttributeSearchRequest {
    return new PostAttributeSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAttributeSearchRequest | PlainMessage<PostAttributeSearchRequest> | undefined, b: PostAttributeSearchRequest | PlainMessage<PostAttributeSearchRequest> | undefined): boolean {
    return proto3.util.equals(PostAttributeSearchRequest, a, b);
  }
}

/**
 * Execute a new annotation search and optionally save it
 * annotation search over annotations using rank and filter proto
 *
 * @generated from message clarifai.api.PostAnnotationsSearchesRequest
 */
export class PostAnnotationsSearchesRequest extends Message<PostAnnotationsSearchesRequest> {
  /**
   * The user_id and app_id to query from.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The searched to be executed or saved
   *
   * @generated from field: repeated clarifai.api.Search searches = 2;
   */
  searches: Search[] = [];

  /**
   * Pagination information to paginate through search result Hits.
   *
   * @generated from field: clarifai.api.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<PostAnnotationsSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAnnotationsSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "searches", kind: "message", T: Search, repeated: true },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAnnotationsSearchesRequest {
    return new PostAnnotationsSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAnnotationsSearchesRequest {
    return new PostAnnotationsSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAnnotationsSearchesRequest {
    return new PostAnnotationsSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAnnotationsSearchesRequest | PlainMessage<PostAnnotationsSearchesRequest> | undefined, b: PostAnnotationsSearchesRequest | PlainMessage<PostAnnotationsSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PostAnnotationsSearchesRequest, a, b);
  }
}

/**
 * DeleteAnnotationSearchMetricsRequest
 *
 * @generated from message clarifai.api.DeleteAnnotationSearchMetricsRequest
 */
export class DeleteAnnotationSearchMetricsRequest extends Message<DeleteAnnotationSearchMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteAnnotationSearchMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteAnnotationSearchMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAnnotationSearchMetricsRequest {
    return new DeleteAnnotationSearchMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAnnotationSearchMetricsRequest {
    return new DeleteAnnotationSearchMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAnnotationSearchMetricsRequest {
    return new DeleteAnnotationSearchMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAnnotationSearchMetricsRequest | PlainMessage<DeleteAnnotationSearchMetricsRequest> | undefined, b: DeleteAnnotationSearchMetricsRequest | PlainMessage<DeleteAnnotationSearchMetricsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAnnotationSearchMetricsRequest, a, b);
  }
}

/**
 * Execute a new input search and optionally save it
 *
 * @generated from message clarifai.api.PostInputsSearchesRequest
 */
export class PostInputsSearchesRequest extends Message<PostInputsSearchesRequest> {
  /**
   * The user_id and app_id to query from.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The searched to be executed or saved
   *
   * @generated from field: repeated clarifai.api.Search searches = 2;
   */
  searches: Search[] = [];

  /**
   * Pagination information to paginate through search result Hits.
   *
   * @generated from field: clarifai.api.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<PostInputsSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInputsSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "searches", kind: "message", T: Search, repeated: true },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInputsSearchesRequest {
    return new PostInputsSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInputsSearchesRequest {
    return new PostInputsSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInputsSearchesRequest {
    return new PostInputsSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostInputsSearchesRequest | PlainMessage<PostInputsSearchesRequest> | undefined, b: PostInputsSearchesRequest | PlainMessage<PostInputsSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PostInputsSearchesRequest, a, b);
  }
}

/**
 * SingleSearchResponse returns saved search in response to GetSearchRequest
 *
 * @generated from message clarifai.api.SingleSearchResponse
 */
export class SingleSearchResponse extends Message<SingleSearchResponse> {
  /**
   * Status of whether the search was successful.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Search search = 5;
   */
  search?: Search;

  constructor(data?: PartialMessage<SingleSearchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleSearchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 5, name: "search", kind: "message", T: Search },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleSearchResponse {
    return new SingleSearchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleSearchResponse {
    return new SingleSearchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleSearchResponse {
    return new SingleSearchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleSearchResponse | PlainMessage<SingleSearchResponse> | undefined, b: SingleSearchResponse | PlainMessage<SingleSearchResponse> | undefined): boolean {
    return proto3.util.equals(SingleSearchResponse, a, b);
  }
}

/**
 * MultiSearchResponse
 *
 * @generated from message clarifai.api.MultiSearchResponse
 */
export class MultiSearchResponse extends Message<MultiSearchResponse> {
  /**
   * Status of whether the search was successful.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * A unique id which uniquely identifies a search
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * The list of search result Hits.
   *
   * @generated from field: repeated clarifai.api.Hit hits = 3;
   */
  hits: Hit[] = [];

  /**
   * The original query provided in the request.
   *
   * @generated from field: clarifai.api.Query query = 4;
   */
  query?: Query;

  /**
   * The original Searches provided in the request.
   *
   * @generated from field: repeated clarifai.api.Search searches = 5;
   */
  searches: Search[] = [];

  constructor(data?: PartialMessage<MultiSearchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiSearchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hits", kind: "message", T: Hit, repeated: true },
    { no: 4, name: "query", kind: "message", T: Query },
    { no: 5, name: "searches", kind: "message", T: Search, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiSearchResponse {
    return new MultiSearchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiSearchResponse {
    return new MultiSearchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiSearchResponse {
    return new MultiSearchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiSearchResponse | PlainMessage<MultiSearchResponse> | undefined, b: MultiSearchResponse | PlainMessage<MultiSearchResponse> | undefined): boolean {
    return proto3.util.equals(MultiSearchResponse, a, b);
  }
}

/**
 * PostAnnotationSearchMetricsRequest
 *
 * @generated from message clarifai.api.PostAnnotationSearchMetricsRequest
 */
export class PostAnnotationSearchMetricsRequest extends Message<PostAnnotationSearchMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * A unique customer facing id to identify this eval request
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * The ground truth we are evaluating against
   *
   * @generated from field: clarifai.api.Search ground_truth = 3;
   */
  groundTruth?: Search;

  /**
   * The set we are evaluating
   *
   * @generated from field: clarifai.api.Search search_to_eval = 4;
   */
  searchToEval?: Search;

  /**
   * List of concepts to evaluate are expected to be in data.concepts
   * If nil, then all app concepts are used
   *
   * @generated from field: clarifai.api.Data data = 5;
   */
  data?: Data;

  /**
   * The type of evaluation to use
   *
   * @generated from field: clarifai.api.EvaluationType evaluation_type = 6;
   */
  evaluationType = EvaluationType.Classification;

  constructor(data?: PartialMessage<PostAnnotationSearchMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAnnotationSearchMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ground_truth", kind: "message", T: Search },
    { no: 4, name: "search_to_eval", kind: "message", T: Search },
    { no: 5, name: "data", kind: "message", T: Data },
    { no: 6, name: "evaluation_type", kind: "enum", T: proto3.getEnumType(EvaluationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAnnotationSearchMetricsRequest {
    return new PostAnnotationSearchMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAnnotationSearchMetricsRequest {
    return new PostAnnotationSearchMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAnnotationSearchMetricsRequest {
    return new PostAnnotationSearchMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAnnotationSearchMetricsRequest | PlainMessage<PostAnnotationSearchMetricsRequest> | undefined, b: PostAnnotationSearchMetricsRequest | PlainMessage<PostAnnotationSearchMetricsRequest> | undefined): boolean {
    return proto3.util.equals(PostAnnotationSearchMetricsRequest, a, b);
  }
}

/**
 * GetAnnotationSearchMetricsRequest
 *
 * @generated from message clarifai.api.GetAnnotationSearchMetricsRequest
 */
export class GetAnnotationSearchMetricsRequest extends Message<GetAnnotationSearchMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Unique custom facing id that identifies the eval to get
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetAnnotationSearchMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetAnnotationSearchMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnnotationSearchMetricsRequest {
    return new GetAnnotationSearchMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnnotationSearchMetricsRequest {
    return new GetAnnotationSearchMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnnotationSearchMetricsRequest {
    return new GetAnnotationSearchMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnnotationSearchMetricsRequest | PlainMessage<GetAnnotationSearchMetricsRequest> | undefined, b: GetAnnotationSearchMetricsRequest | PlainMessage<GetAnnotationSearchMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetAnnotationSearchMetricsRequest, a, b);
  }
}

/**
 * ListAnnotationSearchMetricsRequest
 *
 * @generated from message clarifai.api.ListAnnotationSearchMetricsRequest
 */
export class ListAnnotationSearchMetricsRequest extends Message<ListAnnotationSearchMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListAnnotationSearchMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAnnotationSearchMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAnnotationSearchMetricsRequest {
    return new ListAnnotationSearchMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAnnotationSearchMetricsRequest {
    return new ListAnnotationSearchMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAnnotationSearchMetricsRequest {
    return new ListAnnotationSearchMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAnnotationSearchMetricsRequest | PlainMessage<ListAnnotationSearchMetricsRequest> | undefined, b: ListAnnotationSearchMetricsRequest | PlainMessage<ListAnnotationSearchMetricsRequest> | undefined): boolean {
    return proto3.util.equals(ListAnnotationSearchMetricsRequest, a, b);
  }
}

/**
 * MultiAnnotationSearchMetricsResponse
 *
 * @generated from message clarifai.api.MultiAnnotationSearchMetricsResponse
 */
export class MultiAnnotationSearchMetricsResponse extends Message<MultiAnnotationSearchMetricsResponse> {
  /**
   * Status of the request
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
   */
  annotationSearchMetrics: AnnotationSearchMetrics[] = [];

  constructor(data?: PartialMessage<MultiAnnotationSearchMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiAnnotationSearchMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "annotation_search_metrics", kind: "message", T: AnnotationSearchMetrics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiAnnotationSearchMetricsResponse {
    return new MultiAnnotationSearchMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiAnnotationSearchMetricsResponse {
    return new MultiAnnotationSearchMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiAnnotationSearchMetricsResponse {
    return new MultiAnnotationSearchMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiAnnotationSearchMetricsResponse | PlainMessage<MultiAnnotationSearchMetricsResponse> | undefined, b: MultiAnnotationSearchMetricsResponse | PlainMessage<MultiAnnotationSearchMetricsResponse> | undefined): boolean {
    return proto3.util.equals(MultiAnnotationSearchMetricsResponse, a, b);
  }
}

/**
 * ListAnnotationFiltersRequest
 *
 * @generated from message clarifai.api.ListAnnotationFiltersRequest
 */
export class ListAnnotationFiltersRequest extends Message<ListAnnotationFiltersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListAnnotationFiltersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAnnotationFiltersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAnnotationFiltersRequest {
    return new ListAnnotationFiltersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAnnotationFiltersRequest {
    return new ListAnnotationFiltersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAnnotationFiltersRequest {
    return new ListAnnotationFiltersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAnnotationFiltersRequest | PlainMessage<ListAnnotationFiltersRequest> | undefined, b: ListAnnotationFiltersRequest | PlainMessage<ListAnnotationFiltersRequest> | undefined): boolean {
    return proto3.util.equals(ListAnnotationFiltersRequest, a, b);
  }
}

/**
 * GetAnnotationFilterRequest
 *
 * @generated from message clarifai.api.GetAnnotationFilterRequest
 */
export class GetAnnotationFilterRequest extends Message<GetAnnotationFilterRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify annotation filter by id.
   *
   * @generated from field: string annotation_filter_id = 2;
   */
  annotationFilterId = "";

  constructor(data?: PartialMessage<GetAnnotationFilterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetAnnotationFilterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "annotation_filter_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnnotationFilterRequest {
    return new GetAnnotationFilterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnnotationFilterRequest {
    return new GetAnnotationFilterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnnotationFilterRequest {
    return new GetAnnotationFilterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnnotationFilterRequest | PlainMessage<GetAnnotationFilterRequest> | undefined, b: GetAnnotationFilterRequest | PlainMessage<GetAnnotationFilterRequest> | undefined): boolean {
    return proto3.util.equals(GetAnnotationFilterRequest, a, b);
  }
}

/**
 * Request to add one or more annotation filters.
 *
 * @generated from message clarifai.api.PostAnnotationFiltersRequest
 */
export class PostAnnotationFiltersRequest extends Message<PostAnnotationFiltersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of annotation filters that are requested to be added.
   *
   * @generated from field: repeated clarifai.api.AnnotationFilter annotation_filters = 2;
   */
  annotationFilters: AnnotationFilter[] = [];

  constructor(data?: PartialMessage<PostAnnotationFiltersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAnnotationFiltersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "annotation_filters", kind: "message", T: AnnotationFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAnnotationFiltersRequest {
    return new PostAnnotationFiltersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAnnotationFiltersRequest {
    return new PostAnnotationFiltersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAnnotationFiltersRequest {
    return new PostAnnotationFiltersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAnnotationFiltersRequest | PlainMessage<PostAnnotationFiltersRequest> | undefined, b: PostAnnotationFiltersRequest | PlainMessage<PostAnnotationFiltersRequest> | undefined): boolean {
    return proto3.util.equals(PostAnnotationFiltersRequest, a, b);
  }
}

/**
 * Request to patch several annotation filters.
 *
 * @generated from message clarifai.api.PatchAnnotationFiltersRequest
 */
export class PatchAnnotationFiltersRequest extends Message<PatchAnnotationFiltersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of annotation filters that are requested to be updated.
   *
   * @generated from field: repeated clarifai.api.AnnotationFilter annotation_filters = 2;
   */
  annotationFilters: AnnotationFilter[] = [];

  /**
   * The action to perform on the patched objects
   * For now, only 'overwrite' action is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchAnnotationFiltersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAnnotationFiltersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "annotation_filters", kind: "message", T: AnnotationFilter, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAnnotationFiltersRequest {
    return new PatchAnnotationFiltersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAnnotationFiltersRequest {
    return new PatchAnnotationFiltersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAnnotationFiltersRequest {
    return new PatchAnnotationFiltersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAnnotationFiltersRequest | PlainMessage<PatchAnnotationFiltersRequest> | undefined, b: PatchAnnotationFiltersRequest | PlainMessage<PatchAnnotationFiltersRequest> | undefined): boolean {
    return proto3.util.equals(PatchAnnotationFiltersRequest, a, b);
  }
}

/**
 * Request to delete several annotation filters by list of ids.
 *
 * @generated from message clarifai.api.DeleteAnnotationFiltersRequest
 */
export class DeleteAnnotationFiltersRequest extends Message<DeleteAnnotationFiltersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Specify which filters to delete.
   *
   * @generated from field: repeated string annotation_filter_ids = 2;
   */
  annotationFilterIds: string[] = [];

  constructor(data?: PartialMessage<DeleteAnnotationFiltersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteAnnotationFiltersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "annotation_filter_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAnnotationFiltersRequest {
    return new DeleteAnnotationFiltersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAnnotationFiltersRequest {
    return new DeleteAnnotationFiltersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAnnotationFiltersRequest {
    return new DeleteAnnotationFiltersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAnnotationFiltersRequest | PlainMessage<DeleteAnnotationFiltersRequest> | undefined, b: DeleteAnnotationFiltersRequest | PlainMessage<DeleteAnnotationFiltersRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAnnotationFiltersRequest, a, b);
  }
}

/**
 * MultiAnnotationFilterResponse
 *
 * @generated from message clarifai.api.MultiAnnotationFilterResponse
 */
export class MultiAnnotationFilterResponse extends Message<MultiAnnotationFilterResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.AnnotationFilter annotation_filters = 2;
   */
  annotationFilters: AnnotationFilter[] = [];

  constructor(data?: PartialMessage<MultiAnnotationFilterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiAnnotationFilterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "annotation_filters", kind: "message", T: AnnotationFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiAnnotationFilterResponse {
    return new MultiAnnotationFilterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiAnnotationFilterResponse {
    return new MultiAnnotationFilterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiAnnotationFilterResponse {
    return new MultiAnnotationFilterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiAnnotationFilterResponse | PlainMessage<MultiAnnotationFilterResponse> | undefined, b: MultiAnnotationFilterResponse | PlainMessage<MultiAnnotationFilterResponse> | undefined): boolean {
    return proto3.util.equals(MultiAnnotationFilterResponse, a, b);
  }
}

/**
 * SingleAnnotationFilterResponse
 *
 * @generated from message clarifai.api.SingleAnnotationFilterResponse
 */
export class SingleAnnotationFilterResponse extends Message<SingleAnnotationFilterResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.AnnotationFilter annotation_filter = 2;
   */
  annotationFilter?: AnnotationFilter;

  constructor(data?: PartialMessage<SingleAnnotationFilterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleAnnotationFilterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "annotation_filter", kind: "message", T: AnnotationFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleAnnotationFilterResponse {
    return new SingleAnnotationFilterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleAnnotationFilterResponse {
    return new SingleAnnotationFilterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleAnnotationFilterResponse {
    return new SingleAnnotationFilterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleAnnotationFilterResponse | PlainMessage<SingleAnnotationFilterResponse> | undefined, b: SingleAnnotationFilterResponse | PlainMessage<SingleAnnotationFilterResponse> | undefined): boolean {
    return proto3.util.equals(SingleAnnotationFilterResponse, a, b);
  }
}

/**
 * ListClustersRequest returns a page of clusters sorted but their count in the app along with some
 * statistics on usage of each cluster.
 * Note each annotation is assigned to a cluster by a cluster model.
 * It also retruns the most recent annotation for each cluster a representative for that cluster.
 *
 * @generated from message clarifai.api.ListClustersRequest
 */
export class ListClustersRequest extends Message<ListClustersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * restrict listing to these cluster ids
   *
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  /**
   * number of annotations per cluster returned
   *
   * @generated from field: uint32 annotations_per_cluster = 5;
   */
  annotationsPerCluster = 0;

  constructor(data?: PartialMessage<ListClustersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListClustersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "annotations_per_cluster", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListClustersRequest | PlainMessage<ListClustersRequest> | undefined, b: ListClustersRequest | PlainMessage<ListClustersRequest> | undefined): boolean {
    return proto3.util.equals(ListClustersRequest, a, b);
  }
}

/**
 * ListAnnotationsForClusterRequest returns a page of annotations sorted by created_at timestamp for a cluster
 *
 * @generated from message clarifai.api.ListAnnotationsForClusterRequest
 */
export class ListAnnotationsForClusterRequest extends Message<ListAnnotationsForClusterRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Cluster ID to get annotations for
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListAnnotationsForClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAnnotationsForClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAnnotationsForClusterRequest {
    return new ListAnnotationsForClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAnnotationsForClusterRequest {
    return new ListAnnotationsForClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAnnotationsForClusterRequest {
    return new ListAnnotationsForClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAnnotationsForClusterRequest | PlainMessage<ListAnnotationsForClusterRequest> | undefined, b: ListAnnotationsForClusterRequest | PlainMessage<ListAnnotationsForClusterRequest> | undefined): boolean {
    return proto3.util.equals(ListAnnotationsForClusterRequest, a, b);
  }
}

/**
 * PostClustersSearchesRequest
 *
 * @generated from message clarifai.api.PostClustersSearchesRequest
 */
export class PostClustersSearchesRequest extends Message<PostClustersSearchesRequest> {
  /**
   * The user_id and app_id to query from.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Search searches = 2;
   */
  searches: Search[] = [];

  /**
   * Pagination information to paginate through search result Hits.
   *
   * @generated from field: clarifai.api.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<PostClustersSearchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostClustersSearchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "searches", kind: "message", T: Search, repeated: true },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostClustersSearchesRequest {
    return new PostClustersSearchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostClustersSearchesRequest {
    return new PostClustersSearchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostClustersSearchesRequest {
    return new PostClustersSearchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostClustersSearchesRequest | PlainMessage<PostClustersSearchesRequest> | undefined, b: PostClustersSearchesRequest | PlainMessage<PostClustersSearchesRequest> | undefined): boolean {
    return proto3.util.equals(PostClustersSearchesRequest, a, b);
  }
}

/**
 * MultiClusterResponse
 *
 * @generated from message clarifai.api.MultiClusterResponse
 */
export class MultiClusterResponse extends Message<MultiClusterResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Cluster statistics and represetatives
   *
   * @generated from field: repeated clarifai.api.Cluster clusters = 2;
   */
  clusters: Cluster[] = [];

  /**
   * The original Search provided in the request (if any).
   *
   * @generated from field: repeated clarifai.api.Search searches = 3;
   */
  searches: Search[] = [];

  constructor(data?: PartialMessage<MultiClusterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiClusterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "clusters", kind: "message", T: Cluster, repeated: true },
    { no: 3, name: "searches", kind: "message", T: Search, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiClusterResponse {
    return new MultiClusterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiClusterResponse {
    return new MultiClusterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiClusterResponse {
    return new MultiClusterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiClusterResponse | PlainMessage<MultiClusterResponse> | undefined, b: MultiClusterResponse | PlainMessage<MultiClusterResponse> | undefined): boolean {
    return proto3.util.equals(MultiClusterResponse, a, b);
  }
}

/**
 * Gets a the current subscription based on your session token.
 *
 * @generated from message clarifai.api.GetSubscriptionRequest
 */
export class GetSubscriptionRequest extends Message<GetSubscriptionRequest> {
  /**
   * Contains the user_id. Has to match the caller.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<GetSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubscriptionRequest {
    return new GetSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubscriptionRequest {
    return new GetSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubscriptionRequest {
    return new GetSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubscriptionRequest | PlainMessage<GetSubscriptionRequest> | undefined, b: GetSubscriptionRequest | PlainMessage<GetSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(GetSubscriptionRequest, a, b);
  }
}

/**
 * PostSubscriptionRequest
 *
 * @generated from message clarifai.api.PostSubscriptionRequest
 */
export class PostSubscriptionRequest extends Message<PostSubscriptionRequest> {
  /**
   * @generated from field: string signup_code = 1;
   */
  signupCode = "";

  /**
   * @generated from field: clarifai.api.Plan plan = 2;
   */
  plan?: Plan;

  /**
   * Contains the user_id. Has to match the caller.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signup_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plan", kind: "message", T: Plan },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostSubscriptionRequest {
    return new PostSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostSubscriptionRequest {
    return new PostSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostSubscriptionRequest {
    return new PostSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostSubscriptionRequest | PlainMessage<PostSubscriptionRequest> | undefined, b: PostSubscriptionRequest | PlainMessage<PostSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(PostSubscriptionRequest, a, b);
  }
}

/**
 * SingleSubscriptionResponse
 *
 * @generated from message clarifai.api.SingleSubscriptionResponse
 */
export class SingleSubscriptionResponse extends Message<SingleSubscriptionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Plan plan = 2;
   */
  plan?: Plan;

  /**
   * @generated from field: string signup_code = 3;
   */
  signupCode = "";

  constructor(data?: PartialMessage<SingleSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "plan", kind: "message", T: Plan },
    { no: 3, name: "signup_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleSubscriptionResponse {
    return new SingleSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleSubscriptionResponse {
    return new SingleSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleSubscriptionResponse {
    return new SingleSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleSubscriptionResponse | PlainMessage<SingleSubscriptionResponse> | undefined, b: SingleSubscriptionResponse | PlainMessage<SingleSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(SingleSubscriptionResponse, a, b);
  }
}

/**
 * ListCreditCardsRequest
 *
 * @generated from message clarifai.api.ListCreditCardsRequest
 */
export class ListCreditCardsRequest extends Message<ListCreditCardsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListCreditCardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListCreditCardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCreditCardsRequest {
    return new ListCreditCardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCreditCardsRequest {
    return new ListCreditCardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCreditCardsRequest {
    return new ListCreditCardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCreditCardsRequest | PlainMessage<ListCreditCardsRequest> | undefined, b: ListCreditCardsRequest | PlainMessage<ListCreditCardsRequest> | undefined): boolean {
    return proto3.util.equals(ListCreditCardsRequest, a, b);
  }
}

/**
 * MultipleCreditCardResponse
 *
 * @generated from message clarifai.api.MultipleCreditCardResponse
 */
export class MultipleCreditCardResponse extends Message<MultipleCreditCardResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.CreditCard cards = 2;
   */
  cards: CreditCard[] = [];

  constructor(data?: PartialMessage<MultipleCreditCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultipleCreditCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "cards", kind: "message", T: CreditCard, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultipleCreditCardResponse {
    return new MultipleCreditCardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultipleCreditCardResponse {
    return new MultipleCreditCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultipleCreditCardResponse {
    return new MultipleCreditCardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultipleCreditCardResponse | PlainMessage<MultipleCreditCardResponse> | undefined, b: MultipleCreditCardResponse | PlainMessage<MultipleCreditCardResponse> | undefined): boolean {
    return proto3.util.equals(MultipleCreditCardResponse, a, b);
  }
}

/**
 * PostCreditCardRequest
 *
 * @generated from message clarifai.api.PostCreditCardRequest
 */
export class PostCreditCardRequest extends Message<PostCreditCardRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string source = 2;
   */
  source = "";

  /**
   * @generated from field: clarifai.api.CreditCard card = 3;
   */
  card?: CreditCard;

  constructor(data?: PartialMessage<PostCreditCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostCreditCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "card", kind: "message", T: CreditCard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostCreditCardRequest {
    return new PostCreditCardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostCreditCardRequest {
    return new PostCreditCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostCreditCardRequest {
    return new PostCreditCardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostCreditCardRequest | PlainMessage<PostCreditCardRequest> | undefined, b: PostCreditCardRequest | PlainMessage<PostCreditCardRequest> | undefined): boolean {
    return proto3.util.equals(PostCreditCardRequest, a, b);
  }
}

/**
 * SingleCreditCardResponse
 *
 * @generated from message clarifai.api.SingleCreditCardResponse
 */
export class SingleCreditCardResponse extends Message<SingleCreditCardResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.CreditCard card = 2;
   */
  card?: CreditCard;

  constructor(data?: PartialMessage<SingleCreditCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleCreditCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "card", kind: "message", T: CreditCard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleCreditCardResponse {
    return new SingleCreditCardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleCreditCardResponse {
    return new SingleCreditCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleCreditCardResponse {
    return new SingleCreditCardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleCreditCardResponse | PlainMessage<SingleCreditCardResponse> | undefined, b: SingleCreditCardResponse | PlainMessage<SingleCreditCardResponse> | undefined): boolean {
    return proto3.util.equals(SingleCreditCardResponse, a, b);
  }
}

/**
 * DeleteCreditCardRequest
 *
 * @generated from message clarifai.api.DeleteCreditCardRequest
 */
export class DeleteCreditCardRequest extends Message<DeleteCreditCardRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: clarifai.api.CreditCard card = 2;
   */
  card?: CreditCard;

  constructor(data?: PartialMessage<DeleteCreditCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteCreditCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "card", kind: "message", T: CreditCard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCreditCardRequest {
    return new DeleteCreditCardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCreditCardRequest {
    return new DeleteCreditCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCreditCardRequest {
    return new DeleteCreditCardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCreditCardRequest | PlainMessage<DeleteCreditCardRequest> | undefined, b: DeleteCreditCardRequest | PlainMessage<DeleteCreditCardRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCreditCardRequest, a, b);
  }
}

/**
 * PatchCreditCardsRequest
 *
 * @generated from message clarifai.api.PatchCreditCardsRequest
 */
export class PatchCreditCardsRequest extends Message<PatchCreditCardsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.CreditCard cards = 2;
   */
  cards: CreditCard[] = [];

  /**
   * @generated from field: clarifai.api.PatchAction action = 3;
   */
  action?: PatchAction;

  constructor(data?: PartialMessage<PatchCreditCardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchCreditCardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "cards", kind: "message", T: CreditCard, repeated: true },
    { no: 3, name: "action", kind: "message", T: PatchAction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchCreditCardsRequest {
    return new PatchCreditCardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchCreditCardsRequest {
    return new PatchCreditCardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchCreditCardsRequest {
    return new PatchCreditCardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchCreditCardsRequest | PlainMessage<PatchCreditCardsRequest> | undefined, b: PatchCreditCardsRequest | PlainMessage<PatchCreditCardsRequest> | undefined): boolean {
    return proto3.util.equals(PatchCreditCardsRequest, a, b);
  }
}

/**
 * GetShippingAddressRequest
 *
 * @generated from message clarifai.api.GetShippingAddressRequest
 */
export class GetShippingAddressRequest extends Message<GetShippingAddressRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<GetShippingAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetShippingAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetShippingAddressRequest {
    return new GetShippingAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetShippingAddressRequest {
    return new GetShippingAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetShippingAddressRequest {
    return new GetShippingAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetShippingAddressRequest | PlainMessage<GetShippingAddressRequest> | undefined, b: GetShippingAddressRequest | PlainMessage<GetShippingAddressRequest> | undefined): boolean {
    return proto3.util.equals(GetShippingAddressRequest, a, b);
  }
}

/**
 * PutShippingAddressRequest
 *
 * @generated from message clarifai.api.PutShippingAddressRequest
 */
export class PutShippingAddressRequest extends Message<PutShippingAddressRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: clarifai.api.ShippingAddress shipping_address = 2;
   */
  shippingAddress?: ShippingAddress;

  /**
   * @generated from field: clarifai.api.PatchAction action = 3;
   */
  action?: PatchAction;

  constructor(data?: PartialMessage<PutShippingAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PutShippingAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "shipping_address", kind: "message", T: ShippingAddress },
    { no: 3, name: "action", kind: "message", T: PatchAction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutShippingAddressRequest {
    return new PutShippingAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutShippingAddressRequest {
    return new PutShippingAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutShippingAddressRequest {
    return new PutShippingAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutShippingAddressRequest | PlainMessage<PutShippingAddressRequest> | undefined, b: PutShippingAddressRequest | PlainMessage<PutShippingAddressRequest> | undefined): boolean {
    return proto3.util.equals(PutShippingAddressRequest, a, b);
  }
}

/**
 * SingleShippingAddressResponse
 *
 * @generated from message clarifai.api.SingleShippingAddressResponse
 */
export class SingleShippingAddressResponse extends Message<SingleShippingAddressResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.ShippingAddress shipping_address = 2;
   */
  shippingAddress?: ShippingAddress;

  constructor(data?: PartialMessage<SingleShippingAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleShippingAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "shipping_address", kind: "message", T: ShippingAddress },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleShippingAddressResponse {
    return new SingleShippingAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleShippingAddressResponse {
    return new SingleShippingAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleShippingAddressResponse {
    return new SingleShippingAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleShippingAddressResponse | PlainMessage<SingleShippingAddressResponse> | undefined, b: SingleShippingAddressResponse | PlainMessage<SingleShippingAddressResponse> | undefined): boolean {
    return proto3.util.equals(SingleShippingAddressResponse, a, b);
  }
}

/**
 * ListPlansRequest
 *
 * @generated from message clarifai.api.ListPlansRequest
 */
export class ListPlansRequest extends Message<ListPlansRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListPlansRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListPlansRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPlansRequest {
    return new ListPlansRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPlansRequest {
    return new ListPlansRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPlansRequest {
    return new ListPlansRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPlansRequest | PlainMessage<ListPlansRequest> | undefined, b: ListPlansRequest | PlainMessage<ListPlansRequest> | undefined): boolean {
    return proto3.util.equals(ListPlansRequest, a, b);
  }
}

/**
 * MultiPlanResponse
 *
 * @generated from message clarifai.api.MultiPlanResponse
 */
export class MultiPlanResponse extends Message<MultiPlanResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Plan plans = 2;
   */
  plans: Plan[] = [];

  constructor(data?: PartialMessage<MultiPlanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiPlanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "plans", kind: "message", T: Plan, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiPlanResponse {
    return new MultiPlanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiPlanResponse {
    return new MultiPlanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiPlanResponse {
    return new MultiPlanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiPlanResponse | PlainMessage<MultiPlanResponse> | undefined, b: MultiPlanResponse | PlainMessage<MultiPlanResponse> | undefined): boolean {
    return proto3.util.equals(MultiPlanResponse, a, b);
  }
}

/**
 * GetHistoricalUsageRequest - billing 2
 *
 * @generated from message clarifai.api.GetHistoricalUsageRequest
 */
export class GetHistoricalUsageRequest extends Message<GetHistoricalUsageRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * start date of the historical usage
   *
   * @generated from field: google.protobuf.Timestamp start_date = 2;
   */
  startDate?: Timestamp;

  /**
   * end date of the historical usage
   *
   * @generated from field: google.protobuf.Timestamp end_date = 3;
   */
  endDate?: Timestamp;

  /**
   * If true, the usage is broken down per app
   * Default to false
   *
   * @generated from field: bool broken_down_per_app = 4;
   */
  brokenDownPerApp = false;

  constructor(data?: PartialMessage<GetHistoricalUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetHistoricalUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "start_date", kind: "message", T: Timestamp },
    { no: 3, name: "end_date", kind: "message", T: Timestamp },
    { no: 4, name: "broken_down_per_app", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHistoricalUsageRequest {
    return new GetHistoricalUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHistoricalUsageRequest {
    return new GetHistoricalUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHistoricalUsageRequest {
    return new GetHistoricalUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHistoricalUsageRequest | PlainMessage<GetHistoricalUsageRequest> | undefined, b: GetHistoricalUsageRequest | PlainMessage<GetHistoricalUsageRequest> | undefined): boolean {
    return proto3.util.equals(GetHistoricalUsageRequest, a, b);
  }
}

/**
 * GetHistoricalUsageResponse - billing 2
 *
 * @generated from message clarifai.api.GetHistoricalUsageResponse
 */
export class GetHistoricalUsageResponse extends Message<GetHistoricalUsageResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.OpCountByDate usage = 2;
   */
  usage: OpCountByDate[] = [];

  constructor(data?: PartialMessage<GetHistoricalUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetHistoricalUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "usage", kind: "message", T: OpCountByDate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHistoricalUsageResponse {
    return new GetHistoricalUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHistoricalUsageResponse {
    return new GetHistoricalUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHistoricalUsageResponse {
    return new GetHistoricalUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHistoricalUsageResponse | PlainMessage<GetHistoricalUsageResponse> | undefined, b: GetHistoricalUsageResponse | PlainMessage<GetHistoricalUsageResponse> | undefined): boolean {
    return proto3.util.equals(GetHistoricalUsageResponse, a, b);
  }
}

/**
 * PostHistoricalUsageRequest - billing 1
 *
 * @generated from message clarifai.api.PostHistoricalUsageRequest
 */
export class PostHistoricalUsageRequest extends Message<PostHistoricalUsageRequest> {
  /**
   * NOTE: add plotting parameters here as we expand the usage-dashboard functionality
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostHistoricalUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostHistoricalUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostHistoricalUsageRequest {
    return new PostHistoricalUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostHistoricalUsageRequest {
    return new PostHistoricalUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostHistoricalUsageRequest {
    return new PostHistoricalUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostHistoricalUsageRequest | PlainMessage<PostHistoricalUsageRequest> | undefined, b: PostHistoricalUsageRequest | PlainMessage<PostHistoricalUsageRequest> | undefined): boolean {
    return proto3.util.equals(PostHistoricalUsageRequest, a, b);
  }
}

/**
 * PostHistoricalUsageResponse - billing 1
 *
 * @generated from message clarifai.api.PostHistoricalUsageResponse
 */
export class PostHistoricalUsageResponse extends Message<PostHistoricalUsageResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * in the future, we will also have an optional field for billing cycle:
   *
   * @generated from field: google.protobuf.Duration interval = 2;
   */
  interval?: Duration;

  /**
   * @generated from field: repeated clarifai.api.DimensionList usage = 3;
   */
  usage: DimensionList[] = [];

  constructor(data?: PartialMessage<PostHistoricalUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostHistoricalUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "interval", kind: "message", T: Duration },
    { no: 3, name: "usage", kind: "message", T: DimensionList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostHistoricalUsageResponse {
    return new PostHistoricalUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostHistoricalUsageResponse {
    return new PostHistoricalUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostHistoricalUsageResponse {
    return new PostHistoricalUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostHistoricalUsageResponse | PlainMessage<PostHistoricalUsageResponse> | undefined, b: PostHistoricalUsageResponse | PlainMessage<PostHistoricalUsageResponse> | undefined): boolean {
    return proto3.util.equals(PostHistoricalUsageResponse, a, b);
  }
}

/**
 * GetRealtimeUsageRequest
 *
 * @generated from message clarifai.api.GetRealtimeUsageRequest
 */
export class GetRealtimeUsageRequest extends Message<GetRealtimeUsageRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<GetRealtimeUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetRealtimeUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRealtimeUsageRequest {
    return new GetRealtimeUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRealtimeUsageRequest {
    return new GetRealtimeUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRealtimeUsageRequest {
    return new GetRealtimeUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRealtimeUsageRequest | PlainMessage<GetRealtimeUsageRequest> | undefined, b: GetRealtimeUsageRequest | PlainMessage<GetRealtimeUsageRequest> | undefined): boolean {
    return proto3.util.equals(GetRealtimeUsageRequest, a, b);
  }
}

/**
 * GetRealtimeUsageResponse
 *
 * @generated from message clarifai.api.GetRealtimeUsageResponse
 */
export class GetRealtimeUsageResponse extends Message<GetRealtimeUsageResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.RealtimeCount realtime_usage = 4;
   */
  realtimeUsage: RealtimeCount[] = [];

  constructor(data?: PartialMessage<GetRealtimeUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetRealtimeUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 4, name: "realtime_usage", kind: "message", T: RealtimeCount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRealtimeUsageResponse {
    return new GetRealtimeUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRealtimeUsageResponse {
    return new GetRealtimeUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRealtimeUsageResponse {
    return new GetRealtimeUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRealtimeUsageResponse | PlainMessage<GetRealtimeUsageResponse> | undefined, b: GetRealtimeUsageResponse | PlainMessage<GetRealtimeUsageResponse> | undefined): boolean {
    return proto3.util.equals(GetRealtimeUsageResponse, a, b);
  }
}

/**
 * ListUsageIntervalsRequest
 *
 * @generated from message clarifai.api.ListUsageIntervalsRequest
 */
export class ListUsageIntervalsRequest extends Message<ListUsageIntervalsRequest> {
  constructor(data?: PartialMessage<ListUsageIntervalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUsageIntervalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsageIntervalsRequest {
    return new ListUsageIntervalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsageIntervalsRequest {
    return new ListUsageIntervalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsageIntervalsRequest {
    return new ListUsageIntervalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsageIntervalsRequest | PlainMessage<ListUsageIntervalsRequest> | undefined, b: ListUsageIntervalsRequest | PlainMessage<ListUsageIntervalsRequest> | undefined): boolean {
    return proto3.util.equals(ListUsageIntervalsRequest, a, b);
  }
}

/**
 * ListUsageIntervalsResponse
 *
 * @generated from message clarifai.api.ListUsageIntervalsResponse
 */
export class ListUsageIntervalsResponse extends Message<ListUsageIntervalsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.UsageInterval usage_intervals = 2;
   */
  usageIntervals: UsageInterval[] = [];

  constructor(data?: PartialMessage<ListUsageIntervalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUsageIntervalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "usage_intervals", kind: "message", T: UsageInterval, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsageIntervalsResponse {
    return new ListUsageIntervalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsageIntervalsResponse {
    return new ListUsageIntervalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsageIntervalsResponse {
    return new ListUsageIntervalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsageIntervalsResponse | PlainMessage<ListUsageIntervalsResponse> | undefined, b: ListUsageIntervalsResponse | PlainMessage<ListUsageIntervalsResponse> | undefined): boolean {
    return proto3.util.equals(ListUsageIntervalsResponse, a, b);
  }
}

/**
 * ListUserBillingCyclesRequest - old billing
 *
 * @generated from message clarifai.api.ListUserBillingCyclesRequest
 */
export class ListUserBillingCyclesRequest extends Message<ListUserBillingCyclesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListUserBillingCyclesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUserBillingCyclesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserBillingCyclesRequest {
    return new ListUserBillingCyclesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserBillingCyclesRequest {
    return new ListUserBillingCyclesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserBillingCyclesRequest {
    return new ListUserBillingCyclesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserBillingCyclesRequest | PlainMessage<ListUserBillingCyclesRequest> | undefined, b: ListUserBillingCyclesRequest | PlainMessage<ListUserBillingCyclesRequest> | undefined): boolean {
    return proto3.util.equals(ListUserBillingCyclesRequest, a, b);
  }
}

/**
 * ListUserCyclesRequest
 *
 * @generated from message clarifai.api.ListUserCyclesRequest
 */
export class ListUserCyclesRequest extends Message<ListUserCyclesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The number of cycles that will be contained in the response
   * Defaults to 12.
   *
   * @generated from field: uint32 cycle_number = 2;
   */
  cycleNumber = 0;

  /**
   * (optional URL parameter) Get the cycles before and including this date
   * Defaults to now
   *
   * @generated from field: google.protobuf.Timestamp before_date = 3;
   */
  beforeDate?: Timestamp;

  constructor(data?: PartialMessage<ListUserCyclesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUserCyclesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "cycle_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "before_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserCyclesRequest {
    return new ListUserCyclesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserCyclesRequest {
    return new ListUserCyclesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserCyclesRequest {
    return new ListUserCyclesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserCyclesRequest | PlainMessage<ListUserCyclesRequest> | undefined, b: ListUserCyclesRequest | PlainMessage<ListUserCyclesRequest> | undefined): boolean {
    return proto3.util.equals(ListUserCyclesRequest, a, b);
  }
}

/**
 * ListUserBillingCyclesResponse - old billing
 *
 * @generated from message clarifai.api.ListUserBillingCyclesResponse
 */
export class ListUserBillingCyclesResponse extends Message<ListUserBillingCyclesResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.BillingCycle billing_cycles = 2;
   */
  billingCycles: BillingCycle[] = [];

  constructor(data?: PartialMessage<ListUserBillingCyclesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUserBillingCyclesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "billing_cycles", kind: "message", T: BillingCycle, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserBillingCyclesResponse {
    return new ListUserBillingCyclesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserBillingCyclesResponse {
    return new ListUserBillingCyclesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserBillingCyclesResponse {
    return new ListUserBillingCyclesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserBillingCyclesResponse | PlainMessage<ListUserBillingCyclesResponse> | undefined, b: ListUserBillingCyclesResponse | PlainMessage<ListUserBillingCyclesResponse> | undefined): boolean {
    return proto3.util.equals(ListUserBillingCyclesResponse, a, b);
  }
}

/**
 * ListUserCyclesResponse
 *
 * @generated from message clarifai.api.ListUserCyclesResponse
 */
export class ListUserCyclesResponse extends Message<ListUserCyclesResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.UsageCycle usage_cycles = 2;
   */
  usageCycles: UsageCycle[] = [];

  constructor(data?: PartialMessage<ListUserCyclesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUserCyclesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "usage_cycles", kind: "message", T: UsageCycle, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserCyclesResponse {
    return new ListUserCyclesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserCyclesResponse {
    return new ListUserCyclesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserCyclesResponse {
    return new ListUserCyclesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserCyclesResponse | PlainMessage<ListUserCyclesResponse> | undefined, b: ListUserCyclesResponse | PlainMessage<ListUserCyclesResponse> | undefined): boolean {
    return proto3.util.equals(ListUserCyclesResponse, a, b);
  }
}

/**
 * PostUsageRequest
 *
 * @generated from message clarifai.api.PostUsageRequest
 */
export class PostUsageRequest extends Message<PostUsageRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.EventsCollection events_collections = 2;
   */
  eventsCollections: EventsCollection[] = [];

  /**
   * public key generated in client side
   *
   * @generated from field: string public_key = 3;
   */
  publicKey = "";

  /**
   * @generated from field: bytes signature = 4;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<PostUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "events_collections", kind: "message", T: EventsCollection, repeated: true },
    { no: 3, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostUsageRequest {
    return new PostUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostUsageRequest {
    return new PostUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostUsageRequest {
    return new PostUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostUsageRequest | PlainMessage<PostUsageRequest> | undefined, b: PostUsageRequest | PlainMessage<PostUsageRequest> | undefined): boolean {
    return proto3.util.equals(PostUsageRequest, a, b);
  }
}

/**
 * PostUsageResponse
 *
 * @generated from message clarifai.api.PostUsageResponse
 */
export class PostUsageResponse extends Message<PostUsageResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<PostUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostUsageResponse {
    return new PostUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostUsageResponse {
    return new PostUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostUsageResponse {
    return new PostUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostUsageResponse | PlainMessage<PostUsageResponse> | undefined, b: PostUsageResponse | PlainMessage<PostUsageResponse> | undefined): boolean {
    return proto3.util.equals(PostUsageResponse, a, b);
  }
}

/**
 * GetUserRequest
 *
 * @generated from message clarifai.api.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * we used to have user_id but moved to the standard convention. Since this endpoint
   * hasn't been exposed and only used by portal as a url this won't effect anything external.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
   *
   * @generated from field: repeated string additional_fields = 2;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * List all the publicly visible users in the platform.
 * On the first page the caller user will always be returned in the first result for the page.
 *
 * @generated from message clarifai.api.ListUsersRequest
 */
export class ListUsersRequest extends Message<ListUsersRequest> {
  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 1;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 2;
   */
  perPage = 0;

  /**
   * Sorting options:
   * Whether to sort in ascending order. If false, will order in descending order.
   *
   * @generated from field: bool sort_ascending = 4;
   */
  sortAscending = false;

  /**
   * @generated from oneof clarifai.api.ListUsersRequest.sort_by
   */
  sortBy: {
    /**
     * Whether to order by the user ids
     *
     * @generated from field: bool sort_by_id = 5;
     */
    value: boolean;
    case: "sortById";
  } | {
    /**
     * Whether to order by the user first names
     *
     * @generated from field: bool sort_by_first_name = 6;
     */
    value: boolean;
    case: "sortByFirstName";
  } | {
    /**
     * Whether to order by the user last names
     *
     * @generated from field: bool sort_by_last_name = 7;
     */
    value: boolean;
    case: "sortByLastName";
  } | {
    /**
     * Whether to order by when the user was created.
     * If neither sort option is set to true, we will sort by created_at.
     *
     * @generated from field: bool sort_by_created_at = 8;
     */
    value: boolean;
    case: "sortByCreatedAt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Filtering options:
   * Query various text fields that can contain the words in the query string.
   * These include id, first name and last name.
   *
   * @generated from field: string query = 3;
   */
  query = "";

  /**
   * If true, we only return users that are starred by the requesting user
   *
   * @generated from field: bool starred_only = 10;
   */
  starredOnly = false;

  /**
   * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
   *
   * @generated from field: repeated string additional_fields = 9;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<ListUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "sort_ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "sort_by_id", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 6, name: "sort_by_first_name", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 7, name: "sort_by_last_name", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 8, name: "sort_by_created_at", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "starred_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined, b: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListUsersRequest, a, b);
  }
}

/**
 * PostUserConsentRequest
 *
 * @generated from message clarifai.api.PostUserConsentRequest
 */
export class PostUserConsentRequest extends Message<PostUserConsentRequest> {
  /**
   * This can be the special user_id "me" as well.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: bool consent = 2;
   */
  consent = false;

  /**
   * @generated from field: repeated string fields = 3;
   */
  fields: string[] = [];

  constructor(data?: PartialMessage<PostUserConsentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostUserConsentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "consent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostUserConsentRequest {
    return new PostUserConsentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostUserConsentRequest {
    return new PostUserConsentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostUserConsentRequest {
    return new PostUserConsentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostUserConsentRequest | PlainMessage<PostUserConsentRequest> | undefined, b: PostUserConsentRequest | PlainMessage<PostUserConsentRequest> | undefined): boolean {
    return proto3.util.equals(PostUserConsentRequest, a, b);
  }
}

/**
 * SingleUserResponse
 *
 * @generated from message clarifai.api.SingleUserResponse
 */
export class SingleUserResponse extends Message<SingleUserResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.User user = 2;
   */
  user?: User;

  constructor(data?: PartialMessage<SingleUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleUserResponse {
    return new SingleUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleUserResponse {
    return new SingleUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleUserResponse {
    return new SingleUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleUserResponse | PlainMessage<SingleUserResponse> | undefined, b: SingleUserResponse | PlainMessage<SingleUserResponse> | undefined): boolean {
    return proto3.util.equals(SingleUserResponse, a, b);
  }
}

/**
 * MultiUserResponse
 *
 * @generated from message clarifai.api.MultiUserResponse
 */
export class MultiUserResponse extends Message<MultiUserResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.User users = 2;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MultiUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiUserResponse {
    return new MultiUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiUserResponse {
    return new MultiUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiUserResponse {
    return new MultiUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiUserResponse | PlainMessage<MultiUserResponse> | undefined, b: MultiUserResponse | PlainMessage<MultiUserResponse> | undefined): boolean {
    return proto3.util.equals(MultiUserResponse, a, b);
  }
}

/**
 * This is how you to patch the user object.
 * If info.user_id is set then no other field can be set because it's an expensive and dangerous operation.
 * All other top level and nested fields can be set separately together.
 *
 * @generated from message clarifai.api.PatchUserRequest
 */
export class PatchUserRequest extends Message<PatchUserRequest> {
  /**
   * Provide user id to update.
   * An organization user can update only their own information.
   * An organization admin can update the information of any user in the organization.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 7;
   */
  userAppId?: UserAppIDSet;

  /**
   * Request to update user information.
   *
   * @generated from field: clarifai.api.UserInfo info = 2;
   */
  info?: UserInfo;

  /**
   * Request to update password
   *
   * @generated from field: clarifai.api.UserPassword pass = 3;
   */
  pass?: UserPassword;

  /**
   * To handle arbitrary json metadata you can use a struct field:
   * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
   *
   * @generated from field: google.protobuf.Struct metadata = 4;
   */
  metadata?: Struct;

  /**
   * @generated from field: clarifai.api.PatchAction action = 5;
   */
  action?: PatchAction;

  constructor(data?: PartialMessage<PatchUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 7, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "info", kind: "message", T: UserInfo },
    { no: 3, name: "pass", kind: "message", T: UserPassword },
    { no: 4, name: "metadata", kind: "message", T: Struct },
    { no: 5, name: "action", kind: "message", T: PatchAction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchUserRequest {
    return new PatchUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchUserRequest {
    return new PatchUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchUserRequest {
    return new PatchUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchUserRequest | PlainMessage<PatchUserRequest> | undefined, b: PatchUserRequest | PlainMessage<PatchUserRequest> | undefined): boolean {
    return proto3.util.equals(PatchUserRequest, a, b);
  }
}

/**
 * PostUserAccessRequest
 *
 * @generated from message clarifai.api.PostUserAccessRequest
 */
export class PostUserAccessRequest extends Message<PostUserAccessRequest> {
  /**
   * User ID
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * User access
   *
   * @generated from field: repeated clarifai.api.UserAccess access = 2;
   */
  access: UserAccess[] = [];

  constructor(data?: PartialMessage<PostUserAccessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostUserAccessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "access", kind: "message", T: UserAccess, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostUserAccessRequest {
    return new PostUserAccessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostUserAccessRequest {
    return new PostUserAccessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostUserAccessRequest {
    return new PostUserAccessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostUserAccessRequest | PlainMessage<PostUserAccessRequest> | undefined, b: PostUserAccessRequest | PlainMessage<PostUserAccessRequest> | undefined): boolean {
    return proto3.util.equals(PostUserAccessRequest, a, b);
  }
}

/**
 * GetUserAccessRequest
 *
 * @generated from message clarifai.api.GetUserAccessRequest
 */
export class GetUserAccessRequest extends Message<GetUserAccessRequest> {
  /**
   * User ID
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<GetUserAccessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetUserAccessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccessRequest {
    return new GetUserAccessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccessRequest {
    return new GetUserAccessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccessRequest {
    return new GetUserAccessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccessRequest | PlainMessage<GetUserAccessRequest> | undefined, b: GetUserAccessRequest | PlainMessage<GetUserAccessRequest> | undefined): boolean {
    return proto3.util.equals(GetUserAccessRequest, a, b);
  }
}

/**
 * MultiUserAccessResponse
 *
 * @generated from message clarifai.api.MultiUserAccessResponse
 */
export class MultiUserAccessResponse extends Message<MultiUserAccessResponse> {
  /**
   * Standard clarifai status code
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * User access
   *
   * @generated from field: repeated clarifai.api.UserAccess access = 2;
   */
  access: UserAccess[] = [];

  constructor(data?: PartialMessage<MultiUserAccessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiUserAccessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "access", kind: "message", T: UserAccess, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiUserAccessResponse {
    return new MultiUserAccessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiUserAccessResponse {
    return new MultiUserAccessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiUserAccessResponse {
    return new MultiUserAccessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiUserAccessResponse | PlainMessage<MultiUserAccessResponse> | undefined, b: MultiUserAccessResponse | PlainMessage<MultiUserAccessResponse> | undefined): boolean {
    return proto3.util.equals(MultiUserAccessResponse, a, b);
  }
}

/**
 * SingleUserAccessResponse
 *
 * @generated from message clarifai.api.SingleUserAccessResponse
 */
export class SingleUserAccessResponse extends Message<SingleUserAccessResponse> {
  /**
   * Standard clarifai status code
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * User access
   *
   * @generated from field: clarifai.api.UserAccess access = 2;
   */
  access?: UserAccess;

  constructor(data?: PartialMessage<SingleUserAccessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleUserAccessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "access", kind: "message", T: UserAccess },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleUserAccessResponse {
    return new SingleUserAccessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleUserAccessResponse {
    return new SingleUserAccessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleUserAccessResponse {
    return new SingleUserAccessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleUserAccessResponse | PlainMessage<SingleUserAccessResponse> | undefined, b: SingleUserAccessResponse | PlainMessage<SingleUserAccessResponse> | undefined): boolean {
    return proto3.util.equals(SingleUserAccessResponse, a, b);
  }
}

/**
 * PostEmailsRequest
 *
 * @generated from message clarifai.api.PostEmailsRequest
 */
export class PostEmailsRequest extends Message<PostEmailsRequest> {
  /**
   * User ID
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Emails to add
   *
   * @generated from field: repeated string emails = 2;
   */
  emails: string[] = [];

  constructor(data?: PartialMessage<PostEmailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostEmailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "emails", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostEmailsRequest {
    return new PostEmailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostEmailsRequest {
    return new PostEmailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostEmailsRequest {
    return new PostEmailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostEmailsRequest | PlainMessage<PostEmailsRequest> | undefined, b: PostEmailsRequest | PlainMessage<PostEmailsRequest> | undefined): boolean {
    return proto3.util.equals(PostEmailsRequest, a, b);
  }
}

/**
 * SingleEmailResponse
 *
 * @generated from message clarifai.api.SingleEmailResponse
 */
export class SingleEmailResponse extends Message<SingleEmailResponse> {
  /**
   * Standard clarifai status code
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Returns the targeted email.
   *
   * @generated from field: clarifai.api.EmailAddress email = 2;
   */
  email?: EmailAddress;

  constructor(data?: PartialMessage<SingleEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "email", kind: "message", T: EmailAddress },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleEmailResponse {
    return new SingleEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleEmailResponse {
    return new SingleEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleEmailResponse {
    return new SingleEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleEmailResponse | PlainMessage<SingleEmailResponse> | undefined, b: SingleEmailResponse | PlainMessage<SingleEmailResponse> | undefined): boolean {
    return proto3.util.equals(SingleEmailResponse, a, b);
  }
}

/**
 * MultipleEmailResponse
 *
 * @generated from message clarifai.api.MultipleEmailResponse
 */
export class MultipleEmailResponse extends Message<MultipleEmailResponse> {
  /**
   * Standard clarifai status code
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Returns the targeted emails.
   *
   * @generated from field: repeated clarifai.api.EmailAddress emails = 2;
   */
  emails: EmailAddress[] = [];

  constructor(data?: PartialMessage<MultipleEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultipleEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "emails", kind: "message", T: EmailAddress, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultipleEmailResponse {
    return new MultipleEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultipleEmailResponse {
    return new MultipleEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultipleEmailResponse {
    return new MultipleEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultipleEmailResponse | PlainMessage<MultipleEmailResponse> | undefined, b: MultipleEmailResponse | PlainMessage<MultipleEmailResponse> | undefined): boolean {
    return proto3.util.equals(MultipleEmailResponse, a, b);
  }
}

/**
 * ListEmailsRequest
 *
 * @generated from message clarifai.api.ListEmailsRequest
 */
export class ListEmailsRequest extends Message<ListEmailsRequest> {
  /**
   * User ID
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListEmailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListEmailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEmailsRequest {
    return new ListEmailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEmailsRequest {
    return new ListEmailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEmailsRequest {
    return new ListEmailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEmailsRequest | PlainMessage<ListEmailsRequest> | undefined, b: ListEmailsRequest | PlainMessage<ListEmailsRequest> | undefined): boolean {
    return proto3.util.equals(ListEmailsRequest, a, b);
  }
}

/**
 * PostResendVerifyRequest
 *
 * @generated from message clarifai.api.PostResendVerifyRequest
 */
export class PostResendVerifyRequest extends Message<PostResendVerifyRequest> {
  /**
   * User ID
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Email to verify
   *
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<PostResendVerifyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostResendVerifyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostResendVerifyRequest {
    return new PostResendVerifyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostResendVerifyRequest {
    return new PostResendVerifyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostResendVerifyRequest {
    return new PostResendVerifyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostResendVerifyRequest | PlainMessage<PostResendVerifyRequest> | undefined, b: PostResendVerifyRequest | PlainMessage<PostResendVerifyRequest> | undefined): boolean {
    return proto3.util.equals(PostResendVerifyRequest, a, b);
  }
}

/**
 * SingleResendVerifyResponse
 *
 * @generated from message clarifai.api.SingleResendVerifyResponse
 */
export class SingleResendVerifyResponse extends Message<SingleResendVerifyResponse> {
  /**
   * Standard clarifai status code
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<SingleResendVerifyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleResendVerifyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleResendVerifyResponse {
    return new SingleResendVerifyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleResendVerifyResponse {
    return new SingleResendVerifyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleResendVerifyResponse {
    return new SingleResendVerifyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleResendVerifyResponse | PlainMessage<SingleResendVerifyResponse> | undefined, b: SingleResendVerifyResponse | PlainMessage<SingleResendVerifyResponse> | undefined): boolean {
    return proto3.util.equals(SingleResendVerifyResponse, a, b);
  }
}

/**
 * DeleteEmailRequest
 *
 * @generated from message clarifai.api.DeleteEmailRequest
 */
export class DeleteEmailRequest extends Message<DeleteEmailRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * email address to delete
   *
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<DeleteEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEmailRequest {
    return new DeleteEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEmailRequest {
    return new DeleteEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEmailRequest {
    return new DeleteEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEmailRequest | PlainMessage<DeleteEmailRequest> | undefined, b: DeleteEmailRequest | PlainMessage<DeleteEmailRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEmailRequest, a, b);
  }
}

/**
 * PostPrimaryEmailRequest
 *
 * @generated from message clarifai.api.PostPrimaryEmailRequest
 */
export class PostPrimaryEmailRequest extends Message<PostPrimaryEmailRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * email address to set as primary
   *
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<PostPrimaryEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostPrimaryEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostPrimaryEmailRequest {
    return new PostPrimaryEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostPrimaryEmailRequest {
    return new PostPrimaryEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostPrimaryEmailRequest {
    return new PostPrimaryEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostPrimaryEmailRequest | PlainMessage<PostPrimaryEmailRequest> | undefined, b: PostPrimaryEmailRequest | PlainMessage<PostPrimaryEmailRequest> | undefined): boolean {
    return proto3.util.equals(PostPrimaryEmailRequest, a, b);
  }
}

/**
 * PostValidatePasswordRequest
 *
 * @generated from message clarifai.api.PostValidatePasswordRequest
 */
export class PostValidatePasswordRequest extends Message<PostValidatePasswordRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * password to be validated
   *
   * @generated from field: clarifai.api.Password password = 2;
   */
  password?: Password;

  constructor(data?: PartialMessage<PostValidatePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostValidatePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "password", kind: "message", T: Password },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostValidatePasswordRequest {
    return new PostValidatePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostValidatePasswordRequest {
    return new PostValidatePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostValidatePasswordRequest {
    return new PostValidatePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostValidatePasswordRequest | PlainMessage<PostValidatePasswordRequest> | undefined, b: PostValidatePasswordRequest | PlainMessage<PostValidatePasswordRequest> | undefined): boolean {
    return proto3.util.equals(PostValidatePasswordRequest, a, b);
  }
}

/**
 * SinglePasswordValidationResponse
 *
 * @generated from message clarifai.api.SinglePasswordValidationResponse
 */
export class SinglePasswordValidationResponse extends Message<SinglePasswordValidationResponse> {
  /**
   * Standard clarifai status code
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.PasswordViolations password_violations = 2;
   */
  passwordViolations?: PasswordViolations;

  constructor(data?: PartialMessage<SinglePasswordValidationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SinglePasswordValidationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "password_violations", kind: "message", T: PasswordViolations },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SinglePasswordValidationResponse {
    return new SinglePasswordValidationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SinglePasswordValidationResponse {
    return new SinglePasswordValidationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SinglePasswordValidationResponse {
    return new SinglePasswordValidationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SinglePasswordValidationResponse | PlainMessage<SinglePasswordValidationResponse> | undefined, b: SinglePasswordValidationResponse | PlainMessage<SinglePasswordValidationResponse> | undefined): boolean {
    return proto3.util.equals(SinglePasswordValidationResponse, a, b);
  }
}

/**
 * ListGlobalPasswordPoliciesRequest
 *
 * @generated from message clarifai.api.ListGlobalPasswordPoliciesRequest
 */
export class ListGlobalPasswordPoliciesRequest extends Message<ListGlobalPasswordPoliciesRequest> {
  constructor(data?: PartialMessage<ListGlobalPasswordPoliciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListGlobalPasswordPoliciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGlobalPasswordPoliciesRequest {
    return new ListGlobalPasswordPoliciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGlobalPasswordPoliciesRequest {
    return new ListGlobalPasswordPoliciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGlobalPasswordPoliciesRequest {
    return new ListGlobalPasswordPoliciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListGlobalPasswordPoliciesRequest | PlainMessage<ListGlobalPasswordPoliciesRequest> | undefined, b: ListGlobalPasswordPoliciesRequest | PlainMessage<ListGlobalPasswordPoliciesRequest> | undefined): boolean {
    return proto3.util.equals(ListGlobalPasswordPoliciesRequest, a, b);
  }
}

/**
 * ListPasswordPoliciesRequest
 *
 * @generated from message clarifai.api.ListPasswordPoliciesRequest
 */
export class ListPasswordPoliciesRequest extends Message<ListPasswordPoliciesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The list of target user id.
   * Defaults to empty list
   *
   * @generated from field: repeated string user_ids = 2;
   */
  userIds: string[] = [];

  /**
   * (optional URL parameter) The list of target organization id.
   * Defaults to empty list
   *
   * @generated from field: repeated string organization_ids = 3;
   */
  organizationIds: string[] = [];

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 4;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 5;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListPasswordPoliciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListPasswordPoliciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "organization_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPasswordPoliciesRequest {
    return new ListPasswordPoliciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPasswordPoliciesRequest {
    return new ListPasswordPoliciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPasswordPoliciesRequest {
    return new ListPasswordPoliciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPasswordPoliciesRequest | PlainMessage<ListPasswordPoliciesRequest> | undefined, b: ListPasswordPoliciesRequest | PlainMessage<ListPasswordPoliciesRequest> | undefined): boolean {
    return proto3.util.equals(ListPasswordPoliciesRequest, a, b);
  }
}

/**
 * PostPasswordPoliciesRequest
 *
 * @generated from message clarifai.api.PostPasswordPoliciesRequest
 */
export class PostPasswordPoliciesRequest extends Message<PostPasswordPoliciesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.PasswordPolicy password_policies = 2;
   */
  passwordPolicies: PasswordPolicy[] = [];

  constructor(data?: PartialMessage<PostPasswordPoliciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostPasswordPoliciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "password_policies", kind: "message", T: PasswordPolicy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostPasswordPoliciesRequest {
    return new PostPasswordPoliciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostPasswordPoliciesRequest {
    return new PostPasswordPoliciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostPasswordPoliciesRequest {
    return new PostPasswordPoliciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostPasswordPoliciesRequest | PlainMessage<PostPasswordPoliciesRequest> | undefined, b: PostPasswordPoliciesRequest | PlainMessage<PostPasswordPoliciesRequest> | undefined): boolean {
    return proto3.util.equals(PostPasswordPoliciesRequest, a, b);
  }
}

/**
 * PatchPasswordPoliciesRequest
 *
 * @generated from message clarifai.api.PatchPasswordPoliciesRequest
 */
export class PatchPasswordPoliciesRequest extends Message<PatchPasswordPoliciesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.PasswordPolicy password_policies = 2;
   */
  passwordPolicies: PasswordPolicy[] = [];

  /**
   * The action to perform on the patched objects
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchPasswordPoliciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchPasswordPoliciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "password_policies", kind: "message", T: PasswordPolicy, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchPasswordPoliciesRequest {
    return new PatchPasswordPoliciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchPasswordPoliciesRequest {
    return new PatchPasswordPoliciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchPasswordPoliciesRequest {
    return new PatchPasswordPoliciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchPasswordPoliciesRequest | PlainMessage<PatchPasswordPoliciesRequest> | undefined, b: PatchPasswordPoliciesRequest | PlainMessage<PatchPasswordPoliciesRequest> | undefined): boolean {
    return proto3.util.equals(PatchPasswordPoliciesRequest, a, b);
  }
}

/**
 * DeletePasswordPoliciesRequest
 *
 * @generated from message clarifai.api.DeletePasswordPoliciesRequest
 */
export class DeletePasswordPoliciesRequest extends Message<DeletePasswordPoliciesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Request to delete several things by the list of ids.
   *
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeletePasswordPoliciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeletePasswordPoliciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePasswordPoliciesRequest {
    return new DeletePasswordPoliciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePasswordPoliciesRequest {
    return new DeletePasswordPoliciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePasswordPoliciesRequest {
    return new DeletePasswordPoliciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePasswordPoliciesRequest | PlainMessage<DeletePasswordPoliciesRequest> | undefined, b: DeletePasswordPoliciesRequest | PlainMessage<DeletePasswordPoliciesRequest> | undefined): boolean {
    return proto3.util.equals(DeletePasswordPoliciesRequest, a, b);
  }
}

/**
 * MultiplePasswordPoliciesResponse
 *
 * @generated from message clarifai.api.MultiplePasswordPoliciesResponse
 */
export class MultiplePasswordPoliciesResponse extends Message<MultiplePasswordPoliciesResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.PasswordPolicy password_policies = 2;
   */
  passwordPolicies: PasswordPolicy[] = [];

  constructor(data?: PartialMessage<MultiplePasswordPoliciesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiplePasswordPoliciesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "password_policies", kind: "message", T: PasswordPolicy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiplePasswordPoliciesResponse {
    return new MultiplePasswordPoliciesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiplePasswordPoliciesResponse {
    return new MultiplePasswordPoliciesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiplePasswordPoliciesResponse {
    return new MultiplePasswordPoliciesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiplePasswordPoliciesResponse | PlainMessage<MultiplePasswordPoliciesResponse> | undefined, b: MultiplePasswordPoliciesResponse | PlainMessage<MultiplePasswordPoliciesResponse> | undefined): boolean {
    return proto3.util.equals(MultiplePasswordPoliciesResponse, a, b);
  }
}

/**
 * UserFeatureConfigRequest
 *
 * @generated from message clarifai.api.UserFeatureConfigRequest
 */
export class UserFeatureConfigRequest extends Message<UserFeatureConfigRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<UserFeatureConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.UserFeatureConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserFeatureConfigRequest {
    return new UserFeatureConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserFeatureConfigRequest {
    return new UserFeatureConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserFeatureConfigRequest {
    return new UserFeatureConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserFeatureConfigRequest | PlainMessage<UserFeatureConfigRequest> | undefined, b: UserFeatureConfigRequest | PlainMessage<UserFeatureConfigRequest> | undefined): boolean {
    return proto3.util.equals(UserFeatureConfigRequest, a, b);
  }
}

/**
 * SingleUserFeatureConfigResponse
 *
 * @generated from message clarifai.api.SingleUserFeatureConfigResponse
 */
export class SingleUserFeatureConfigResponse extends Message<SingleUserFeatureConfigResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string config = 2;
   */
  config = "";

  constructor(data?: PartialMessage<SingleUserFeatureConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleUserFeatureConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleUserFeatureConfigResponse {
    return new SingleUserFeatureConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleUserFeatureConfigResponse {
    return new SingleUserFeatureConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleUserFeatureConfigResponse {
    return new SingleUserFeatureConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleUserFeatureConfigResponse | PlainMessage<SingleUserFeatureConfigResponse> | undefined, b: SingleUserFeatureConfigResponse | PlainMessage<SingleUserFeatureConfigResponse> | undefined): boolean {
    return proto3.util.equals(SingleUserFeatureConfigResponse, a, b);
  }
}

/**
 * PostOrganizationsRequest
 *
 * @generated from message clarifai.api.PostOrganizationsRequest
 */
export class PostOrganizationsRequest extends Message<PostOrganizationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Organization organizations = 2;
   */
  organizations: Organization[] = [];

  constructor(data?: PartialMessage<PostOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "organizations", kind: "message", T: Organization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostOrganizationsRequest {
    return new PostOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostOrganizationsRequest {
    return new PostOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostOrganizationsRequest {
    return new PostOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostOrganizationsRequest | PlainMessage<PostOrganizationsRequest> | undefined, b: PostOrganizationsRequest | PlainMessage<PostOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(PostOrganizationsRequest, a, b);
  }
}

/**
 * ListOrganizationsRequest
 *
 * @generated from message clarifai.api.ListOrganizationsRequest
 */
export class ListOrganizationsRequest extends Message<ListOrganizationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined, b: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsRequest, a, b);
  }
}

/**
 * ListUsersOrganizationsRequest
 *
 * @generated from message clarifai.api.ListUsersOrganizationsRequest
 */
export class ListUsersOrganizationsRequest extends Message<ListUsersOrganizationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 20.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListUsersOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUsersOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersOrganizationsRequest {
    return new ListUsersOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersOrganizationsRequest {
    return new ListUsersOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersOrganizationsRequest {
    return new ListUsersOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersOrganizationsRequest | PlainMessage<ListUsersOrganizationsRequest> | undefined, b: ListUsersOrganizationsRequest | PlainMessage<ListUsersOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListUsersOrganizationsRequest, a, b);
  }
}

/**
 * DeleteRequestingUserFromOrganizationRequest
 *
 * @generated from message clarifai.api.DeleteRequestingUserFromOrganizationRequest
 */
export class DeleteRequestingUserFromOrganizationRequest extends Message<DeleteRequestingUserFromOrganizationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<DeleteRequestingUserFromOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteRequestingUserFromOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequestingUserFromOrganizationRequest {
    return new DeleteRequestingUserFromOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequestingUserFromOrganizationRequest {
    return new DeleteRequestingUserFromOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequestingUserFromOrganizationRequest {
    return new DeleteRequestingUserFromOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequestingUserFromOrganizationRequest | PlainMessage<DeleteRequestingUserFromOrganizationRequest> | undefined, b: DeleteRequestingUserFromOrganizationRequest | PlainMessage<DeleteRequestingUserFromOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequestingUserFromOrganizationRequest, a, b);
  }
}

/**
 * PostAcceptOrganizationInvitationRequest
 *
 * @generated from message clarifai.api.PostAcceptOrganizationInvitationRequest
 */
export class PostAcceptOrganizationInvitationRequest extends Message<PostAcceptOrganizationInvitationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The user_id you're calling with.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostAcceptOrganizationInvitationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAcceptOrganizationInvitationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAcceptOrganizationInvitationRequest {
    return new PostAcceptOrganizationInvitationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAcceptOrganizationInvitationRequest {
    return new PostAcceptOrganizationInvitationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAcceptOrganizationInvitationRequest {
    return new PostAcceptOrganizationInvitationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAcceptOrganizationInvitationRequest | PlainMessage<PostAcceptOrganizationInvitationRequest> | undefined, b: PostAcceptOrganizationInvitationRequest | PlainMessage<PostAcceptOrganizationInvitationRequest> | undefined): boolean {
    return proto3.util.equals(PostAcceptOrganizationInvitationRequest, a, b);
  }
}

/**
 * PostDeclineOrganizationInvitationRequest
 *
 * @generated from message clarifai.api.PostDeclineOrganizationInvitationRequest
 */
export class PostDeclineOrganizationInvitationRequest extends Message<PostDeclineOrganizationInvitationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The user_id you're calling with.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostDeclineOrganizationInvitationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostDeclineOrganizationInvitationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostDeclineOrganizationInvitationRequest {
    return new PostDeclineOrganizationInvitationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostDeclineOrganizationInvitationRequest {
    return new PostDeclineOrganizationInvitationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostDeclineOrganizationInvitationRequest {
    return new PostDeclineOrganizationInvitationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostDeclineOrganizationInvitationRequest | PlainMessage<PostDeclineOrganizationInvitationRequest> | undefined, b: PostDeclineOrganizationInvitationRequest | PlainMessage<PostDeclineOrganizationInvitationRequest> | undefined): boolean {
    return proto3.util.equals(PostDeclineOrganizationInvitationRequest, a, b);
  }
}

/**
 * GetOrganizationRequest
 *
 * @generated from message clarifai.api.GetOrganizationRequest
 */
export class GetOrganizationRequest extends Message<GetOrganizationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<GetOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined, b: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationRequest, a, b);
  }
}

/**
 * PatchOrganizationRequest
 *
 * @generated from message clarifai.api.PatchOrganizationRequest
 */
export class PatchOrganizationRequest extends Message<PatchOrganizationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Array that has exactly one organization for patching
   *
   * @generated from field: repeated clarifai.api.Organization organizations = 2;
   */
  organizations: Organization[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "organizations", kind: "message", T: Organization, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchOrganizationRequest {
    return new PatchOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchOrganizationRequest {
    return new PatchOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchOrganizationRequest {
    return new PatchOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchOrganizationRequest | PlainMessage<PatchOrganizationRequest> | undefined, b: PatchOrganizationRequest | PlainMessage<PatchOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(PatchOrganizationRequest, a, b);
  }
}

/**
 * DeleteOrganizationRequest
 *
 * @generated from message clarifai.api.DeleteOrganizationRequest
 */
export class DeleteOrganizationRequest extends Message<DeleteOrganizationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<DeleteOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined, b: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationRequest, a, b);
  }
}

/**
 * SingleOrganizationResponse
 *
 * @generated from message clarifai.api.SingleOrganizationResponse
 */
export class SingleOrganizationResponse extends Message<SingleOrganizationResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Organization organization = 2;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<SingleOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleOrganizationResponse {
    return new SingleOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleOrganizationResponse {
    return new SingleOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleOrganizationResponse {
    return new SingleOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleOrganizationResponse | PlainMessage<SingleOrganizationResponse> | undefined, b: SingleOrganizationResponse | PlainMessage<SingleOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(SingleOrganizationResponse, a, b);
  }
}

/**
 * MultiOrganizationResponse
 *
 * @generated from message clarifai.api.MultiOrganizationResponse
 */
export class MultiOrganizationResponse extends Message<MultiOrganizationResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Organization organizations = 2;
   */
  organizations: Organization[] = [];

  constructor(data?: PartialMessage<MultiOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "organizations", kind: "message", T: Organization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiOrganizationResponse {
    return new MultiOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiOrganizationResponse {
    return new MultiOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiOrganizationResponse {
    return new MultiOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiOrganizationResponse | PlainMessage<MultiOrganizationResponse> | undefined, b: MultiOrganizationResponse | PlainMessage<MultiOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(MultiOrganizationResponse, a, b);
  }
}

/**
 * MultiUsersOrganizationsResponse
 *
 * @generated from message clarifai.api.MultiUsersOrganizationsResponse
 */
export class MultiUsersOrganizationsResponse extends Message<MultiUsersOrganizationsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.MultiUsersOrganizationsResponse.UserOrganization organizations = 2;
   */
  organizations: MultiUsersOrganizationsResponse_UserOrganization[] = [];

  constructor(data?: PartialMessage<MultiUsersOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiUsersOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "organizations", kind: "message", T: MultiUsersOrganizationsResponse_UserOrganization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiUsersOrganizationsResponse {
    return new MultiUsersOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiUsersOrganizationsResponse {
    return new MultiUsersOrganizationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiUsersOrganizationsResponse {
    return new MultiUsersOrganizationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiUsersOrganizationsResponse | PlainMessage<MultiUsersOrganizationsResponse> | undefined, b: MultiUsersOrganizationsResponse | PlainMessage<MultiUsersOrganizationsResponse> | undefined): boolean {
    return proto3.util.equals(MultiUsersOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiUsersOrganizationsResponse.UserOrganization
 */
export class MultiUsersOrganizationsResponse_UserOrganization extends Message<MultiUsersOrganizationsResponse_UserOrganization> {
  /**
   * wrapper because might need to add role id etc in here in the future
   *
   * @generated from field: clarifai.api.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: clarifai.api.Role role = 2;
   */
  role?: Role;

  /**
   * @generated from field: string feature_flag_configs = 3;
   */
  featureFlagConfigs = "";

  constructor(data?: PartialMessage<MultiUsersOrganizationsResponse_UserOrganization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiUsersOrganizationsResponse.UserOrganization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    { no: 2, name: "role", kind: "message", T: Role },
    { no: 3, name: "feature_flag_configs", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiUsersOrganizationsResponse_UserOrganization {
    return new MultiUsersOrganizationsResponse_UserOrganization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiUsersOrganizationsResponse_UserOrganization {
    return new MultiUsersOrganizationsResponse_UserOrganization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiUsersOrganizationsResponse_UserOrganization {
    return new MultiUsersOrganizationsResponse_UserOrganization().fromJsonString(jsonString, options);
  }

  static equals(a: MultiUsersOrganizationsResponse_UserOrganization | PlainMessage<MultiUsersOrganizationsResponse_UserOrganization> | undefined, b: MultiUsersOrganizationsResponse_UserOrganization | PlainMessage<MultiUsersOrganizationsResponse_UserOrganization> | undefined): boolean {
    return proto3.util.equals(MultiUsersOrganizationsResponse_UserOrganization, a, b);
  }
}

/**
 * ListOrganizationAppMembersRequest
 *
 * @generated from message clarifai.api.ListOrganizationAppMembersRequest
 */
export class ListOrganizationAppMembersRequest extends Message<ListOrganizationAppMembersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.auth.scope.S required_scopes = 2;
   */
  requiredScopes: S[] = [];

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 20.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListOrganizationAppMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListOrganizationAppMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "required_scopes", kind: "enum", T: proto3.getEnumType(S), repeated: true },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationAppMembersRequest {
    return new ListOrganizationAppMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationAppMembersRequest {
    return new ListOrganizationAppMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationAppMembersRequest {
    return new ListOrganizationAppMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationAppMembersRequest | PlainMessage<ListOrganizationAppMembersRequest> | undefined, b: ListOrganizationAppMembersRequest | PlainMessage<ListOrganizationAppMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationAppMembersRequest, a, b);
  }
}

/**
 * ListOrganizationMembersRequest
 *
 * @generated from message clarifai.api.ListOrganizationMembersRequest
 */
export class ListOrganizationMembersRequest extends Message<ListOrganizationMembersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 20.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListOrganizationMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListOrganizationMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMembersRequest | PlainMessage<ListOrganizationMembersRequest> | undefined, b: ListOrganizationMembersRequest | PlainMessage<ListOrganizationMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMembersRequest, a, b);
  }
}

/**
 * PostOrganizationInvitationsRequest
 *
 * @generated from message clarifai.api.PostOrganizationInvitationsRequest
 */
export class PostOrganizationInvitationsRequest extends Message<PostOrganizationInvitationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.OrganizationInvitation invitations = 2;
   */
  invitations: OrganizationInvitation[] = [];

  constructor(data?: PartialMessage<PostOrganizationInvitationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostOrganizationInvitationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "invitations", kind: "message", T: OrganizationInvitation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostOrganizationInvitationsRequest {
    return new PostOrganizationInvitationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostOrganizationInvitationsRequest {
    return new PostOrganizationInvitationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostOrganizationInvitationsRequest {
    return new PostOrganizationInvitationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostOrganizationInvitationsRequest | PlainMessage<PostOrganizationInvitationsRequest> | undefined, b: PostOrganizationInvitationsRequest | PlainMessage<PostOrganizationInvitationsRequest> | undefined): boolean {
    return proto3.util.equals(PostOrganizationInvitationsRequest, a, b);
  }
}

/**
 * PatchOrganizationInvitationsRequest
 *
 * @generated from message clarifai.api.PatchOrganizationInvitationsRequest
 */
export class PatchOrganizationInvitationsRequest extends Message<PatchOrganizationInvitationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string action = 2;
   */
  action = "";

  /**
   * @generated from field: repeated clarifai.api.OrganizationInvitation invitations = 3;
   */
  invitations: OrganizationInvitation[] = [];

  constructor(data?: PartialMessage<PatchOrganizationInvitationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchOrganizationInvitationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "invitations", kind: "message", T: OrganizationInvitation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchOrganizationInvitationsRequest {
    return new PatchOrganizationInvitationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchOrganizationInvitationsRequest {
    return new PatchOrganizationInvitationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchOrganizationInvitationsRequest {
    return new PatchOrganizationInvitationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchOrganizationInvitationsRequest | PlainMessage<PatchOrganizationInvitationsRequest> | undefined, b: PatchOrganizationInvitationsRequest | PlainMessage<PatchOrganizationInvitationsRequest> | undefined): boolean {
    return proto3.util.equals(PatchOrganizationInvitationsRequest, a, b);
  }
}

/**
 * ListOrganizationInvitationsRequest
 *
 * @generated from message clarifai.api.ListOrganizationInvitationsRequest
 */
export class ListOrganizationInvitationsRequest extends Message<ListOrganizationInvitationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  /**
   * @generated from field: clarifai.api.OrganizationInvitationStatus status = 4;
   */
  status = OrganizationInvitationStatus.NOT_SET;

  constructor(data?: PartialMessage<ListOrganizationInvitationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListOrganizationInvitationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(OrganizationInvitationStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationInvitationsRequest {
    return new ListOrganizationInvitationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationInvitationsRequest {
    return new ListOrganizationInvitationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationInvitationsRequest {
    return new ListOrganizationInvitationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationInvitationsRequest | PlainMessage<ListOrganizationInvitationsRequest> | undefined, b: ListOrganizationInvitationsRequest | PlainMessage<ListOrganizationInvitationsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationInvitationsRequest, a, b);
  }
}

/**
 * GetOrganizationInvitationRequest
 *
 * @generated from message clarifai.api.GetOrganizationInvitationRequest
 */
export class GetOrganizationInvitationRequest extends Message<GetOrganizationInvitationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetOrganizationInvitationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetOrganizationInvitationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationInvitationRequest {
    return new GetOrganizationInvitationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationInvitationRequest {
    return new GetOrganizationInvitationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationInvitationRequest {
    return new GetOrganizationInvitationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationInvitationRequest | PlainMessage<GetOrganizationInvitationRequest> | undefined, b: GetOrganizationInvitationRequest | PlainMessage<GetOrganizationInvitationRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationInvitationRequest, a, b);
  }
}

/**
 * GetOrganizationInvitationPublicRequest
 *
 * @generated from message clarifai.api.GetOrganizationInvitationPublicRequest
 */
export class GetOrganizationInvitationPublicRequest extends Message<GetOrganizationInvitationPublicRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetOrganizationInvitationPublicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetOrganizationInvitationPublicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationInvitationPublicRequest {
    return new GetOrganizationInvitationPublicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationInvitationPublicRequest {
    return new GetOrganizationInvitationPublicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationInvitationPublicRequest {
    return new GetOrganizationInvitationPublicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationInvitationPublicRequest | PlainMessage<GetOrganizationInvitationPublicRequest> | undefined, b: GetOrganizationInvitationPublicRequest | PlainMessage<GetOrganizationInvitationPublicRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationInvitationPublicRequest, a, b);
  }
}

/**
 * SingleOrganizationInvitationResponse
 *
 * @generated from message clarifai.api.SingleOrganizationInvitationResponse
 */
export class SingleOrganizationInvitationResponse extends Message<SingleOrganizationInvitationResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.OrganizationInvitation invitation = 2;
   */
  invitation?: OrganizationInvitation;

  constructor(data?: PartialMessage<SingleOrganizationInvitationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleOrganizationInvitationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "invitation", kind: "message", T: OrganizationInvitation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleOrganizationInvitationResponse {
    return new SingleOrganizationInvitationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleOrganizationInvitationResponse {
    return new SingleOrganizationInvitationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleOrganizationInvitationResponse {
    return new SingleOrganizationInvitationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleOrganizationInvitationResponse | PlainMessage<SingleOrganizationInvitationResponse> | undefined, b: SingleOrganizationInvitationResponse | PlainMessage<SingleOrganizationInvitationResponse> | undefined): boolean {
    return proto3.util.equals(SingleOrganizationInvitationResponse, a, b);
  }
}

/**
 * MultiOrganizationInvitationResponse
 *
 * @generated from message clarifai.api.MultiOrganizationInvitationResponse
 */
export class MultiOrganizationInvitationResponse extends Message<MultiOrganizationInvitationResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.OrganizationInvitation invitations = 2;
   */
  invitations: OrganizationInvitation[] = [];

  constructor(data?: PartialMessage<MultiOrganizationInvitationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiOrganizationInvitationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "invitations", kind: "message", T: OrganizationInvitation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiOrganizationInvitationResponse {
    return new MultiOrganizationInvitationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiOrganizationInvitationResponse {
    return new MultiOrganizationInvitationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiOrganizationInvitationResponse {
    return new MultiOrganizationInvitationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiOrganizationInvitationResponse | PlainMessage<MultiOrganizationInvitationResponse> | undefined, b: MultiOrganizationInvitationResponse | PlainMessage<MultiOrganizationInvitationResponse> | undefined): boolean {
    return proto3.util.equals(MultiOrganizationInvitationResponse, a, b);
  }
}

/**
 * PatchOrganizationMembersRequest
 *
 * @generated from message clarifai.api.PatchOrganizationMembersRequest
 */
export class PatchOrganizationMembersRequest extends Message<PatchOrganizationMembersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The action to perform on the patched objects
   * For now, only action 'overwrite' is supported
   *
   * @generated from field: string action = 2;
   */
  action = "";

  /**
   * @generated from field: repeated clarifai.api.PatchOrganizationMembersRequest.PatchOrganizationMember organization_members = 3;
   */
  organizationMembers: PatchOrganizationMembersRequest_PatchOrganizationMember[] = [];

  constructor(data?: PartialMessage<PatchOrganizationMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchOrganizationMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_members", kind: "message", T: PatchOrganizationMembersRequest_PatchOrganizationMember, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchOrganizationMembersRequest {
    return new PatchOrganizationMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchOrganizationMembersRequest {
    return new PatchOrganizationMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchOrganizationMembersRequest {
    return new PatchOrganizationMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchOrganizationMembersRequest | PlainMessage<PatchOrganizationMembersRequest> | undefined, b: PatchOrganizationMembersRequest | PlainMessage<PatchOrganizationMembersRequest> | undefined): boolean {
    return proto3.util.equals(PatchOrganizationMembersRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PatchOrganizationMembersRequest.PatchOrganizationMember
 */
export class PatchOrganizationMembersRequest_PatchOrganizationMember extends Message<PatchOrganizationMembersRequest_PatchOrganizationMember> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  constructor(data?: PartialMessage<PatchOrganizationMembersRequest_PatchOrganizationMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchOrganizationMembersRequest.PatchOrganizationMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchOrganizationMembersRequest_PatchOrganizationMember {
    return new PatchOrganizationMembersRequest_PatchOrganizationMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchOrganizationMembersRequest_PatchOrganizationMember {
    return new PatchOrganizationMembersRequest_PatchOrganizationMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchOrganizationMembersRequest_PatchOrganizationMember {
    return new PatchOrganizationMembersRequest_PatchOrganizationMember().fromJsonString(jsonString, options);
  }

  static equals(a: PatchOrganizationMembersRequest_PatchOrganizationMember | PlainMessage<PatchOrganizationMembersRequest_PatchOrganizationMember> | undefined, b: PatchOrganizationMembersRequest_PatchOrganizationMember | PlainMessage<PatchOrganizationMembersRequest_PatchOrganizationMember> | undefined): boolean {
    return proto3.util.equals(PatchOrganizationMembersRequest_PatchOrganizationMember, a, b);
  }
}

/**
 * PostOrganizationMemberRequest
 *
 * @generated from message clarifai.api.PostOrganizationMemberRequest
 */
export class PostOrganizationMemberRequest extends Message<PostOrganizationMemberRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string member_id = 2;
   */
  memberId = "";

  /**
   * @generated from field: string role_id = 3;
   */
  roleId = "";

  constructor(data?: PartialMessage<PostOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "member_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostOrganizationMemberRequest {
    return new PostOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostOrganizationMemberRequest {
    return new PostOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostOrganizationMemberRequest {
    return new PostOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostOrganizationMemberRequest | PlainMessage<PostOrganizationMemberRequest> | undefined, b: PostOrganizationMemberRequest | PlainMessage<PostOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(PostOrganizationMemberRequest, a, b);
  }
}

/**
 * DeleteOrganizationMemberRequest
 *
 * @generated from message clarifai.api.DeleteOrganizationMemberRequest
 */
export class DeleteOrganizationMemberRequest extends Message<DeleteOrganizationMemberRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string member_id = 2;
   */
  memberId = "";

  constructor(data?: PartialMessage<DeleteOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "member_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationMemberRequest {
    return new DeleteOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationMemberRequest {
    return new DeleteOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationMemberRequest {
    return new DeleteOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationMemberRequest | PlainMessage<DeleteOrganizationMemberRequest> | undefined, b: DeleteOrganizationMemberRequest | PlainMessage<DeleteOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationMemberRequest, a, b);
  }
}

/**
 * MultiOrganizationMemberResponse
 *
 * @generated from message clarifai.api.MultiOrganizationMemberResponse
 */
export class MultiOrganizationMemberResponse extends Message<MultiOrganizationMemberResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.OrganizationMember organization_members = 2;
   */
  organizationMembers: OrganizationMember[] = [];

  constructor(data?: PartialMessage<MultiOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "organization_members", kind: "message", T: OrganizationMember, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiOrganizationMemberResponse {
    return new MultiOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiOrganizationMemberResponse {
    return new MultiOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiOrganizationMemberResponse {
    return new MultiOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiOrganizationMemberResponse | PlainMessage<MultiOrganizationMemberResponse> | undefined, b: MultiOrganizationMemberResponse | PlainMessage<MultiOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(MultiOrganizationMemberResponse, a, b);
  }
}

/**
 * PostIdentityProvidersRequest
 *
 * @generated from message clarifai.api.PostIdentityProvidersRequest
 */
export class PostIdentityProvidersRequest extends Message<PostIdentityProvidersRequest> {
  /**
   * @generated from field: repeated clarifai.api.IdentityProvider identity_providers = 1;
   */
  identityProviders: IdentityProvider[] = [];

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostIdentityProvidersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostIdentityProvidersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identity_providers", kind: "message", T: IdentityProvider, repeated: true },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostIdentityProvidersRequest {
    return new PostIdentityProvidersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostIdentityProvidersRequest {
    return new PostIdentityProvidersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostIdentityProvidersRequest {
    return new PostIdentityProvidersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostIdentityProvidersRequest | PlainMessage<PostIdentityProvidersRequest> | undefined, b: PostIdentityProvidersRequest | PlainMessage<PostIdentityProvidersRequest> | undefined): boolean {
    return proto3.util.equals(PostIdentityProvidersRequest, a, b);
  }
}

/**
 * ListIdentityProvidersRequest
 *
 * @generated from message clarifai.api.ListIdentityProvidersRequest
 */
export class ListIdentityProvidersRequest extends Message<ListIdentityProvidersRequest> {
  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 1;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 20.
   *
   * @generated from field: uint32 per_page = 2;
   */
  perPage = 0;

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListIdentityProvidersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListIdentityProvidersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIdentityProvidersRequest {
    return new ListIdentityProvidersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIdentityProvidersRequest {
    return new ListIdentityProvidersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIdentityProvidersRequest {
    return new ListIdentityProvidersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIdentityProvidersRequest | PlainMessage<ListIdentityProvidersRequest> | undefined, b: ListIdentityProvidersRequest | PlainMessage<ListIdentityProvidersRequest> | undefined): boolean {
    return proto3.util.equals(ListIdentityProvidersRequest, a, b);
  }
}

/**
 * GetIdentityProviderRequest
 *
 * @generated from message clarifai.api.GetIdentityProviderRequest
 */
export class GetIdentityProviderRequest extends Message<GetIdentityProviderRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<GetIdentityProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetIdentityProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityProviderRequest {
    return new GetIdentityProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityProviderRequest {
    return new GetIdentityProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityProviderRequest {
    return new GetIdentityProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityProviderRequest | PlainMessage<GetIdentityProviderRequest> | undefined, b: GetIdentityProviderRequest | PlainMessage<GetIdentityProviderRequest> | undefined): boolean {
    return proto3.util.equals(GetIdentityProviderRequest, a, b);
  }
}

/**
 * PatchIdentityProvidersRequest
 *
 * @generated from message clarifai.api.PatchIdentityProvidersRequest
 */
export class PatchIdentityProvidersRequest extends Message<PatchIdentityProvidersRequest> {
  /**
   * @generated from field: repeated clarifai.api.IdentityProvider identity_providers = 1;
   */
  identityProviders: IdentityProvider[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 4;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PatchIdentityProvidersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchIdentityProvidersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identity_providers", kind: "message", T: IdentityProvider, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchIdentityProvidersRequest {
    return new PatchIdentityProvidersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchIdentityProvidersRequest {
    return new PatchIdentityProvidersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchIdentityProvidersRequest {
    return new PatchIdentityProvidersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchIdentityProvidersRequest | PlainMessage<PatchIdentityProvidersRequest> | undefined, b: PatchIdentityProvidersRequest | PlainMessage<PatchIdentityProvidersRequest> | undefined): boolean {
    return proto3.util.equals(PatchIdentityProvidersRequest, a, b);
  }
}

/**
 * DeleteIdentityProvidersRequest
 *
 * @generated from message clarifai.api.DeleteIdentityProvidersRequest
 */
export class DeleteIdentityProvidersRequest extends Message<DeleteIdentityProvidersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteIdentityProvidersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteIdentityProvidersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIdentityProvidersRequest {
    return new DeleteIdentityProvidersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIdentityProvidersRequest {
    return new DeleteIdentityProvidersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIdentityProvidersRequest {
    return new DeleteIdentityProvidersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIdentityProvidersRequest | PlainMessage<DeleteIdentityProvidersRequest> | undefined, b: DeleteIdentityProvidersRequest | PlainMessage<DeleteIdentityProvidersRequest> | undefined): boolean {
    return proto3.util.equals(DeleteIdentityProvidersRequest, a, b);
  }
}

/**
 * SingleIdentityProviderResponse
 *
 * @generated from message clarifai.api.SingleIdentityProviderResponse
 */
export class SingleIdentityProviderResponse extends Message<SingleIdentityProviderResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.IdentityProvider identity_provider = 2;
   */
  identityProvider?: IdentityProvider;

  constructor(data?: PartialMessage<SingleIdentityProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleIdentityProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "identity_provider", kind: "message", T: IdentityProvider },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleIdentityProviderResponse {
    return new SingleIdentityProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleIdentityProviderResponse {
    return new SingleIdentityProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleIdentityProviderResponse {
    return new SingleIdentityProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleIdentityProviderResponse | PlainMessage<SingleIdentityProviderResponse> | undefined, b: SingleIdentityProviderResponse | PlainMessage<SingleIdentityProviderResponse> | undefined): boolean {
    return proto3.util.equals(SingleIdentityProviderResponse, a, b);
  }
}

/**
 * MultiIdentityProviderResponse
 *
 * @generated from message clarifai.api.MultiIdentityProviderResponse
 */
export class MultiIdentityProviderResponse extends Message<MultiIdentityProviderResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.IdentityProvider identity_providers = 2;
   */
  identityProviders: IdentityProvider[] = [];

  constructor(data?: PartialMessage<MultiIdentityProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiIdentityProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "identity_providers", kind: "message", T: IdentityProvider, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiIdentityProviderResponse {
    return new MultiIdentityProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiIdentityProviderResponse {
    return new MultiIdentityProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiIdentityProviderResponse {
    return new MultiIdentityProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiIdentityProviderResponse | PlainMessage<MultiIdentityProviderResponse> | undefined, b: MultiIdentityProviderResponse | PlainMessage<MultiIdentityProviderResponse> | undefined): boolean {
    return proto3.util.equals(MultiIdentityProviderResponse, a, b);
  }
}

/**
 * PostTeamsRequest
 *
 * @generated from message clarifai.api.PostTeamsRequest
 */
export class PostTeamsRequest extends Message<PostTeamsRequest> {
  /**
   * @generated from field: repeated clarifai.api.PostTeamsRequest.PostTeam teams = 1;
   */
  teams: PostTeamsRequest_PostTeam[] = [];

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostTeamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostTeamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "teams", kind: "message", T: PostTeamsRequest_PostTeam, repeated: true },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostTeamsRequest {
    return new PostTeamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostTeamsRequest {
    return new PostTeamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostTeamsRequest {
    return new PostTeamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostTeamsRequest | PlainMessage<PostTeamsRequest> | undefined, b: PostTeamsRequest | PlainMessage<PostTeamsRequest> | undefined): boolean {
    return proto3.util.equals(PostTeamsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PostTeamsRequest.PostTeam
 */
export class PostTeamsRequest_PostTeam extends Message<PostTeamsRequest_PostTeam> {
  /**
   * Identify the team (unique).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * When the team was created.
   * The format is https://www.ietf.org/rfc/rfc3339.txt.
   * Example: "2006-01-02T15:04:05.999999Z".
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * Most recent time when the team was updated.
   * The format is https://www.ietf.org/rfc/rfc3339.txt.
   * Example: "2006-01-02T15:04:05.999999Z".
   *
   * @generated from field: google.protobuf.Timestamp modified_at = 3;
   */
  modifiedAt?: Timestamp;

  /**
   * Name the team.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  constructor(data?: PartialMessage<PostTeamsRequest_PostTeam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostTeamsRequest.PostTeam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "modified_at", kind: "message", T: Timestamp },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostTeamsRequest_PostTeam {
    return new PostTeamsRequest_PostTeam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostTeamsRequest_PostTeam {
    return new PostTeamsRequest_PostTeam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostTeamsRequest_PostTeam {
    return new PostTeamsRequest_PostTeam().fromJsonString(jsonString, options);
  }

  static equals(a: PostTeamsRequest_PostTeam | PlainMessage<PostTeamsRequest_PostTeam> | undefined, b: PostTeamsRequest_PostTeam | PlainMessage<PostTeamsRequest_PostTeam> | undefined): boolean {
    return proto3.util.equals(PostTeamsRequest_PostTeam, a, b);
  }
}

/**
 * ListTeamsRequest
 *
 * @generated from message clarifai.api.ListTeamsRequest
 */
export class ListTeamsRequest extends Message<ListTeamsRequest> {
  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1
   *
   * @generated from field: uint32 page = 1;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 20.
   *
   * @generated from field: uint32 per_page = 2;
   */
  perPage = 0;

  /**
   * Provide a search query to filter teams by name and id.
   * This supports wildcard queries.
   *   For example, the value "*foo*" will match any team whose name or id contains "foo".
   * The search is case-insensitive.
   *
   * @generated from field: string query = 3;
   */
  query = "";

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 4;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListTeamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListTeamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTeamsRequest {
    return new ListTeamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTeamsRequest {
    return new ListTeamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTeamsRequest {
    return new ListTeamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTeamsRequest | PlainMessage<ListTeamsRequest> | undefined, b: ListTeamsRequest | PlainMessage<ListTeamsRequest> | undefined): boolean {
    return proto3.util.equals(ListTeamsRequest, a, b);
  }
}

/**
 * GetTeamRequest
 *
 * @generated from message clarifai.api.GetTeamRequest
 */
export class GetTeamRequest extends Message<GetTeamRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetTeamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetTeamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamRequest | PlainMessage<GetTeamRequest> | undefined, b: GetTeamRequest | PlainMessage<GetTeamRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamRequest, a, b);
  }
}

/**
 * PatchTeamsRequest
 *
 * @generated from message clarifai.api.PatchTeamsRequest
 */
export class PatchTeamsRequest extends Message<PatchTeamsRequest> {
  /**
   * @generated from field: repeated clarifai.api.Team teams = 1;
   */
  teams: Team[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 2;
   */
  action = "";

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PatchTeamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchTeamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "teams", kind: "message", T: Team, repeated: true },
    { no: 2, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchTeamsRequest {
    return new PatchTeamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchTeamsRequest {
    return new PatchTeamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchTeamsRequest {
    return new PatchTeamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchTeamsRequest | PlainMessage<PatchTeamsRequest> | undefined, b: PatchTeamsRequest | PlainMessage<PatchTeamsRequest> | undefined): boolean {
    return proto3.util.equals(PatchTeamsRequest, a, b);
  }
}

/**
 * DeleteTeamsRequest
 *
 * @generated from message clarifai.api.DeleteTeamsRequest
 */
export class DeleteTeamsRequest extends Message<DeleteTeamsRequest> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 2;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<DeleteTeamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteTeamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTeamsRequest {
    return new DeleteTeamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTeamsRequest {
    return new DeleteTeamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTeamsRequest {
    return new DeleteTeamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTeamsRequest | PlainMessage<DeleteTeamsRequest> | undefined, b: DeleteTeamsRequest | PlainMessage<DeleteTeamsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTeamsRequest, a, b);
  }
}

/**
 * SingleTeamResponse
 *
 * @generated from message clarifai.api.SingleTeamResponse
 */
export class SingleTeamResponse extends Message<SingleTeamResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Team team = 2;
   */
  team?: Team;

  constructor(data?: PartialMessage<SingleTeamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleTeamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "team", kind: "message", T: Team },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleTeamResponse {
    return new SingleTeamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleTeamResponse {
    return new SingleTeamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleTeamResponse {
    return new SingleTeamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleTeamResponse | PlainMessage<SingleTeamResponse> | undefined, b: SingleTeamResponse | PlainMessage<SingleTeamResponse> | undefined): boolean {
    return proto3.util.equals(SingleTeamResponse, a, b);
  }
}

/**
 * MultiTeamResponse
 *
 * @generated from message clarifai.api.MultiTeamResponse
 */
export class MultiTeamResponse extends Message<MultiTeamResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Team teams = 2;
   */
  teams: Team[] = [];

  constructor(data?: PartialMessage<MultiTeamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiTeamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "teams", kind: "message", T: Team, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiTeamResponse {
    return new MultiTeamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiTeamResponse {
    return new MultiTeamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiTeamResponse {
    return new MultiTeamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiTeamResponse | PlainMessage<MultiTeamResponse> | undefined, b: MultiTeamResponse | PlainMessage<MultiTeamResponse> | undefined): boolean {
    return proto3.util.equals(MultiTeamResponse, a, b);
  }
}

/**
 * AppIdentity
 *
 * @generated from message clarifai.api.AppIdentity
 */
export class AppIdentity extends Message<AppIdentity> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string app_id = 2;
   */
  appId = "";

  constructor(data?: PartialMessage<AppIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.AppIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppIdentity {
    return new AppIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppIdentity {
    return new AppIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppIdentity {
    return new AppIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: AppIdentity | PlainMessage<AppIdentity> | undefined, b: AppIdentity | PlainMessage<AppIdentity> | undefined): boolean {
    return proto3.util.equals(AppIdentity, a, b);
  }
}

/**
 * ListTeamAppsRequest
 *
 * @generated from message clarifai.api.ListTeamAppsRequest
 */
export class ListTeamAppsRequest extends Message<ListTeamAppsRequest> {
  /**
   * @generated from field: string team_id = 1;
   */
  teamId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  /**
   * Provide a search query to filter apps by id and name.
   * This supports wildcard queries.
   * For example, the value "*foo*" will match any app whose id or name contains "foo".
   * The search is case-insensitive.
   *
   * @generated from field: string query = 4;
   */
  query = "";

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 5;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListTeamAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListTeamAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTeamAppsRequest {
    return new ListTeamAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTeamAppsRequest {
    return new ListTeamAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTeamAppsRequest {
    return new ListTeamAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTeamAppsRequest | PlainMessage<ListTeamAppsRequest> | undefined, b: ListTeamAppsRequest | PlainMessage<ListTeamAppsRequest> | undefined): boolean {
    return proto3.util.equals(ListTeamAppsRequest, a, b);
  }
}

/**
 * PostTeamAppsRequest
 *
 * @generated from message clarifai.api.PostTeamAppsRequest
 */
export class PostTeamAppsRequest extends Message<PostTeamAppsRequest> {
  /**
   * @generated from field: string team_id = 1;
   */
  teamId = "";

  /**
   * @generated from field: repeated clarifai.api.PostTeamAppsRequest.TeamApp apps = 2;
   */
  apps: PostTeamAppsRequest_TeamApp[] = [];

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostTeamAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostTeamAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apps", kind: "message", T: PostTeamAppsRequest_TeamApp, repeated: true },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostTeamAppsRequest {
    return new PostTeamAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostTeamAppsRequest {
    return new PostTeamAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostTeamAppsRequest {
    return new PostTeamAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostTeamAppsRequest | PlainMessage<PostTeamAppsRequest> | undefined, b: PostTeamAppsRequest | PlainMessage<PostTeamAppsRequest> | undefined): boolean {
    return proto3.util.equals(PostTeamAppsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.PostTeamAppsRequest.TeamApp
 */
export class PostTeamAppsRequest_TeamApp extends Message<PostTeamAppsRequest_TeamApp> {
  /**
   * removing the AppIdentity, this was only needed when you could add any app to a team, rn only apps from the same org can be added so we implicitly already
   * know which user the app belongs that is added. It's a breaking change but it's OK since this was never public.
   * AppIdentity app = 1;
   *
   * @generated from field: string app_id = 1;
   */
  appId = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  constructor(data?: PartialMessage<PostTeamAppsRequest_TeamApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostTeamAppsRequest.TeamApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostTeamAppsRequest_TeamApp {
    return new PostTeamAppsRequest_TeamApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostTeamAppsRequest_TeamApp {
    return new PostTeamAppsRequest_TeamApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostTeamAppsRequest_TeamApp {
    return new PostTeamAppsRequest_TeamApp().fromJsonString(jsonString, options);
  }

  static equals(a: PostTeamAppsRequest_TeamApp | PlainMessage<PostTeamAppsRequest_TeamApp> | undefined, b: PostTeamAppsRequest_TeamApp | PlainMessage<PostTeamAppsRequest_TeamApp> | undefined): boolean {
    return proto3.util.equals(PostTeamAppsRequest_TeamApp, a, b);
  }
}

/**
 * DeleteTeamAppsRequest
 *
 * @generated from message clarifai.api.DeleteTeamAppsRequest
 */
export class DeleteTeamAppsRequest extends Message<DeleteTeamAppsRequest> {
  /**
   * @generated from field: string team_id = 1;
   */
  teamId = "";

  /**
   * @generated from field: repeated string app_ids = 2;
   */
  appIds: string[] = [];

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<DeleteTeamAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteTeamAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTeamAppsRequest {
    return new DeleteTeamAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTeamAppsRequest {
    return new DeleteTeamAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTeamAppsRequest {
    return new DeleteTeamAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTeamAppsRequest | PlainMessage<DeleteTeamAppsRequest> | undefined, b: DeleteTeamAppsRequest | PlainMessage<DeleteTeamAppsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTeamAppsRequest, a, b);
  }
}

/**
 * MultiTeamAppsResponse
 *
 * @generated from message clarifai.api.MultiTeamAppsResponse
 */
export class MultiTeamAppsResponse extends Message<MultiTeamAppsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.MultiTeamAppsResponse.TeamApp apps = 2;
   */
  apps: MultiTeamAppsResponse_TeamApp[] = [];

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<MultiTeamAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiTeamAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "apps", kind: "message", T: MultiTeamAppsResponse_TeamApp, repeated: true },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiTeamAppsResponse {
    return new MultiTeamAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiTeamAppsResponse {
    return new MultiTeamAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiTeamAppsResponse {
    return new MultiTeamAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiTeamAppsResponse | PlainMessage<MultiTeamAppsResponse> | undefined, b: MultiTeamAppsResponse | PlainMessage<MultiTeamAppsResponse> | undefined): boolean {
    return proto3.util.equals(MultiTeamAppsResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiTeamAppsResponse.TeamApp
 */
export class MultiTeamAppsResponse_TeamApp extends Message<MultiTeamAppsResponse_TeamApp> {
  /**
   * @generated from field: string team_id = 1;
   */
  teamId = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  /**
   * todo(margus) should we get rid of this AppIdentity message? it made sense when teams was global but now that is is org scoped it kind of could be removed
   *
   * @generated from field: clarifai.api.AppIdentity app = 3;
   */
  app?: AppIdentity;

  /**
   * @generated from field: string app_name = 4;
   */
  appName = "";

  /**
   * @generated from field: string role_name = 5;
   */
  roleName = "";

  constructor(data?: PartialMessage<MultiTeamAppsResponse_TeamApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiTeamAppsResponse.TeamApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "app", kind: "message", T: AppIdentity },
    { no: 4, name: "app_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiTeamAppsResponse_TeamApp {
    return new MultiTeamAppsResponse_TeamApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiTeamAppsResponse_TeamApp {
    return new MultiTeamAppsResponse_TeamApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiTeamAppsResponse_TeamApp {
    return new MultiTeamAppsResponse_TeamApp().fromJsonString(jsonString, options);
  }

  static equals(a: MultiTeamAppsResponse_TeamApp | PlainMessage<MultiTeamAppsResponse_TeamApp> | undefined, b: MultiTeamAppsResponse_TeamApp | PlainMessage<MultiTeamAppsResponse_TeamApp> | undefined): boolean {
    return proto3.util.equals(MultiTeamAppsResponse_TeamApp, a, b);
  }
}

/**
 * PostTeamUsersRequest
 *
 * @generated from message clarifai.api.PostTeamUsersRequest
 */
export class PostTeamUsersRequest extends Message<PostTeamUsersRequest> {
  /**
   * @generated from field: string team_id = 1;
   */
  teamId = "";

  /**
   * @generated from field: repeated string user_ids = 2;
   */
  userIds: string[] = [];

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<PostTeamUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostTeamUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostTeamUsersRequest {
    return new PostTeamUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostTeamUsersRequest {
    return new PostTeamUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostTeamUsersRequest {
    return new PostTeamUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostTeamUsersRequest | PlainMessage<PostTeamUsersRequest> | undefined, b: PostTeamUsersRequest | PlainMessage<PostTeamUsersRequest> | undefined): boolean {
    return proto3.util.equals(PostTeamUsersRequest, a, b);
  }
}

/**
 * ListTeamUsersRequest
 *
 * @generated from message clarifai.api.ListTeamUsersRequest
 */
export class ListTeamUsersRequest extends Message<ListTeamUsersRequest> {
  /**
   * @generated from field: string team_id = 1;
   */
  teamId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 20.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  /**
   * Provide a search query to filter team users by id, first name and last name.
   * This supports wildcard queries.
   *   For example, the value "*foo*" will match any team user whose id, first name or last name contains "foo".
   * The search is case-insensitive.
   *
   * @generated from field: string query = 4;
   */
  query = "";

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 5;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListTeamUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListTeamUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTeamUsersRequest {
    return new ListTeamUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTeamUsersRequest {
    return new ListTeamUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTeamUsersRequest {
    return new ListTeamUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTeamUsersRequest | PlainMessage<ListTeamUsersRequest> | undefined, b: ListTeamUsersRequest | PlainMessage<ListTeamUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListTeamUsersRequest, a, b);
  }
}

/**
 * DeleteTeamUsersRequest
 *
 * @generated from message clarifai.api.DeleteTeamUsersRequest
 */
export class DeleteTeamUsersRequest extends Message<DeleteTeamUsersRequest> {
  /**
   * @generated from field: string team_id = 1;
   */
  teamId = "";

  /**
   * @generated from field: repeated string user_ids = 2;
   */
  userIds: string[] = [];

  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 3;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<DeleteTeamUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteTeamUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTeamUsersRequest {
    return new DeleteTeamUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTeamUsersRequest {
    return new DeleteTeamUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTeamUsersRequest {
    return new DeleteTeamUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTeamUsersRequest | PlainMessage<DeleteTeamUsersRequest> | undefined, b: DeleteTeamUsersRequest | PlainMessage<DeleteTeamUsersRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTeamUsersRequest, a, b);
  }
}

/**
 * MultiTeamUserResponse
 *
 * @generated from message clarifai.api.MultiTeamUserResponse
 */
export class MultiTeamUserResponse extends Message<MultiTeamUserResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.TeamUser team_users = 2;
   */
  teamUsers: TeamUser[] = [];

  constructor(data?: PartialMessage<MultiTeamUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiTeamUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "team_users", kind: "message", T: TeamUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiTeamUserResponse {
    return new MultiTeamUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiTeamUserResponse {
    return new MultiTeamUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiTeamUserResponse {
    return new MultiTeamUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiTeamUserResponse | PlainMessage<MultiTeamUserResponse> | undefined, b: MultiTeamUserResponse | PlainMessage<MultiTeamUserResponse> | undefined): boolean {
    return proto3.util.equals(MultiTeamUserResponse, a, b);
  }
}

/**
 * ListRolesRequest
 *
 * @generated from message clarifai.api.ListRolesRequest
 */
export class ListRolesRequest extends Message<ListRolesRequest> {
  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 1;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 20.
   *
   * @generated from field: uint32 per_page = 2;
   */
  perPage = 0;

  /**
   * Optional query parameter that will add filter by type. Possible values 'ORG' or 'TEAM'.
   *
   * @generated from field: repeated clarifai.api.RoleType types = 3;
   */
  types: RoleType[] = [];

  constructor(data?: PartialMessage<ListRolesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListRolesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "types", kind: "enum", T: proto3.getEnumType(RoleType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesRequest | PlainMessage<ListRolesRequest> | undefined, b: ListRolesRequest | PlainMessage<ListRolesRequest> | undefined): boolean {
    return proto3.util.equals(ListRolesRequest, a, b);
  }
}

/**
 * GetRoleRequest
 *
 * @generated from message clarifai.api.GetRoleRequest
 */
export class GetRoleRequest extends Message<GetRoleRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoleRequest | PlainMessage<GetRoleRequest> | undefined, b: GetRoleRequest | PlainMessage<GetRoleRequest> | undefined): boolean {
    return proto3.util.equals(GetRoleRequest, a, b);
  }
}

/**
 * SingleRoleResponse
 *
 * @generated from message clarifai.api.SingleRoleResponse
 */
export class SingleRoleResponse extends Message<SingleRoleResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Role role = 2;
   */
  role?: Role;

  constructor(data?: PartialMessage<SingleRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleRoleResponse {
    return new SingleRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleRoleResponse {
    return new SingleRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleRoleResponse {
    return new SingleRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleRoleResponse | PlainMessage<SingleRoleResponse> | undefined, b: SingleRoleResponse | PlainMessage<SingleRoleResponse> | undefined): boolean {
    return proto3.util.equals(SingleRoleResponse, a, b);
  }
}

/**
 * MultiRoleResponse
 *
 * @generated from message clarifai.api.MultiRoleResponse
 */
export class MultiRoleResponse extends Message<MultiRoleResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Role roles = 2;
   */
  roles: Role[] = [];

  constructor(data?: PartialMessage<MultiRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "roles", kind: "message", T: Role, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiRoleResponse {
    return new MultiRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiRoleResponse {
    return new MultiRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiRoleResponse {
    return new MultiRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiRoleResponse | PlainMessage<MultiRoleResponse> | undefined, b: MultiRoleResponse | PlainMessage<MultiRoleResponse> | undefined): boolean {
    return proto3.util.equals(MultiRoleResponse, a, b);
  }
}

/**
 * GET single vocab by id.
 *
 * @generated from message clarifai.api.GetVocabRequest
 */
export class GetVocabRequest extends Message<GetVocabRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string vocab_id = 2;
   */
  vocabId = "";

  constructor(data?: PartialMessage<GetVocabRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetVocabRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "vocab_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVocabRequest {
    return new GetVocabRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVocabRequest {
    return new GetVocabRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVocabRequest {
    return new GetVocabRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVocabRequest | PlainMessage<GetVocabRequest> | undefined, b: GetVocabRequest | PlainMessage<GetVocabRequest> | undefined): boolean {
    return proto3.util.equals(GetVocabRequest, a, b);
  }
}

/**
 * List multiple vocabs.
 *
 * @generated from message clarifai.api.ListVocabsRequest
 */
export class ListVocabsRequest extends Message<ListVocabsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListVocabsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListVocabsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListVocabsRequest {
    return new ListVocabsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListVocabsRequest {
    return new ListVocabsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListVocabsRequest {
    return new ListVocabsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListVocabsRequest | PlainMessage<ListVocabsRequest> | undefined, b: ListVocabsRequest | PlainMessage<ListVocabsRequest> | undefined): boolean {
    return proto3.util.equals(ListVocabsRequest, a, b);
  }
}

/**
 * POST new vocabs with this.
 *
 * @generated from message clarifai.api.PostVocabsRequest
 */
export class PostVocabsRequest extends Message<PostVocabsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Vocab vocabs = 2;
   */
  vocabs: Vocab[] = [];

  constructor(data?: PartialMessage<PostVocabsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostVocabsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "vocabs", kind: "message", T: Vocab, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostVocabsRequest {
    return new PostVocabsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostVocabsRequest {
    return new PostVocabsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostVocabsRequest {
    return new PostVocabsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostVocabsRequest | PlainMessage<PostVocabsRequest> | undefined, b: PostVocabsRequest | PlainMessage<PostVocabsRequest> | undefined): boolean {
    return proto3.util.equals(PostVocabsRequest, a, b);
  }
}

/**
 * PATCH one or more vocabs with this endpoint.
 *
 * @generated from message clarifai.api.PatchVocabsRequest
 */
export class PatchVocabsRequest extends Message<PatchVocabsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The list of updates fields for the vocabs. Must have the "id" field set so that it can match on
   * of the existing vocabs.
   *
   * @generated from field: repeated clarifai.api.Vocab vocabs = 2;
   */
  vocabs: Vocab[] = [];

  /**
   * The action to perform on the patched objects
   * For now only action 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchVocabsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchVocabsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "vocabs", kind: "message", T: Vocab, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchVocabsRequest {
    return new PatchVocabsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchVocabsRequest {
    return new PatchVocabsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchVocabsRequest {
    return new PatchVocabsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchVocabsRequest | PlainMessage<PatchVocabsRequest> | undefined, b: PatchVocabsRequest | PlainMessage<PatchVocabsRequest> | undefined): boolean {
    return proto3.util.equals(PatchVocabsRequest, a, b);
  }
}

/**
 * DeleteVocabRequest
 *
 * @generated from message clarifai.api.DeleteVocabRequest
 */
export class DeleteVocabRequest extends Message<DeleteVocabRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string vocab_id = 2;
   */
  vocabId = "";

  constructor(data?: PartialMessage<DeleteVocabRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteVocabRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "vocab_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVocabRequest {
    return new DeleteVocabRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVocabRequest {
    return new DeleteVocabRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVocabRequest {
    return new DeleteVocabRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVocabRequest | PlainMessage<DeleteVocabRequest> | undefined, b: DeleteVocabRequest | PlainMessage<DeleteVocabRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVocabRequest, a, b);
  }
}

/**
 * Request to delete several things by the list of ids.
 *
 * @generated from message clarifai.api.DeleteVocabsRequest
 */
export class DeleteVocabsRequest extends Message<DeleteVocabsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  /**
   * @generated from field: bool delete_all = 3;
   */
  deleteAll = false;

  constructor(data?: PartialMessage<DeleteVocabsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteVocabsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "delete_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVocabsRequest {
    return new DeleteVocabsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVocabsRequest {
    return new DeleteVocabsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVocabsRequest {
    return new DeleteVocabsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVocabsRequest | PlainMessage<DeleteVocabsRequest> | undefined, b: DeleteVocabsRequest | PlainMessage<DeleteVocabsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVocabsRequest, a, b);
  }
}

/**
 * List concepts in a vocab. There is
 *
 * @generated from message clarifai.api.ListVocabConceptsRequest
 */
export class ListVocabConceptsRequest extends Message<ListVocabConceptsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string vocab_id = 2;
   */
  vocabId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListVocabConceptsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListVocabConceptsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "vocab_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListVocabConceptsRequest {
    return new ListVocabConceptsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListVocabConceptsRequest {
    return new ListVocabConceptsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListVocabConceptsRequest {
    return new ListVocabConceptsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListVocabConceptsRequest | PlainMessage<ListVocabConceptsRequest> | undefined, b: ListVocabConceptsRequest | PlainMessage<ListVocabConceptsRequest> | undefined): boolean {
    return proto3.util.equals(ListVocabConceptsRequest, a, b);
  }
}

/**
 * Add a concept(s) to the END of the vocab list.
 *
 * @generated from message clarifai.api.PostVocabConceptsRequest
 */
export class PostVocabConceptsRequest extends Message<PostVocabConceptsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string vocab_id = 2;
   */
  vocabId = "";

  /**
   * @generated from field: repeated clarifai.api.Concept concepts = 3;
   */
  concepts: Concept[] = [];

  constructor(data?: PartialMessage<PostVocabConceptsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostVocabConceptsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "vocab_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "concepts", kind: "message", T: Concept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostVocabConceptsRequest {
    return new PostVocabConceptsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostVocabConceptsRequest {
    return new PostVocabConceptsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostVocabConceptsRequest {
    return new PostVocabConceptsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostVocabConceptsRequest | PlainMessage<PostVocabConceptsRequest> | undefined, b: PostVocabConceptsRequest | PlainMessage<PostVocabConceptsRequest> | undefined): boolean {
    return proto3.util.equals(PostVocabConceptsRequest, a, b);
  }
}

/**
 * This lets you delete a specific concept from the vocab (not from your app).
 *
 * @generated from message clarifai.api.DeleteVocabConceptRequest
 */
export class DeleteVocabConceptRequest extends Message<DeleteVocabConceptRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string vocab_id = 2;
   */
  vocabId = "";

  /**
   * @generated from field: string concept_id = 3;
   */
  conceptId = "";

  constructor(data?: PartialMessage<DeleteVocabConceptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteVocabConceptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "vocab_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVocabConceptRequest {
    return new DeleteVocabConceptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVocabConceptRequest {
    return new DeleteVocabConceptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVocabConceptRequest {
    return new DeleteVocabConceptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVocabConceptRequest | PlainMessage<DeleteVocabConceptRequest> | undefined, b: DeleteVocabConceptRequest | PlainMessage<DeleteVocabConceptRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVocabConceptRequest, a, b);
  }
}

/**
 * Request to delete several concepts from vocab by the list of ids.
 * The delete_all in this case will empty the vocab to start over.
 * In either case the concepts will remain in your app.
 *
 * @generated from message clarifai.api.DeleteVocabConceptsRequest
 */
export class DeleteVocabConceptsRequest extends Message<DeleteVocabConceptsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string vocab_id = 2;
   */
  vocabId = "";

  /**
   * @generated from field: repeated string ids = 3;
   */
  ids: string[] = [];

  /**
   * @generated from field: bool delete_all = 4;
   */
  deleteAll = false;

  constructor(data?: PartialMessage<DeleteVocabConceptsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteVocabConceptsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "vocab_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "delete_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVocabConceptsRequest {
    return new DeleteVocabConceptsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVocabConceptsRequest {
    return new DeleteVocabConceptsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVocabConceptsRequest {
    return new DeleteVocabConceptsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVocabConceptsRequest | PlainMessage<DeleteVocabConceptsRequest> | undefined, b: DeleteVocabConceptsRequest | PlainMessage<DeleteVocabConceptsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVocabConceptsRequest, a, b);
  }
}

/**
 * A single vocab to return.
 *
 * @generated from message clarifai.api.SingleVocabResponse
 */
export class SingleVocabResponse extends Message<SingleVocabResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Vocab vocab = 2;
   */
  vocab?: Vocab;

  constructor(data?: PartialMessage<SingleVocabResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleVocabResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "vocab", kind: "message", T: Vocab },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleVocabResponse {
    return new SingleVocabResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleVocabResponse {
    return new SingleVocabResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleVocabResponse {
    return new SingleVocabResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleVocabResponse | PlainMessage<SingleVocabResponse> | undefined, b: SingleVocabResponse | PlainMessage<SingleVocabResponse> | undefined): boolean {
    return proto3.util.equals(SingleVocabResponse, a, b);
  }
}

/**
 * Multiple vocabs to return.
 *
 * @generated from message clarifai.api.MultiVocabResponse
 */
export class MultiVocabResponse extends Message<MultiVocabResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Vocab vocabs = 2;
   */
  vocabs: Vocab[] = [];

  constructor(data?: PartialMessage<MultiVocabResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiVocabResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "vocabs", kind: "message", T: Vocab, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiVocabResponse {
    return new MultiVocabResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiVocabResponse {
    return new MultiVocabResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiVocabResponse {
    return new MultiVocabResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiVocabResponse | PlainMessage<MultiVocabResponse> | undefined, b: MultiVocabResponse | PlainMessage<MultiVocabResponse> | undefined): boolean {
    return proto3.util.equals(MultiVocabResponse, a, b);
  }
}

/**
 * GetWorkflowRequest
 *
 * @generated from message clarifai.api.GetWorkflowRequest
 */
export class GetWorkflowRequest extends Message<GetWorkflowRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Workflow ID to retrieve
   * If no ID is specified we return default workflow of the application
   * If an ID is specified by default we first looks into Clarifai workflows for a Workflow ID
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Use this flag to look into clarifai published workflows first for a Workflow ID
   *
   * @generated from field: bool favor_clarifai_workflows = 3;
   */
  favorClarifaiWorkflows = false;

  /**
   * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
   *
   * @generated from field: repeated string additional_fields = 4;
   */
  additionalFields: string[] = [];

  /**
   * if true will not expand search to clarifai workflows
   *
   * @generated from field: bool exclude_clarifai_workflows = 5;
   */
  excludeClarifaiWorkflows = false;

  constructor(data?: PartialMessage<GetWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "favor_clarifai_workflows", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "exclude_clarifai_workflows", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkflowRequest {
    return new GetWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkflowRequest {
    return new GetWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkflowRequest {
    return new GetWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkflowRequest | PlainMessage<GetWorkflowRequest> | undefined, b: GetWorkflowRequest | PlainMessage<GetWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkflowRequest, a, b);
  }
}

/**
 * ListWorkflowsRequest
 *
 * @generated from message clarifai.api.ListWorkflowsRequest
 */
export class ListWorkflowsRequest extends Message<ListWorkflowsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  /**
   * Sorting options:
   * Whether to sort in ascending order. If false, will order in descending order.
   *
   * @generated from field: bool sort_ascending = 5;
   */
  sortAscending = false;

  /**
   * @generated from oneof clarifai.api.ListWorkflowsRequest.sort_by
   */
  sortBy: {
    /**
     * Whether to order by the name
     *
     * @generated from field: bool sort_by_id = 6;
     */
    value: boolean;
    case: "sortById";
  } | {
    /**
     * Whether to order by the modified_at time.
     * If neither sort option is set to true, will sort by modified_at.
     *
     * @generated from field: bool sort_by_modified_at = 7;
     */
    value: boolean;
    case: "sortByModifiedAt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Query various text fields that can contain the words in the query string.
   *
   * @generated from field: string query = 8;
   */
  query = "";

  /**
   * Filter by the id of the workflow. This supports wilcard queries like "gen*" to match "general" as an example.
   * Deprecated in favor of query
   *
   * @generated from field: string id = 4 [deprecated = true];
   * @deprecated
   */
  id = "";

  /**
   * If true, we only return workflows that are handpicked by clarifai staff
   *
   * @generated from field: bool featured_only = 9;
   */
  featuredOnly = false;

  /**
   * If true, we only return workflows that are starred by the requesting user
   *
   * @generated from field: bool starred_only = 11;
   */
  starredOnly = false;

  /**
   * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
   *
   * @generated from field: repeated string additional_fields = 10;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<ListWorkflowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListWorkflowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "sort_ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "sort_by_id", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 7, name: "sort_by_modified_at", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "sort_by" },
    { no: 8, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "featured_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "starred_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkflowsRequest {
    return new ListWorkflowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkflowsRequest {
    return new ListWorkflowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkflowsRequest {
    return new ListWorkflowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkflowsRequest | PlainMessage<ListWorkflowsRequest> | undefined, b: ListWorkflowsRequest | PlainMessage<ListWorkflowsRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkflowsRequest, a, b);
  }
}

/**
 * ListPublicWorkflowsRequest
 *
 * @generated from message clarifai.api.ListPublicWorkflowsRequest
 */
export class ListPublicWorkflowsRequest extends Message<ListPublicWorkflowsRequest> {
  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 1;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page.
   * Defaults to 128.
   *
   * @generated from field: uint32 per_page = 2;
   */
  perPage = 0;

  /**
   * Return only base workflows.
   *
   * @generated from field: bool only_base = 3;
   */
  onlyBase = false;

  /**
   * The caller user_id
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 4;
   */
  userAppId?: UserAppIDSet;

  constructor(data?: PartialMessage<ListPublicWorkflowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListPublicWorkflowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "only_base", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "user_app_id", kind: "message", T: UserAppIDSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPublicWorkflowsRequest {
    return new ListPublicWorkflowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPublicWorkflowsRequest {
    return new ListPublicWorkflowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPublicWorkflowsRequest {
    return new ListPublicWorkflowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPublicWorkflowsRequest | PlainMessage<ListPublicWorkflowsRequest> | undefined, b: ListPublicWorkflowsRequest | PlainMessage<ListPublicWorkflowsRequest> | undefined): boolean {
    return proto3.util.equals(ListPublicWorkflowsRequest, a, b);
  }
}

/**
 * PostWorkflowsRequest
 *
 * @generated from message clarifai.api.PostWorkflowsRequest
 */
export class PostWorkflowsRequest extends Message<PostWorkflowsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Workflow workflows = 2;
   */
  workflows: Workflow[] = [];

  constructor(data?: PartialMessage<PostWorkflowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflows", kind: "message", T: Workflow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowsRequest {
    return new PostWorkflowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowsRequest {
    return new PostWorkflowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowsRequest {
    return new PostWorkflowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowsRequest | PlainMessage<PostWorkflowsRequest> | undefined, b: PostWorkflowsRequest | PlainMessage<PostWorkflowsRequest> | undefined): boolean {
    return proto3.util.equals(PostWorkflowsRequest, a, b);
  }
}

/**
 * PatchWorkflowsRequest
 *
 * @generated from message clarifai.api.PatchWorkflowsRequest
 */
export class PatchWorkflowsRequest extends Message<PatchWorkflowsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Workflow workflows = 2;
   */
  workflows: Workflow[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchWorkflowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchWorkflowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflows", kind: "message", T: Workflow, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchWorkflowsRequest {
    return new PatchWorkflowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchWorkflowsRequest {
    return new PatchWorkflowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchWorkflowsRequest {
    return new PatchWorkflowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchWorkflowsRequest | PlainMessage<PatchWorkflowsRequest> | undefined, b: PatchWorkflowsRequest | PlainMessage<PatchWorkflowsRequest> | undefined): boolean {
    return proto3.util.equals(PatchWorkflowsRequest, a, b);
  }
}

/**
 * DeleteWorkflowRequest
 *
 * @generated from message clarifai.api.DeleteWorkflowRequest
 */
export class DeleteWorkflowRequest extends Message<DeleteWorkflowRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  constructor(data?: PartialMessage<DeleteWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkflowRequest {
    return new DeleteWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkflowRequest {
    return new DeleteWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkflowRequest {
    return new DeleteWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkflowRequest | PlainMessage<DeleteWorkflowRequest> | undefined, b: DeleteWorkflowRequest | PlainMessage<DeleteWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWorkflowRequest, a, b);
  }
}

/**
 * Request to delete several things by the list of ids.
 *
 * @generated from message clarifai.api.DeleteWorkflowsRequest
 */
export class DeleteWorkflowsRequest extends Message<DeleteWorkflowsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  /**
   * @generated from field: bool delete_all = 3;
   */
  deleteAll = false;

  constructor(data?: PartialMessage<DeleteWorkflowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteWorkflowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "delete_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkflowsRequest {
    return new DeleteWorkflowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkflowsRequest {
    return new DeleteWorkflowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkflowsRequest {
    return new DeleteWorkflowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkflowsRequest | PlainMessage<DeleteWorkflowsRequest> | undefined, b: DeleteWorkflowsRequest | PlainMessage<DeleteWorkflowsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWorkflowsRequest, a, b);
  }
}

/**
 * SingleWorkflowResponse
 *
 * @generated from message clarifai.api.SingleWorkflowResponse
 */
export class SingleWorkflowResponse extends Message<SingleWorkflowResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Workflow workflow = 2;
   */
  workflow?: Workflow;

  constructor(data?: PartialMessage<SingleWorkflowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleWorkflowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflow", kind: "message", T: Workflow },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleWorkflowResponse {
    return new SingleWorkflowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleWorkflowResponse {
    return new SingleWorkflowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleWorkflowResponse {
    return new SingleWorkflowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleWorkflowResponse | PlainMessage<SingleWorkflowResponse> | undefined, b: SingleWorkflowResponse | PlainMessage<SingleWorkflowResponse> | undefined): boolean {
    return proto3.util.equals(SingleWorkflowResponse, a, b);
  }
}

/**
 * MultiWorkflowResponse
 *
 * @generated from message clarifai.api.MultiWorkflowResponse
 */
export class MultiWorkflowResponse extends Message<MultiWorkflowResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Workflow workflows = 2;
   */
  workflows: Workflow[] = [];

  constructor(data?: PartialMessage<MultiWorkflowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiWorkflowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflows", kind: "message", T: Workflow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiWorkflowResponse {
    return new MultiWorkflowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiWorkflowResponse {
    return new MultiWorkflowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiWorkflowResponse {
    return new MultiWorkflowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiWorkflowResponse | PlainMessage<MultiWorkflowResponse> | undefined, b: MultiWorkflowResponse | PlainMessage<MultiWorkflowResponse> | undefined): boolean {
    return proto3.util.equals(MultiWorkflowResponse, a, b);
  }
}

/**
 * PostWorkflowResultsRequest
 *
 * @generated from message clarifai.api.PostWorkflowResultsRequest
 */
export class PostWorkflowResultsRequest extends Message<PostWorkflowResultsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Workflow ID to retrieve
   * If no ID is specified we return default workflow of the application
   * If an ID is specified by default we first looks into Clarifai workflows for a Workflow ID
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Workflow version ID to retrieve
   * If no ID is specified, latest workflow version is used
   *
   * @generated from field: string version_id = 7;
   */
  versionId = "";

  /**
   * @generated from field: repeated clarifai.api.Input inputs = 3;
   */
  inputs: Input[] = [];

  /**
   * FIXME(zeiler): the request for post workflows is using an outputconfig object that is supposed
   * to be within models. This is not consistent with setting this on the request for post model
   * outputs where it is inside a model object. To make this consistent we would send in the
   * workflow object so that each model can have it's own output config. If nobody is setting
   * this OutputConfig it would probably be easier to just remove it for now to keep things simpler
   * and then it's more consistent we just don't support the OutputConfig on workflows.
   *
   * @generated from field: clarifai.api.OutputConfig output_config = 4;
   */
  outputConfig?: OutputConfig;

  /**
   * Use this flag to look into clarifai published workflows first for a Workflow ID
   *
   * @generated from field: bool favor_clarifai_workflows = 5;
   */
  favorClarifaiWorkflows = false;

  /**
   * A workflow state to be maintained across PostWorkflowResults requests/responses.
   * If it is not sent in the initial request with workflow_state.id = "init" then no
   * state will be saved or returned in PostWorkflowResultsResponse.
   *
   * @generated from field: clarifai.api.WorkflowState workflow_state = 6;
   */
  workflowState?: WorkflowState;

  constructor(data?: PartialMessage<PostWorkflowResultsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowResultsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "inputs", kind: "message", T: Input, repeated: true },
    { no: 4, name: "output_config", kind: "message", T: OutputConfig },
    { no: 5, name: "favor_clarifai_workflows", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "workflow_state", kind: "message", T: WorkflowState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowResultsRequest {
    return new PostWorkflowResultsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowResultsRequest {
    return new PostWorkflowResultsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowResultsRequest {
    return new PostWorkflowResultsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowResultsRequest | PlainMessage<PostWorkflowResultsRequest> | undefined, b: PostWorkflowResultsRequest | PlainMessage<PostWorkflowResultsRequest> | undefined): boolean {
    return proto3.util.equals(PostWorkflowResultsRequest, a, b);
  }
}

/**
 * PostWorkflowResultsResponse
 *
 * @generated from message clarifai.api.PostWorkflowResultsResponse
 */
export class PostWorkflowResultsResponse extends Message<PostWorkflowResultsResponse> {
  /**
   * The status of the request.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The workflow that was used in predictions with PostWorkflowResults
   *
   * @generated from field: clarifai.api.Workflow workflow = 2;
   */
  workflow?: Workflow;

  /**
   * The resulting predictions of all models in the workflow.
   *
   * @generated from field: repeated clarifai.api.WorkflowResult results = 3;
   */
  results: WorkflowResult[] = [];

  /**
   * A workflow state to be maintained across PostWorkflowResults requests/responses.
   * This WorkflowState should be passed in to subsequent PostWorkflowResults calls
   * if you want to keep track of state across requests.
   * If no WorkflowState was initialized in a request then no WorkflowState will be returned in this
   * response.
   *
   * @generated from field: clarifai.api.WorkflowState workflow_state = 4;
   */
  workflowState?: WorkflowState;

  constructor(data?: PartialMessage<PostWorkflowResultsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowResultsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflow", kind: "message", T: Workflow },
    { no: 3, name: "results", kind: "message", T: WorkflowResult, repeated: true },
    { no: 4, name: "workflow_state", kind: "message", T: WorkflowState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowResultsResponse {
    return new PostWorkflowResultsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowResultsResponse {
    return new PostWorkflowResultsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowResultsResponse {
    return new PostWorkflowResultsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowResultsResponse | PlainMessage<PostWorkflowResultsResponse> | undefined, b: PostWorkflowResultsResponse | PlainMessage<PostWorkflowResultsResponse> | undefined): boolean {
    return proto3.util.equals(PostWorkflowResultsResponse, a, b);
  }
}

/**
 * PostWorkflowResultsSimilarityRequest
 *
 * @generated from message clarifai.api.PostWorkflowResultsSimilarityRequest
 */
export class PostWorkflowResultsSimilarityRequest extends Message<PostWorkflowResultsSimilarityRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Workflow version ID to retrieve
   * If no ID is specified, latest workflow version is used
   *
   * @generated from field: string version_id = 7;
   */
  versionId = "";

  /**
   * The specific model version whose outputs we are comparing
   *
   * @generated from field: string model_version_id = 3;
   */
  modelVersionId = "";

  /**
   * Each probe is compared against every pool input
   *
   * @generated from field: repeated clarifai.api.Input probe_inputs = 4;
   */
  probeInputs: Input[] = [];

  /**
   * Each pool input is compared against ever probe input
   *
   * @generated from field: repeated clarifai.api.Input pool_inputs = 5;
   */
  poolInputs: Input[] = [];

  /**
   * Use this flag to look into clarifai published workflows first for a Workflow ID
   *
   * @generated from field: bool favor_clarifai_workflows = 6;
   */
  favorClarifaiWorkflows = false;

  constructor(data?: PartialMessage<PostWorkflowResultsSimilarityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowResultsSimilarityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "probe_inputs", kind: "message", T: Input, repeated: true },
    { no: 5, name: "pool_inputs", kind: "message", T: Input, repeated: true },
    { no: 6, name: "favor_clarifai_workflows", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowResultsSimilarityRequest {
    return new PostWorkflowResultsSimilarityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowResultsSimilarityRequest {
    return new PostWorkflowResultsSimilarityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowResultsSimilarityRequest {
    return new PostWorkflowResultsSimilarityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowResultsSimilarityRequest | PlainMessage<PostWorkflowResultsSimilarityRequest> | undefined, b: PostWorkflowResultsSimilarityRequest | PlainMessage<PostWorkflowResultsSimilarityRequest> | undefined): boolean {
    return proto3.util.equals(PostWorkflowResultsSimilarityRequest, a, b);
  }
}

/**
 * PostWorkflowResultsSimilarityResponse
 *
 * @generated from message clarifai.api.PostWorkflowResultsSimilarityResponse
 */
export class PostWorkflowResultsSimilarityResponse extends Message<PostWorkflowResultsSimilarityResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.WorkflowResultsSimilarity results = 2;
   */
  results: WorkflowResultsSimilarity[] = [];

  constructor(data?: PartialMessage<PostWorkflowResultsSimilarityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowResultsSimilarityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "results", kind: "message", T: WorkflowResultsSimilarity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowResultsSimilarityResponse {
    return new PostWorkflowResultsSimilarityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowResultsSimilarityResponse {
    return new PostWorkflowResultsSimilarityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowResultsSimilarityResponse {
    return new PostWorkflowResultsSimilarityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowResultsSimilarityResponse | PlainMessage<PostWorkflowResultsSimilarityResponse> | undefined, b: PostWorkflowResultsSimilarityResponse | PlainMessage<PostWorkflowResultsSimilarityResponse> | undefined): boolean {
    return proto3.util.equals(PostWorkflowResultsSimilarityResponse, a, b);
  }
}

/**
 * ListWorkflowVersionsRequest
 *
 * @generated from message clarifai.api.ListWorkflowVersionsRequest
 */
export class ListWorkflowVersionsRequest extends Message<ListWorkflowVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List versions for the workflow identified by this id
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListWorkflowVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListWorkflowVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkflowVersionsRequest {
    return new ListWorkflowVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkflowVersionsRequest {
    return new ListWorkflowVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkflowVersionsRequest {
    return new ListWorkflowVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkflowVersionsRequest | PlainMessage<ListWorkflowVersionsRequest> | undefined, b: ListWorkflowVersionsRequest | PlainMessage<ListWorkflowVersionsRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkflowVersionsRequest, a, b);
  }
}

/**
 * GetWorkflowVersionRequest
 *
 * @generated from message clarifai.api.GetWorkflowVersionRequest
 */
export class GetWorkflowVersionRequest extends Message<GetWorkflowVersionRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The id of the workflow that has the requested version.
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Get the identified by this id
   *
   * @generated from field: string workflow_version_id = 3;
   */
  workflowVersionId = "";

  constructor(data?: PartialMessage<GetWorkflowVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetWorkflowVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkflowVersionRequest {
    return new GetWorkflowVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkflowVersionRequest {
    return new GetWorkflowVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkflowVersionRequest {
    return new GetWorkflowVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkflowVersionRequest | PlainMessage<GetWorkflowVersionRequest> | undefined, b: GetWorkflowVersionRequest | PlainMessage<GetWorkflowVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkflowVersionRequest, a, b);
  }
}

/**
 * DeleteWorkflowVersionsRequest
 *
 * @generated from message clarifai.api.DeleteWorkflowVersionsRequest
 */
export class DeleteWorkflowVersionsRequest extends Message<DeleteWorkflowVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The id of the workflow that has the requested versions to delete.
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Delete the versions identified by these ids
   *
   * @generated from field: repeated string workflow_version_ids = 3;
   */
  workflowVersionIds: string[] = [];

  constructor(data?: PartialMessage<DeleteWorkflowVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteWorkflowVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow_version_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkflowVersionsRequest {
    return new DeleteWorkflowVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkflowVersionsRequest {
    return new DeleteWorkflowVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkflowVersionsRequest {
    return new DeleteWorkflowVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkflowVersionsRequest | PlainMessage<DeleteWorkflowVersionsRequest> | undefined, b: DeleteWorkflowVersionsRequest | PlainMessage<DeleteWorkflowVersionsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWorkflowVersionsRequest, a, b);
  }
}

/**
 * PatchWorkflowVersionsRequest
 *
 * @generated from message clarifai.api.PatchWorkflowVersionsRequest
 */
export class PatchWorkflowVersionsRequest extends Message<PatchWorkflowVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The id of the workflow that has the requested versions to patch.
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Patch these versions.
   *
   * @generated from field: repeated clarifai.api.WorkflowVersion workflow_versions = 3;
   */
  workflowVersions: WorkflowVersion[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 4;
   */
  action = "";

  constructor(data?: PartialMessage<PatchWorkflowVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchWorkflowVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow_versions", kind: "message", T: WorkflowVersion, repeated: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchWorkflowVersionsRequest {
    return new PatchWorkflowVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchWorkflowVersionsRequest {
    return new PatchWorkflowVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchWorkflowVersionsRequest {
    return new PatchWorkflowVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchWorkflowVersionsRequest | PlainMessage<PatchWorkflowVersionsRequest> | undefined, b: PatchWorkflowVersionsRequest | PlainMessage<PatchWorkflowVersionsRequest> | undefined): boolean {
    return proto3.util.equals(PatchWorkflowVersionsRequest, a, b);
  }
}

/**
 * MultiWorkflowVersionResponse
 *
 * @generated from message clarifai.api.MultiWorkflowVersionResponse
 */
export class MultiWorkflowVersionResponse extends Message<MultiWorkflowVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.WorkflowVersion workflow_versions = 2;
   */
  workflowVersions: WorkflowVersion[] = [];

  constructor(data?: PartialMessage<MultiWorkflowVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiWorkflowVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflow_versions", kind: "message", T: WorkflowVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiWorkflowVersionResponse {
    return new MultiWorkflowVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiWorkflowVersionResponse {
    return new MultiWorkflowVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiWorkflowVersionResponse {
    return new MultiWorkflowVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiWorkflowVersionResponse | PlainMessage<MultiWorkflowVersionResponse> | undefined, b: MultiWorkflowVersionResponse | PlainMessage<MultiWorkflowVersionResponse> | undefined): boolean {
    return proto3.util.equals(MultiWorkflowVersionResponse, a, b);
  }
}

/**
 * SingleWorkflowVersionResponse
 *
 * @generated from message clarifai.api.SingleWorkflowVersionResponse
 */
export class SingleWorkflowVersionResponse extends Message<SingleWorkflowVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.WorkflowVersion workflow_version = 2;
   */
  workflowVersion?: WorkflowVersion;

  constructor(data?: PartialMessage<SingleWorkflowVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleWorkflowVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflow_version", kind: "message", T: WorkflowVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleWorkflowVersionResponse {
    return new SingleWorkflowVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleWorkflowVersionResponse {
    return new SingleWorkflowVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleWorkflowVersionResponse {
    return new SingleWorkflowVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleWorkflowVersionResponse | PlainMessage<SingleWorkflowVersionResponse> | undefined, b: SingleWorkflowVersionResponse | PlainMessage<SingleWorkflowVersionResponse> | undefined): boolean {
    return proto3.util.equals(SingleWorkflowVersionResponse, a, b);
  }
}

/**
 * PostWorkflowMetricsRequest
 *
 * @generated from message clarifai.api.PostWorkflowMetricsRequest
 */
export class PostWorkflowMetricsRequest extends Message<PostWorkflowMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify the workflow.
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Specify list of workflow metrics data to add.
   * All fields are optional.
   * Allowed fields to set:
   * * id
   * - provide custom id for the evaluation
   * - if empty, then an id is automatically generated
   * * data
   * - provide concepts to be used for this evaluation
   * - if empty, then all app concepts are used
   * - Example: "data": {
   *                "concepts": [{"id": "{{concept_id}}"}]
   *            }
   * * node_metrics
   * - provide the workflow nodes to be evaluated
   * - if empty, then all evaluable workflow nodes will be evaluated
   * - Example: "node_metrics": {
   *               "node_1": {},
   *               "node_2": {},
   *            }
   * * ground_truth
   * - provide the ground truth data set to search for
   * - if not set, then ground truth is retrieved from current app's inputs and annotations
   * - Example: "ground_truth": {
   *                "query": {
   *                    "ands": {
   *                        "annotation": {
   *                            "data": {
   *                                "concepts": [{"id": "concept"}]
   *                            }
   *                        }
   *                     }
   *                },
   *            }
   *
   * @generated from field: repeated clarifai.api.WorkflowMetrics workflow_metrics = 3;
   */
  workflowMetrics: WorkflowMetrics[] = [];

  constructor(data?: PartialMessage<PostWorkflowMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow_metrics", kind: "message", T: WorkflowMetrics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowMetricsRequest {
    return new PostWorkflowMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowMetricsRequest {
    return new PostWorkflowMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowMetricsRequest {
    return new PostWorkflowMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowMetricsRequest | PlainMessage<PostWorkflowMetricsRequest> | undefined, b: PostWorkflowMetricsRequest | PlainMessage<PostWorkflowMetricsRequest> | undefined): boolean {
    return proto3.util.equals(PostWorkflowMetricsRequest, a, b);
  }
}

/**
 * GetWorkflowMetricsRequest
 *
 * @generated from message clarifai.api.GetWorkflowMetricsRequest
 */
export class GetWorkflowMetricsRequest extends Message<GetWorkflowMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify the workflow.
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Identify the workflow metrics.
   *
   * @generated from field: string metrics_id = 3;
   */
  metricsId = "";

  constructor(data?: PartialMessage<GetWorkflowMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetWorkflowMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metrics_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkflowMetricsRequest {
    return new GetWorkflowMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkflowMetricsRequest {
    return new GetWorkflowMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkflowMetricsRequest {
    return new GetWorkflowMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkflowMetricsRequest | PlainMessage<GetWorkflowMetricsRequest> | undefined, b: GetWorkflowMetricsRequest | PlainMessage<GetWorkflowMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkflowMetricsRequest, a, b);
  }
}

/**
 * GetWorkflowNodeMetricsRequest
 *
 * @generated from message clarifai.api.GetWorkflowNodeMetricsRequest
 */
export class GetWorkflowNodeMetricsRequest extends Message<GetWorkflowNodeMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify the workflow.
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Identify the workflow metrics.
   *
   * @generated from field: string metrics_id = 3;
   */
  metricsId = "";

  /**
   * Identify the workflow node.
   *
   * @generated from field: string node_id = 4;
   */
  nodeId = "";

  constructor(data?: PartialMessage<GetWorkflowNodeMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetWorkflowNodeMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metrics_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkflowNodeMetricsRequest {
    return new GetWorkflowNodeMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkflowNodeMetricsRequest {
    return new GetWorkflowNodeMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkflowNodeMetricsRequest {
    return new GetWorkflowNodeMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkflowNodeMetricsRequest | PlainMessage<GetWorkflowNodeMetricsRequest> | undefined, b: GetWorkflowNodeMetricsRequest | PlainMessage<GetWorkflowNodeMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkflowNodeMetricsRequest, a, b);
  }
}

/**
 * ListWorkflowMetricsRequest
 *
 * @generated from message clarifai.api.ListWorkflowMetricsRequest
 */
export class ListWorkflowMetricsRequest extends Message<ListWorkflowMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify the workflow.
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListWorkflowMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListWorkflowMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkflowMetricsRequest {
    return new ListWorkflowMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkflowMetricsRequest {
    return new ListWorkflowMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkflowMetricsRequest {
    return new ListWorkflowMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkflowMetricsRequest | PlainMessage<ListWorkflowMetricsRequest> | undefined, b: ListWorkflowMetricsRequest | PlainMessage<ListWorkflowMetricsRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkflowMetricsRequest, a, b);
  }
}

/**
 * DeleteWorkflowMetricsRequest
 *
 * @generated from message clarifai.api.DeleteWorkflowMetricsRequest
 */
export class DeleteWorkflowMetricsRequest extends Message<DeleteWorkflowMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Identify the workflow.
   *
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * Identify the list workflow metrics to delete.
   *
   * @generated from field: repeated string ids = 3;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteWorkflowMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteWorkflowMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkflowMetricsRequest {
    return new DeleteWorkflowMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkflowMetricsRequest {
    return new DeleteWorkflowMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkflowMetricsRequest {
    return new DeleteWorkflowMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkflowMetricsRequest | PlainMessage<DeleteWorkflowMetricsRequest> | undefined, b: DeleteWorkflowMetricsRequest | PlainMessage<DeleteWorkflowMetricsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWorkflowMetricsRequest, a, b);
  }
}

/**
 * SingleWorkflowMetricsResponse
 *
 * @generated from message clarifai.api.SingleWorkflowMetricsResponse
 */
export class SingleWorkflowMetricsResponse extends Message<SingleWorkflowMetricsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Workflow metrics data.
   *
   * @generated from field: clarifai.api.WorkflowMetrics workflow_metrics = 2;
   */
  workflowMetrics?: WorkflowMetrics;

  constructor(data?: PartialMessage<SingleWorkflowMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleWorkflowMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflow_metrics", kind: "message", T: WorkflowMetrics },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleWorkflowMetricsResponse {
    return new SingleWorkflowMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleWorkflowMetricsResponse {
    return new SingleWorkflowMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleWorkflowMetricsResponse {
    return new SingleWorkflowMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleWorkflowMetricsResponse | PlainMessage<SingleWorkflowMetricsResponse> | undefined, b: SingleWorkflowMetricsResponse | PlainMessage<SingleWorkflowMetricsResponse> | undefined): boolean {
    return proto3.util.equals(SingleWorkflowMetricsResponse, a, b);
  }
}

/**
 * SingleWorkflowNodeMetricsResponse
 *
 * @generated from message clarifai.api.SingleWorkflowNodeMetricsResponse
 */
export class SingleWorkflowNodeMetricsResponse extends Message<SingleWorkflowNodeMetricsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Workflow node metrics data.
   *
   * @generated from field: clarifai.api.EvalMetrics node_metrics = 2;
   */
  nodeMetrics?: EvalMetrics;

  constructor(data?: PartialMessage<SingleWorkflowNodeMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleWorkflowNodeMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "node_metrics", kind: "message", T: EvalMetrics },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleWorkflowNodeMetricsResponse {
    return new SingleWorkflowNodeMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleWorkflowNodeMetricsResponse {
    return new SingleWorkflowNodeMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleWorkflowNodeMetricsResponse {
    return new SingleWorkflowNodeMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleWorkflowNodeMetricsResponse | PlainMessage<SingleWorkflowNodeMetricsResponse> | undefined, b: SingleWorkflowNodeMetricsResponse | PlainMessage<SingleWorkflowNodeMetricsResponse> | undefined): boolean {
    return proto3.util.equals(SingleWorkflowNodeMetricsResponse, a, b);
  }
}

/**
 * MultiWorkflowMetricsResponse
 *
 * @generated from message clarifai.api.MultiWorkflowMetricsResponse
 */
export class MultiWorkflowMetricsResponse extends Message<MultiWorkflowMetricsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of workflow metrics.
   *
   * @generated from field: repeated clarifai.api.WorkflowMetrics workflow_metrics = 2;
   */
  workflowMetrics: WorkflowMetrics[] = [];

  constructor(data?: PartialMessage<MultiWorkflowMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiWorkflowMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflow_metrics", kind: "message", T: WorkflowMetrics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiWorkflowMetricsResponse {
    return new MultiWorkflowMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiWorkflowMetricsResponse {
    return new MultiWorkflowMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiWorkflowMetricsResponse {
    return new MultiWorkflowMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiWorkflowMetricsResponse | PlainMessage<MultiWorkflowMetricsResponse> | undefined, b: MultiWorkflowMetricsResponse | PlainMessage<MultiWorkflowMetricsResponse> | undefined): boolean {
    return proto3.util.equals(MultiWorkflowMetricsResponse, a, b);
  }
}

/**
 * Request to start a app duplication process
 *
 * @generated from message clarifai.api.PostAppDuplicationsRequest
 */
export class PostAppDuplicationsRequest extends Message<PostAppDuplicationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.AppDuplication app_duplications = 2;
   */
  appDuplications: AppDuplication[] = [];

  constructor(data?: PartialMessage<PostAppDuplicationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAppDuplicationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "app_duplications", kind: "message", T: AppDuplication, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAppDuplicationsRequest {
    return new PostAppDuplicationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAppDuplicationsRequest {
    return new PostAppDuplicationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAppDuplicationsRequest {
    return new PostAppDuplicationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAppDuplicationsRequest | PlainMessage<PostAppDuplicationsRequest> | undefined, b: PostAppDuplicationsRequest | PlainMessage<PostAppDuplicationsRequest> | undefined): boolean {
    return proto3.util.equals(PostAppDuplicationsRequest, a, b);
  }
}

/**
 * Request to check app duplication status
 *
 * @generated from message clarifai.api.GetAppDuplicationRequest
 */
export class GetAppDuplicationRequest extends Message<GetAppDuplicationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The app duplication id
   *
   * @generated from field: string app_duplication_id = 2;
   */
  appDuplicationId = "";

  constructor(data?: PartialMessage<GetAppDuplicationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetAppDuplicationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "app_duplication_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppDuplicationRequest {
    return new GetAppDuplicationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppDuplicationRequest {
    return new GetAppDuplicationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppDuplicationRequest {
    return new GetAppDuplicationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppDuplicationRequest | PlainMessage<GetAppDuplicationRequest> | undefined, b: GetAppDuplicationRequest | PlainMessage<GetAppDuplicationRequest> | undefined): boolean {
    return proto3.util.equals(GetAppDuplicationRequest, a, b);
  }
}

/**
 * Request to list all the app duplication that user triggered.
 *
 * @generated from message clarifai.api.ListAppDuplicationsRequest
 */
export class ListAppDuplicationsRequest extends Message<ListAppDuplicationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListAppDuplicationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListAppDuplicationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppDuplicationsRequest {
    return new ListAppDuplicationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppDuplicationsRequest {
    return new ListAppDuplicationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppDuplicationsRequest {
    return new ListAppDuplicationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppDuplicationsRequest | PlainMessage<ListAppDuplicationsRequest> | undefined, b: ListAppDuplicationsRequest | PlainMessage<ListAppDuplicationsRequest> | undefined): boolean {
    return proto3.util.equals(ListAppDuplicationsRequest, a, b);
  }
}

/**
 * MultiAppDuplicationsResponse
 *
 * @generated from message clarifai.api.MultiAppDuplicationsResponse
 */
export class MultiAppDuplicationsResponse extends Message<MultiAppDuplicationsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.AppDuplication app_duplications = 2;
   */
  appDuplications: AppDuplication[] = [];

  constructor(data?: PartialMessage<MultiAppDuplicationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiAppDuplicationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "app_duplications", kind: "message", T: AppDuplication, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiAppDuplicationsResponse {
    return new MultiAppDuplicationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiAppDuplicationsResponse {
    return new MultiAppDuplicationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiAppDuplicationsResponse {
    return new MultiAppDuplicationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiAppDuplicationsResponse | PlainMessage<MultiAppDuplicationsResponse> | undefined, b: MultiAppDuplicationsResponse | PlainMessage<MultiAppDuplicationsResponse> | undefined): boolean {
    return proto3.util.equals(MultiAppDuplicationsResponse, a, b);
  }
}

/**
 * SingleAppDuplicationResponse
 *
 * @generated from message clarifai.api.SingleAppDuplicationResponse
 */
export class SingleAppDuplicationResponse extends Message<SingleAppDuplicationResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.AppDuplication app_duplication = 2;
   */
  appDuplication?: AppDuplication;

  constructor(data?: PartialMessage<SingleAppDuplicationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleAppDuplicationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "app_duplication", kind: "message", T: AppDuplication },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleAppDuplicationResponse {
    return new SingleAppDuplicationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleAppDuplicationResponse {
    return new SingleAppDuplicationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleAppDuplicationResponse {
    return new SingleAppDuplicationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleAppDuplicationResponse | PlainMessage<SingleAppDuplicationResponse> | undefined, b: SingleAppDuplicationResponse | PlainMessage<SingleAppDuplicationResponse> | undefined): boolean {
    return proto3.util.equals(SingleAppDuplicationResponse, a, b);
  }
}

/**
 * Request to create Tasks.
 *
 * @generated from message clarifai.api.PostTasksRequest
 */
export class PostTasksRequest extends Message<PostTasksRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Task tasks = 2;
   */
  tasks: Task[] = [];

  constructor(data?: PartialMessage<PostTasksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostTasksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "tasks", kind: "message", T: Task, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostTasksRequest {
    return new PostTasksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostTasksRequest {
    return new PostTasksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostTasksRequest {
    return new PostTasksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostTasksRequest | PlainMessage<PostTasksRequest> | undefined, b: PostTasksRequest | PlainMessage<PostTasksRequest> | undefined): boolean {
    return proto3.util.equals(PostTasksRequest, a, b);
  }
}

/**
 * Request to get one task.
 *
 * @generated from message clarifai.api.GetTaskRequest
 */
export class GetTaskRequest extends Message<GetTaskRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string task_id = 2;
   */
  taskId = "";

  /**
   * (optional URL parameter) List of additional fields to be included in the response.
   * Currently supported: all, worker.users, review.users.
   *
   * @generated from field: repeated string additional_fields = 3;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<GetTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTaskRequest | PlainMessage<GetTaskRequest> | undefined, b: GetTaskRequest | PlainMessage<GetTaskRequest> | undefined): boolean {
    return proto3.util.equals(GetTaskRequest, a, b);
  }
}

/**
 * Request to list multiple tasks.
 *
 * @generated from message clarifai.api.ListTasksRequest
 */
export class ListTasksRequest extends Message<ListTasksRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  /**
   * Get tasks that have ANY user from this list assigned as worker.
   *
   * @generated from field: repeated string worker_user_ids = 4;
   */
  workerUserIds: string[] = [];

  /**
   * Get tasks that have ANY user from this list assigned as reviewer.
   *
   * @generated from field: repeated string review_user_ids = 5;
   */
  reviewUserIds: string[] = [];

  /**
   * Get tasks that are associated to ANY label order from this list.
   *
   * @generated from field: repeated string label_order_ids = 8;
   */
  labelOrderIds: string[] = [];

  /**
   * Get label order tasks as well
   * It is automatically set to true if label_order_ids is set.
   *
   * @generated from field: bool including_label_order_tasks = 6;
   */
  includingLabelOrderTasks = false;

  /**
   * (optional URL parameter) List of additional fields to be included in the response.
   * Currently supported: all, worker.users, review.users.
   *
   * @generated from field: repeated string additional_fields = 7;
   */
  additionalFields: string[] = [];

  constructor(data?: PartialMessage<ListTasksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListTasksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "worker_user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "review_user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "label_order_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "including_label_order_tasks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "additional_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTasksRequest {
    return new ListTasksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTasksRequest {
    return new ListTasksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTasksRequest {
    return new ListTasksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTasksRequest | PlainMessage<ListTasksRequest> | undefined, b: ListTasksRequest | PlainMessage<ListTasksRequest> | undefined): boolean {
    return proto3.util.equals(ListTasksRequest, a, b);
  }
}

/**
 * Request to patch a list of tasks.
 *
 * @generated from message clarifai.api.PatchTasksRequest
 */
export class PatchTasksRequest extends Message<PatchTasksRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Task tasks = 2;
   */
  tasks: Task[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchTasksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchTasksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "tasks", kind: "message", T: Task, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchTasksRequest {
    return new PatchTasksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchTasksRequest {
    return new PatchTasksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchTasksRequest {
    return new PatchTasksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchTasksRequest | PlainMessage<PatchTasksRequest> | undefined, b: PatchTasksRequest | PlainMessage<PatchTasksRequest> | undefined): boolean {
    return proto3.util.equals(PatchTasksRequest, a, b);
  }
}

/**
 * Request to delete a list of tasks.
 *
 * @generated from message clarifai.api.DeleteTasksRequest
 */
export class DeleteTasksRequest extends Message<DeleteTasksRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteTasksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteTasksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTasksRequest {
    return new DeleteTasksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTasksRequest {
    return new DeleteTasksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTasksRequest {
    return new DeleteTasksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTasksRequest | PlainMessage<DeleteTasksRequest> | undefined, b: DeleteTasksRequest | PlainMessage<DeleteTasksRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTasksRequest, a, b);
  }
}

/**
 * Response with multiple Tasks.
 *
 * @generated from message clarifai.api.MultiTaskResponse
 */
export class MultiTaskResponse extends Message<MultiTaskResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Task tasks = 2;
   */
  tasks: Task[] = [];

  constructor(data?: PartialMessage<MultiTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "tasks", kind: "message", T: Task, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiTaskResponse {
    return new MultiTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiTaskResponse {
    return new MultiTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiTaskResponse {
    return new MultiTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiTaskResponse | PlainMessage<MultiTaskResponse> | undefined, b: MultiTaskResponse | PlainMessage<MultiTaskResponse> | undefined): boolean {
    return proto3.util.equals(MultiTaskResponse, a, b);
  }
}

/**
 * Response with a single Task.
 *
 * @generated from message clarifai.api.SingleTaskResponse
 */
export class SingleTaskResponse extends Message<SingleTaskResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Task task = 2;
   */
  task?: Task;

  constructor(data?: PartialMessage<SingleTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleTaskResponse {
    return new SingleTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleTaskResponse {
    return new SingleTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleTaskResponse {
    return new SingleTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleTaskResponse | PlainMessage<SingleTaskResponse> | undefined, b: SingleTaskResponse | PlainMessage<SingleTaskResponse> | undefined): boolean {
    return proto3.util.equals(SingleTaskResponse, a, b);
  }
}

/**
 * GetTaskCountRequest can be used for fetching -
 * 1. Task annotation count per user, per status
 * 1. Task input (anchor annotations) count per user, per status
 *
 * @generated from message clarifai.api.GetTaskCountRequest
 */
export class GetTaskCountRequest extends Message<GetTaskCountRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * task_id for which count per user per status is needed
   *
   * @generated from field: string task_id = 2;
   */
  taskId = "";

  /**
   * for given task_id, user_ids to filter on (optional)
   *
   * @generated from field: repeated string user_ids = 3;
   */
  userIds: string[] = [];

  constructor(data?: PartialMessage<GetTaskCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetTaskCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTaskCountRequest {
    return new GetTaskCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTaskCountRequest {
    return new GetTaskCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTaskCountRequest {
    return new GetTaskCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTaskCountRequest | PlainMessage<GetTaskCountRequest> | undefined, b: GetTaskCountRequest | PlainMessage<GetTaskCountRequest> | undefined): boolean {
    return proto3.util.equals(GetTaskCountRequest, a, b);
  }
}

/**
 * SingleTaskCountResponse represent counts of annotations or inputs(anchor annotations) for labelers in given task
 *
 * @generated from message clarifai.api.SingleTaskCountResponse
 */
export class SingleTaskCountResponse extends Message<SingleTaskCountResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: string app_id = 2;
   */
  appId = "";

  /**
   * @generated from field: string task_id = 3;
   */
  taskId = "";

  /**
   * @generated from field: repeated clarifai.api.TaskStatusCountPerUser counts = 4;
   */
  counts: TaskStatusCountPerUser[] = [];

  constructor(data?: PartialMessage<SingleTaskCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleTaskCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "counts", kind: "message", T: TaskStatusCountPerUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleTaskCountResponse {
    return new SingleTaskCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleTaskCountResponse {
    return new SingleTaskCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleTaskCountResponse {
    return new SingleTaskCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleTaskCountResponse | PlainMessage<SingleTaskCountResponse> | undefined, b: SingleTaskCountResponse | PlainMessage<SingleTaskCountResponse> | undefined): boolean {
    return proto3.util.equals(SingleTaskCountResponse, a, b);
  }
}

/**
 * Request to force annotation count rollup
 *
 * @generated from message clarifai.api.PatchAnnotationCountsRollupRequest
 */
export class PatchAnnotationCountsRollupRequest extends Message<PatchAnnotationCountsRollupRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string task_id = 2;
   */
  taskId = "";

  constructor(data?: PartialMessage<PatchAnnotationCountsRollupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchAnnotationCountsRollupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchAnnotationCountsRollupRequest {
    return new PatchAnnotationCountsRollupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchAnnotationCountsRollupRequest {
    return new PatchAnnotationCountsRollupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchAnnotationCountsRollupRequest {
    return new PatchAnnotationCountsRollupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchAnnotationCountsRollupRequest | PlainMessage<PatchAnnotationCountsRollupRequest> | undefined, b: PatchAnnotationCountsRollupRequest | PlainMessage<PatchAnnotationCountsRollupRequest> | undefined): boolean {
    return proto3.util.equals(PatchAnnotationCountsRollupRequest, a, b);
  }
}

/**
 * Request to create label orders.
 *
 * @generated from message clarifai.api.PostLabelOrdersRequest
 */
export class PostLabelOrdersRequest extends Message<PostLabelOrdersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.LabelOrder label_orders = 2;
   */
  labelOrders: LabelOrder[] = [];

  constructor(data?: PartialMessage<PostLabelOrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostLabelOrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "label_orders", kind: "message", T: LabelOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostLabelOrdersRequest {
    return new PostLabelOrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostLabelOrdersRequest {
    return new PostLabelOrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostLabelOrdersRequest {
    return new PostLabelOrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostLabelOrdersRequest | PlainMessage<PostLabelOrdersRequest> | undefined, b: PostLabelOrdersRequest | PlainMessage<PostLabelOrdersRequest> | undefined): boolean {
    return proto3.util.equals(PostLabelOrdersRequest, a, b);
  }
}

/**
 * Request to get one label order.
 *
 * @generated from message clarifai.api.GetLabelOrderRequest
 */
export class GetLabelOrderRequest extends Message<GetLabelOrderRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string label_order_id = 2;
   */
  labelOrderId = "";

  constructor(data?: PartialMessage<GetLabelOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetLabelOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "label_order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLabelOrderRequest {
    return new GetLabelOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLabelOrderRequest {
    return new GetLabelOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLabelOrderRequest {
    return new GetLabelOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLabelOrderRequest | PlainMessage<GetLabelOrderRequest> | undefined, b: GetLabelOrderRequest | PlainMessage<GetLabelOrderRequest> | undefined): boolean {
    return proto3.util.equals(GetLabelOrderRequest, a, b);
  }
}

/**
 * Request to list multiple label orders.
 *
 * @generated from message clarifai.api.ListLabelOrdersRequest
 */
export class ListLabelOrdersRequest extends Message<ListLabelOrdersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListLabelOrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListLabelOrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListLabelOrdersRequest {
    return new ListLabelOrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListLabelOrdersRequest {
    return new ListLabelOrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListLabelOrdersRequest {
    return new ListLabelOrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListLabelOrdersRequest | PlainMessage<ListLabelOrdersRequest> | undefined, b: ListLabelOrdersRequest | PlainMessage<ListLabelOrdersRequest> | undefined): boolean {
    return proto3.util.equals(ListLabelOrdersRequest, a, b);
  }
}

/**
 * Request to patch a list of label orders.
 *
 * @generated from message clarifai.api.PatchLabelOrdersRequest
 */
export class PatchLabelOrdersRequest extends Message<PatchLabelOrdersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.LabelOrder label_orders = 2;
   */
  labelOrders: LabelOrder[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchLabelOrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchLabelOrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "label_orders", kind: "message", T: LabelOrder, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchLabelOrdersRequest {
    return new PatchLabelOrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchLabelOrdersRequest {
    return new PatchLabelOrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchLabelOrdersRequest {
    return new PatchLabelOrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchLabelOrdersRequest | PlainMessage<PatchLabelOrdersRequest> | undefined, b: PatchLabelOrdersRequest | PlainMessage<PatchLabelOrdersRequest> | undefined): boolean {
    return proto3.util.equals(PatchLabelOrdersRequest, a, b);
  }
}

/**
 * Request to delete a list of label orders.
 *
 * @generated from message clarifai.api.DeleteLabelOrdersRequest
 */
export class DeleteLabelOrdersRequest extends Message<DeleteLabelOrdersRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteLabelOrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteLabelOrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteLabelOrdersRequest {
    return new DeleteLabelOrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteLabelOrdersRequest {
    return new DeleteLabelOrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteLabelOrdersRequest {
    return new DeleteLabelOrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteLabelOrdersRequest | PlainMessage<DeleteLabelOrdersRequest> | undefined, b: DeleteLabelOrdersRequest | PlainMessage<DeleteLabelOrdersRequest> | undefined): boolean {
    return proto3.util.equals(DeleteLabelOrdersRequest, a, b);
  }
}

/**
 * Response with multiple label order.
 *
 * @generated from message clarifai.api.MultiLabelOrderResponse
 */
export class MultiLabelOrderResponse extends Message<MultiLabelOrderResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.LabelOrder label_orders = 2;
   */
  labelOrders: LabelOrder[] = [];

  constructor(data?: PartialMessage<MultiLabelOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiLabelOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "label_orders", kind: "message", T: LabelOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiLabelOrderResponse {
    return new MultiLabelOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiLabelOrderResponse {
    return new MultiLabelOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiLabelOrderResponse {
    return new MultiLabelOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiLabelOrderResponse | PlainMessage<MultiLabelOrderResponse> | undefined, b: MultiLabelOrderResponse | PlainMessage<MultiLabelOrderResponse> | undefined): boolean {
    return proto3.util.equals(MultiLabelOrderResponse, a, b);
  }
}

/**
 * Response with a label order.
 *
 * @generated from message clarifai.api.SingleLabelOrderResponse
 */
export class SingleLabelOrderResponse extends Message<SingleLabelOrderResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.LabelOrder label_order = 2;
   */
  labelOrder?: LabelOrder;

  constructor(data?: PartialMessage<SingleLabelOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleLabelOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "label_order", kind: "message", T: LabelOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleLabelOrderResponse {
    return new SingleLabelOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleLabelOrderResponse {
    return new SingleLabelOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleLabelOrderResponse {
    return new SingleLabelOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleLabelOrderResponse | PlainMessage<SingleLabelOrderResponse> | undefined, b: SingleLabelOrderResponse | PlainMessage<SingleLabelOrderResponse> | undefined): boolean {
    return proto3.util.equals(SingleLabelOrderResponse, a, b);
  }
}

/**
 * Request to create Collectors.
 *
 * @generated from message clarifai.api.PostCollectorsRequest
 */
export class PostCollectorsRequest extends Message<PostCollectorsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Collector collectors = 2;
   */
  collectors: Collector[] = [];

  constructor(data?: PartialMessage<PostCollectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostCollectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "collectors", kind: "message", T: Collector, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostCollectorsRequest {
    return new PostCollectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostCollectorsRequest {
    return new PostCollectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostCollectorsRequest {
    return new PostCollectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostCollectorsRequest | PlainMessage<PostCollectorsRequest> | undefined, b: PostCollectorsRequest | PlainMessage<PostCollectorsRequest> | undefined): boolean {
    return proto3.util.equals(PostCollectorsRequest, a, b);
  }
}

/**
 * PatchCollectorsRequest
 *
 * @generated from message clarifai.api.PatchCollectorsRequest
 */
export class PatchCollectorsRequest extends Message<PatchCollectorsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Collector collectors = 2;
   */
  collectors: Collector[] = [];

  /**
   * The action to perform on the patched objects
   * Only 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchCollectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchCollectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "collectors", kind: "message", T: Collector, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchCollectorsRequest {
    return new PatchCollectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchCollectorsRequest {
    return new PatchCollectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchCollectorsRequest {
    return new PatchCollectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchCollectorsRequest | PlainMessage<PatchCollectorsRequest> | undefined, b: PatchCollectorsRequest | PlainMessage<PatchCollectorsRequest> | undefined): boolean {
    return proto3.util.equals(PatchCollectorsRequest, a, b);
  }
}

/**
 * Request to delete several things by the list of ids.
 *
 * @generated from message clarifai.api.DeleteCollectorsRequest
 */
export class DeleteCollectorsRequest extends Message<DeleteCollectorsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  /**
   * @generated from field: bool delete_all = 3;
   */
  deleteAll = false;

  constructor(data?: PartialMessage<DeleteCollectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteCollectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "delete_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCollectorsRequest {
    return new DeleteCollectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCollectorsRequest {
    return new DeleteCollectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCollectorsRequest {
    return new DeleteCollectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCollectorsRequest | PlainMessage<DeleteCollectorsRequest> | undefined, b: DeleteCollectorsRequest | PlainMessage<DeleteCollectorsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCollectorsRequest, a, b);
  }
}

/**
 * Request to GET a single Collector.
 *
 * @generated from message clarifai.api.GetCollectorRequest
 */
export class GetCollectorRequest extends Message<GetCollectorRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The collecgtor id
   *
   * @generated from field: string collector_id = 2;
   */
  collectorId = "";

  constructor(data?: PartialMessage<GetCollectorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetCollectorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "collector_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCollectorRequest {
    return new GetCollectorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCollectorRequest {
    return new GetCollectorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCollectorRequest {
    return new GetCollectorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCollectorRequest | PlainMessage<GetCollectorRequest> | undefined, b: GetCollectorRequest | PlainMessage<GetCollectorRequest> | undefined): boolean {
    return proto3.util.equals(GetCollectorRequest, a, b);
  }
}

/**
 * Request to GET all the Collectors.
 *
 * @generated from message clarifai.api.ListCollectorsRequest
 */
export class ListCollectorsRequest extends Message<ListCollectorsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListCollectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListCollectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCollectorsRequest {
    return new ListCollectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCollectorsRequest {
    return new ListCollectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCollectorsRequest {
    return new ListCollectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCollectorsRequest | PlainMessage<ListCollectorsRequest> | undefined, b: ListCollectorsRequest | PlainMessage<ListCollectorsRequest> | undefined): boolean {
    return proto3.util.equals(ListCollectorsRequest, a, b);
  }
}

/**
 * Response with multiple Collectors.
 *
 * @generated from message clarifai.api.MultiCollectorResponse
 */
export class MultiCollectorResponse extends Message<MultiCollectorResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Collector collectors = 2;
   */
  collectors: Collector[] = [];

  constructor(data?: PartialMessage<MultiCollectorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiCollectorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "collectors", kind: "message", T: Collector, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiCollectorResponse {
    return new MultiCollectorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiCollectorResponse {
    return new MultiCollectorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiCollectorResponse {
    return new MultiCollectorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiCollectorResponse | PlainMessage<MultiCollectorResponse> | undefined, b: MultiCollectorResponse | PlainMessage<MultiCollectorResponse> | undefined): boolean {
    return proto3.util.equals(MultiCollectorResponse, a, b);
  }
}

/**
 * Response with a single Collector.
 *
 * @generated from message clarifai.api.SingleCollectorResponse
 */
export class SingleCollectorResponse extends Message<SingleCollectorResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Collector collector = 2;
   */
  collector?: Collector;

  constructor(data?: PartialMessage<SingleCollectorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleCollectorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "collector", kind: "message", T: Collector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleCollectorResponse {
    return new SingleCollectorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleCollectorResponse {
    return new SingleCollectorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleCollectorResponse {
    return new SingleCollectorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleCollectorResponse | PlainMessage<SingleCollectorResponse> | undefined, b: SingleCollectorResponse | PlainMessage<SingleCollectorResponse> | undefined): boolean {
    return proto3.util.equals(SingleCollectorResponse, a, b);
  }
}

/**
 * PostStatValuesRequest
 *
 * @generated from message clarifai.api.PostStatValuesRequest
 */
export class PostStatValuesRequest extends Message<PostStatValuesRequest> {
  /**
   * The user and app information for the request.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The stats to post, can post more than one at a time.
   *
   * @generated from field: repeated clarifai.api.StatValue stat_values = 2;
   */
  statValues: StatValue[] = [];

  constructor(data?: PartialMessage<PostStatValuesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostStatValuesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "stat_values", kind: "message", T: StatValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostStatValuesRequest {
    return new PostStatValuesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostStatValuesRequest {
    return new PostStatValuesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostStatValuesRequest {
    return new PostStatValuesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostStatValuesRequest | PlainMessage<PostStatValuesRequest> | undefined, b: PostStatValuesRequest | PlainMessage<PostStatValuesRequest> | undefined): boolean {
    return proto3.util.equals(PostStatValuesRequest, a, b);
  }
}

/**
 * MultiStatValueResponse
 *
 * @generated from message clarifai.api.MultiStatValueResponse
 */
export class MultiStatValueResponse extends Message<MultiStatValueResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The returned stats values.
   *
   * @generated from field: repeated clarifai.api.StatValue stat_values = 2;
   */
  statValues: StatValue[] = [];

  constructor(data?: PartialMessage<MultiStatValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiStatValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "stat_values", kind: "message", T: StatValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiStatValueResponse {
    return new MultiStatValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiStatValueResponse {
    return new MultiStatValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiStatValueResponse {
    return new MultiStatValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiStatValueResponse | PlainMessage<MultiStatValueResponse> | undefined, b: MultiStatValueResponse | PlainMessage<MultiStatValueResponse> | undefined): boolean {
    return proto3.util.equals(MultiStatValueResponse, a, b);
  }
}

/**
 * PostStatValuesAggregateRequest
 *
 * @generated from message clarifai.api.PostStatValuesAggregateRequest
 */
export class PostStatValuesAggregateRequest extends Message<PostStatValuesAggregateRequest> {
  /**
   * Ids present in the url of the request.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Query to retrieve aggregate values.
   *
   * @generated from field: repeated clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
   */
  statValueAggregateQueries: StatValueAggregateQuery[] = [];

  constructor(data?: PartialMessage<PostStatValuesAggregateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostStatValuesAggregateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "stat_value_aggregate_queries", kind: "message", T: StatValueAggregateQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostStatValuesAggregateRequest {
    return new PostStatValuesAggregateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostStatValuesAggregateRequest {
    return new PostStatValuesAggregateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostStatValuesAggregateRequest {
    return new PostStatValuesAggregateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostStatValuesAggregateRequest | PlainMessage<PostStatValuesAggregateRequest> | undefined, b: PostStatValuesAggregateRequest | PlainMessage<PostStatValuesAggregateRequest> | undefined): boolean {
    return proto3.util.equals(PostStatValuesAggregateRequest, a, b);
  }
}

/**
 * MultiStatValueAggregateResponse
 *
 * @generated from message clarifai.api.MultiStatValueAggregateResponse
 */
export class MultiStatValueAggregateResponse extends Message<MultiStatValueAggregateResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The aggregate results for each query passedin.
   *
   * @generated from field: repeated clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
   */
  statValueAggregateResults: StatValueAggregateResult[] = [];

  constructor(data?: PartialMessage<MultiStatValueAggregateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiStatValueAggregateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "stat_value_aggregate_results", kind: "message", T: StatValueAggregateResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiStatValueAggregateResponse {
    return new MultiStatValueAggregateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiStatValueAggregateResponse {
    return new MultiStatValueAggregateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiStatValueAggregateResponse {
    return new MultiStatValueAggregateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiStatValueAggregateResponse | PlainMessage<MultiStatValueAggregateResponse> | undefined, b: MultiStatValueAggregateResponse | PlainMessage<MultiStatValueAggregateResponse> | undefined): boolean {
    return proto3.util.equals(MultiStatValueAggregateResponse, a, b);
  }
}

/**
 * PostAnalyticsRequest
 *
 * @generated from message clarifai.api.PostAnalyticsRequest
 */
export class PostAnalyticsRequest extends Message<PostAnalyticsRequest> {
  /**
   * Unique identifier for this data packet, in order to avoid duplicates on the server side
   *
   * @generated from field: string batch_unique_identifier = 1;
   */
  batchUniqueIdentifier = "";

  /**
   * @generated from field: clarifai.api.DeviceInfo device_info = 2;
   */
  deviceInfo?: DeviceInfo;

  /**
   * @generated from field: repeated clarifai.api.SDKEventsCollection events_collection = 3;
   */
  eventsCollection: SDKEventsCollection[] = [];

  /**
   * @generated from field: clarifai.api.HostAppInfo host_app_info = 4;
   */
  hostAppInfo?: HostAppInfo;

  /**
   * @generated from field: clarifai.api.OperatingSystem operating_system = 5;
   */
  operatingSystem?: OperatingSystem;

  /**
   * @generated from field: clarifai.api.State state = 6;
   */
  state?: State;

  /**
   * System unique identifier for the combination user + device
   *
   * @generated from field: string system_uuid = 7;
   */
  systemUuid = "";

  /**
   * Timestamp the data was persisted on the device
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 8;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: clarifai.api.SDK sdk = 9;
   */
  sdk?: SDK;

  constructor(data?: PartialMessage<PostAnalyticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAnalyticsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "batch_unique_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "device_info", kind: "message", T: DeviceInfo },
    { no: 3, name: "events_collection", kind: "message", T: SDKEventsCollection, repeated: true },
    { no: 4, name: "host_app_info", kind: "message", T: HostAppInfo },
    { no: 5, name: "operating_system", kind: "message", T: OperatingSystem },
    { no: 6, name: "state", kind: "message", T: State },
    { no: 7, name: "system_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "timestamp", kind: "message", T: Timestamp },
    { no: 9, name: "sdk", kind: "message", T: SDK },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAnalyticsRequest {
    return new PostAnalyticsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAnalyticsRequest {
    return new PostAnalyticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAnalyticsRequest {
    return new PostAnalyticsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAnalyticsRequest | PlainMessage<PostAnalyticsRequest> | undefined, b: PostAnalyticsRequest | PlainMessage<PostAnalyticsRequest> | undefined): boolean {
    return proto3.util.equals(PostAnalyticsRequest, a, b);
  }
}

/**
 * PostAnalyticsResponse
 *
 * @generated from message clarifai.api.PostAnalyticsResponse
 */
export class PostAnalyticsResponse extends Message<PostAnalyticsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<PostAnalyticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAnalyticsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAnalyticsResponse {
    return new PostAnalyticsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAnalyticsResponse {
    return new PostAnalyticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAnalyticsResponse {
    return new PostAnalyticsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostAnalyticsResponse | PlainMessage<PostAnalyticsResponse> | undefined, b: PostAnalyticsResponse | PlainMessage<PostAnalyticsResponse> | undefined): boolean {
    return proto3.util.equals(PostAnalyticsResponse, a, b);
  }
}

/**
 * PostSDKBillingRequest
 *
 * @generated from message clarifai.api.PostSDKBillingRequest
 */
export class PostSDKBillingRequest extends Message<PostSDKBillingRequest> {
  /**
   * Unique identifier for this data packet, in order to avoid duplicates on the server side
   *
   * @generated from field: string batch_unique_identifier = 1;
   */
  batchUniqueIdentifier = "";

  /**
   * @generated from field: clarifai.api.DeviceInfo device_info = 2;
   */
  deviceInfo?: DeviceInfo;

  /**
   * @generated from field: clarifai.api.SDKBillingCycle cycle = 3;
   */
  cycle?: SDKBillingCycle;

  /**
   * @generated from field: clarifai.api.HostAppInfo host_app_info = 4;
   */
  hostAppInfo?: HostAppInfo;

  /**
   * @generated from field: clarifai.api.OperatingSystem operating_system = 5;
   */
  operatingSystem?: OperatingSystem;

  /**
   * @generated from field: clarifai.api.State state = 6;
   */
  state?: State;

  /**
   * System unique identifier for the combination user + device
   *
   * @generated from field: string system_uuid = 7;
   */
  systemUuid = "";

  /**
   * @generated from field: clarifai.api.SDK sdk = 8;
   */
  sdk?: SDK;

  constructor(data?: PartialMessage<PostSDKBillingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostSDKBillingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "batch_unique_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "device_info", kind: "message", T: DeviceInfo },
    { no: 3, name: "cycle", kind: "message", T: SDKBillingCycle },
    { no: 4, name: "host_app_info", kind: "message", T: HostAppInfo },
    { no: 5, name: "operating_system", kind: "message", T: OperatingSystem },
    { no: 6, name: "state", kind: "message", T: State },
    { no: 7, name: "system_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "sdk", kind: "message", T: SDK },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostSDKBillingRequest {
    return new PostSDKBillingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostSDKBillingRequest {
    return new PostSDKBillingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostSDKBillingRequest {
    return new PostSDKBillingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostSDKBillingRequest | PlainMessage<PostSDKBillingRequest> | undefined, b: PostSDKBillingRequest | PlainMessage<PostSDKBillingRequest> | undefined): boolean {
    return proto3.util.equals(PostSDKBillingRequest, a, b);
  }
}

/**
 * PostSDKBillingResponse
 *
 * @generated from message clarifai.api.PostSDKBillingResponse
 */
export class PostSDKBillingResponse extends Message<PostSDKBillingResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.commands.Commands commands = 2;
   */
  commands?: Commands;

  constructor(data?: PartialMessage<PostSDKBillingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostSDKBillingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "commands", kind: "message", T: Commands },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostSDKBillingResponse {
    return new PostSDKBillingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostSDKBillingResponse {
    return new PostSDKBillingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostSDKBillingResponse {
    return new PostSDKBillingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostSDKBillingResponse | PlainMessage<PostSDKBillingResponse> | undefined, b: PostSDKBillingResponse | PlainMessage<PostSDKBillingResponse> | undefined): boolean {
    return proto3.util.equals(PostSDKBillingResponse, a, b);
  }
}

/**
 * MultiFindDuplicateAnnotationsJobResponse
 *
 * @generated from message clarifai.api.MultiFindDuplicateAnnotationsJobResponse
 */
export class MultiFindDuplicateAnnotationsJobResponse extends Message<MultiFindDuplicateAnnotationsJobResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * The find duplicate annotation jobs that were started
   *
   * @generated from field: repeated clarifai.api.FindDuplicateAnnotationsJob find_duplicate_annotations_jobs = 2;
   */
  findDuplicateAnnotationsJobs: FindDuplicateAnnotationsJob[] = [];

  constructor(data?: PartialMessage<MultiFindDuplicateAnnotationsJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiFindDuplicateAnnotationsJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "find_duplicate_annotations_jobs", kind: "message", T: FindDuplicateAnnotationsJob, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiFindDuplicateAnnotationsJobResponse {
    return new MultiFindDuplicateAnnotationsJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiFindDuplicateAnnotationsJobResponse {
    return new MultiFindDuplicateAnnotationsJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiFindDuplicateAnnotationsJobResponse {
    return new MultiFindDuplicateAnnotationsJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiFindDuplicateAnnotationsJobResponse | PlainMessage<MultiFindDuplicateAnnotationsJobResponse> | undefined, b: MultiFindDuplicateAnnotationsJobResponse | PlainMessage<MultiFindDuplicateAnnotationsJobResponse> | undefined): boolean {
    return proto3.util.equals(MultiFindDuplicateAnnotationsJobResponse, a, b);
  }
}

/**
 * PostFindDuplicateAnnotationsJobsRequest
 *
 * @generated from message clarifai.api.PostFindDuplicateAnnotationsJobsRequest
 */
export class PostFindDuplicateAnnotationsJobsRequest extends Message<PostFindDuplicateAnnotationsJobsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The find duplicate annotation jobs that are being started
   *
   * @generated from field: repeated clarifai.api.FindDuplicateAnnotationsJob find_duplicate_annotations_jobs = 2;
   */
  findDuplicateAnnotationsJobs: FindDuplicateAnnotationsJob[] = [];

  constructor(data?: PartialMessage<PostFindDuplicateAnnotationsJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostFindDuplicateAnnotationsJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "find_duplicate_annotations_jobs", kind: "message", T: FindDuplicateAnnotationsJob, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostFindDuplicateAnnotationsJobsRequest {
    return new PostFindDuplicateAnnotationsJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostFindDuplicateAnnotationsJobsRequest {
    return new PostFindDuplicateAnnotationsJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostFindDuplicateAnnotationsJobsRequest {
    return new PostFindDuplicateAnnotationsJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostFindDuplicateAnnotationsJobsRequest | PlainMessage<PostFindDuplicateAnnotationsJobsRequest> | undefined, b: PostFindDuplicateAnnotationsJobsRequest | PlainMessage<PostFindDuplicateAnnotationsJobsRequest> | undefined): boolean {
    return proto3.util.equals(PostFindDuplicateAnnotationsJobsRequest, a, b);
  }
}

/**
 * GetFindDuplicateAnnotationsJobsRequest
 *
 * @generated from message clarifai.api.GetFindDuplicateAnnotationsJobsRequest
 */
export class GetFindDuplicateAnnotationsJobsRequest extends Message<GetFindDuplicateAnnotationsJobsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetFindDuplicateAnnotationsJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetFindDuplicateAnnotationsJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFindDuplicateAnnotationsJobsRequest {
    return new GetFindDuplicateAnnotationsJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFindDuplicateAnnotationsJobsRequest {
    return new GetFindDuplicateAnnotationsJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFindDuplicateAnnotationsJobsRequest {
    return new GetFindDuplicateAnnotationsJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFindDuplicateAnnotationsJobsRequest | PlainMessage<GetFindDuplicateAnnotationsJobsRequest> | undefined, b: GetFindDuplicateAnnotationsJobsRequest | PlainMessage<GetFindDuplicateAnnotationsJobsRequest> | undefined): boolean {
    return proto3.util.equals(GetFindDuplicateAnnotationsJobsRequest, a, b);
  }
}

/**
 * ListFindDuplicateAnnotationsJobsRequest
 *
 * @generated from message clarifai.api.ListFindDuplicateAnnotationsJobsRequest
 */
export class ListFindDuplicateAnnotationsJobsRequest extends Message<ListFindDuplicateAnnotationsJobsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListFindDuplicateAnnotationsJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListFindDuplicateAnnotationsJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFindDuplicateAnnotationsJobsRequest {
    return new ListFindDuplicateAnnotationsJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFindDuplicateAnnotationsJobsRequest {
    return new ListFindDuplicateAnnotationsJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFindDuplicateAnnotationsJobsRequest {
    return new ListFindDuplicateAnnotationsJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFindDuplicateAnnotationsJobsRequest | PlainMessage<ListFindDuplicateAnnotationsJobsRequest> | undefined, b: ListFindDuplicateAnnotationsJobsRequest | PlainMessage<ListFindDuplicateAnnotationsJobsRequest> | undefined): boolean {
    return proto3.util.equals(ListFindDuplicateAnnotationsJobsRequest, a, b);
  }
}

/**
 * DeleteFindDuplicateAnnotationsJobsRequest
 *
 * @generated from message clarifai.api.DeleteFindDuplicateAnnotationsJobsRequest
 */
export class DeleteFindDuplicateAnnotationsJobsRequest extends Message<DeleteFindDuplicateAnnotationsJobsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteFindDuplicateAnnotationsJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteFindDuplicateAnnotationsJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFindDuplicateAnnotationsJobsRequest {
    return new DeleteFindDuplicateAnnotationsJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFindDuplicateAnnotationsJobsRequest {
    return new DeleteFindDuplicateAnnotationsJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFindDuplicateAnnotationsJobsRequest {
    return new DeleteFindDuplicateAnnotationsJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFindDuplicateAnnotationsJobsRequest | PlainMessage<DeleteFindDuplicateAnnotationsJobsRequest> | undefined, b: DeleteFindDuplicateAnnotationsJobsRequest | PlainMessage<DeleteFindDuplicateAnnotationsJobsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFindDuplicateAnnotationsJobsRequest, a, b);
  }
}

/**
 * PostTrendingMetricsViewRequest
 *
 * @generated from message clarifai.api.PostTrendingMetricsViewRequest
 */
export class PostTrendingMetricsViewRequest extends Message<PostTrendingMetricsViewRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * For now view types 'apps', 'workflows', and 'models' are supported.
   *
   * @generated from field: string view_type = 2;
   */
  viewType = "";

  /**
   * ID of the views object.
   *
   * @generated from field: string object_id = 3;
   */
  objectId = "";

  constructor(data?: PartialMessage<PostTrendingMetricsViewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostTrendingMetricsViewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "view_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostTrendingMetricsViewRequest {
    return new PostTrendingMetricsViewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostTrendingMetricsViewRequest {
    return new PostTrendingMetricsViewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostTrendingMetricsViewRequest {
    return new PostTrendingMetricsViewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostTrendingMetricsViewRequest | PlainMessage<PostTrendingMetricsViewRequest> | undefined, b: PostTrendingMetricsViewRequest | PlainMessage<PostTrendingMetricsViewRequest> | undefined): boolean {
    return proto3.util.equals(PostTrendingMetricsViewRequest, a, b);
  }
}

/**
 * ListTrendingMetricsViewsRequest
 *
 * @generated from message clarifai.api.ListTrendingMetricsViewsRequest
 */
export class ListTrendingMetricsViewsRequest extends Message<ListTrendingMetricsViewsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * For now view types 'apps', 'workflows', and 'models' are supported.
   *
   * @generated from field: string view_type = 2;
   */
  viewType = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListTrendingMetricsViewsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListTrendingMetricsViewsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "view_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTrendingMetricsViewsRequest {
    return new ListTrendingMetricsViewsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTrendingMetricsViewsRequest {
    return new ListTrendingMetricsViewsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTrendingMetricsViewsRequest {
    return new ListTrendingMetricsViewsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTrendingMetricsViewsRequest | PlainMessage<ListTrendingMetricsViewsRequest> | undefined, b: ListTrendingMetricsViewsRequest | PlainMessage<ListTrendingMetricsViewsRequest> | undefined): boolean {
    return proto3.util.equals(ListTrendingMetricsViewsRequest, a, b);
  }
}

/**
 * MultiTrendingMetricsViewResponse
 *
 * @generated from message clarifai.api.MultiTrendingMetricsViewResponse
 */
export class MultiTrendingMetricsViewResponse extends Message<MultiTrendingMetricsViewResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.TrendingMetric metrics = 2;
   */
  metrics: TrendingMetric[] = [];

  constructor(data?: PartialMessage<MultiTrendingMetricsViewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiTrendingMetricsViewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "metrics", kind: "message", T: TrendingMetric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiTrendingMetricsViewResponse {
    return new MultiTrendingMetricsViewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiTrendingMetricsViewResponse {
    return new MultiTrendingMetricsViewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiTrendingMetricsViewResponse {
    return new MultiTrendingMetricsViewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiTrendingMetricsViewResponse | PlainMessage<MultiTrendingMetricsViewResponse> | undefined, b: MultiTrendingMetricsViewResponse | PlainMessage<MultiTrendingMetricsViewResponse> | undefined): boolean {
    return proto3.util.equals(MultiTrendingMetricsViewResponse, a, b);
  }
}

/**
 * PostIdValidationRequest
 *
 * @generated from message clarifai.api.PostIdValidationRequest
 */
export class PostIdValidationRequest extends Message<PostIdValidationRequest> {
  /**
   * List of validations to parse
   *
   * @generated from field: repeated clarifai.api.Validation validations = 1;
   */
  validations: Validation[] = [];

  constructor(data?: PartialMessage<PostIdValidationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostIdValidationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validations", kind: "message", T: Validation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostIdValidationRequest {
    return new PostIdValidationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostIdValidationRequest {
    return new PostIdValidationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostIdValidationRequest {
    return new PostIdValidationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostIdValidationRequest | PlainMessage<PostIdValidationRequest> | undefined, b: PostIdValidationRequest | PlainMessage<PostIdValidationRequest> | undefined): boolean {
    return proto3.util.equals(PostIdValidationRequest, a, b);
  }
}

/**
 * MultiIdValidationResponse
 *
 * @generated from message clarifai.api.MultiIdValidationResponse
 */
export class MultiIdValidationResponse extends Message<MultiIdValidationResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Results of validation
   *
   * @generated from field: repeated clarifai.api.ValidationResult validation_results = 2;
   */
  validationResults: ValidationResult[] = [];

  constructor(data?: PartialMessage<MultiIdValidationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiIdValidationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "validation_results", kind: "message", T: ValidationResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiIdValidationResponse {
    return new MultiIdValidationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiIdValidationResponse {
    return new MultiIdValidationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiIdValidationResponse {
    return new MultiIdValidationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiIdValidationResponse | PlainMessage<MultiIdValidationResponse> | undefined, b: MultiIdValidationResponse | PlainMessage<MultiIdValidationResponse> | undefined): boolean {
    return proto3.util.equals(MultiIdValidationResponse, a, b);
  }
}

/**
 * ListTagCategoriesRequest
 *
 * @generated from message clarifai.api.ListTagCategoriesRequest
 */
export class ListTagCategoriesRequest extends Message<ListTagCategoriesRequest> {
  /**
   * Type of object. 'model' is supported
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  constructor(data?: PartialMessage<ListTagCategoriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListTagCategoriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagCategoriesRequest {
    return new ListTagCategoriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagCategoriesRequest {
    return new ListTagCategoriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagCategoriesRequest {
    return new ListTagCategoriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagCategoriesRequest | PlainMessage<ListTagCategoriesRequest> | undefined, b: ListTagCategoriesRequest | PlainMessage<ListTagCategoriesRequest> | undefined): boolean {
    return proto3.util.equals(ListTagCategoriesRequest, a, b);
  }
}

/**
 * MultiTagCategoryResponse
 *
 * @generated from message clarifai.api.MultiTagCategoryResponse
 */
export class MultiTagCategoryResponse extends Message<MultiTagCategoryResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Categories of tags with all valid tags
   *
   * @generated from field: repeated clarifai.api.TagCategory categories = 2;
   */
  categories: TagCategory[] = [];

  constructor(data?: PartialMessage<MultiTagCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiTagCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "categories", kind: "message", T: TagCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiTagCategoryResponse {
    return new MultiTagCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiTagCategoryResponse {
    return new MultiTagCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiTagCategoryResponse {
    return new MultiTagCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiTagCategoryResponse | PlainMessage<MultiTagCategoryResponse> | undefined, b: MultiTagCategoryResponse | PlainMessage<MultiTagCategoryResponse> | undefined): boolean {
    return proto3.util.equals(MultiTagCategoryResponse, a, b);
  }
}

/**
 * PostModelStarsRequest
 *
 * @generated from message clarifai.api.PostModelStarsRequest
 */
export class PostModelStarsRequest extends Message<PostModelStarsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Model stars to create (supports 1)
   *
   * @generated from field: repeated clarifai.api.ModelStar model_stars = 2;
   */
  modelStars: ModelStar[] = [];

  constructor(data?: PartialMessage<PostModelStarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModelStarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_stars", kind: "message", T: ModelStar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModelStarsRequest {
    return new PostModelStarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModelStarsRequest {
    return new PostModelStarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModelStarsRequest {
    return new PostModelStarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModelStarsRequest | PlainMessage<PostModelStarsRequest> | undefined, b: PostModelStarsRequest | PlainMessage<PostModelStarsRequest> | undefined): boolean {
    return proto3.util.equals(PostModelStarsRequest, a, b);
  }
}

/**
 * MultiModelStarResponse
 *
 * @generated from message clarifai.api.MultiModelStarResponse
 */
export class MultiModelStarResponse extends Message<MultiModelStarResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Model stars
   *
   * @generated from field: repeated clarifai.api.ModelStar model_stars = 2;
   */
  modelStars: ModelStar[] = [];

  constructor(data?: PartialMessage<MultiModelStarResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModelStarResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_stars", kind: "message", T: ModelStar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModelStarResponse {
    return new MultiModelStarResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModelStarResponse {
    return new MultiModelStarResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModelStarResponse {
    return new MultiModelStarResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModelStarResponse | PlainMessage<MultiModelStarResponse> | undefined, b: MultiModelStarResponse | PlainMessage<MultiModelStarResponse> | undefined): boolean {
    return proto3.util.equals(MultiModelStarResponse, a, b);
  }
}

/**
 * DeleteModelStarsRequest
 *
 * @generated from message clarifai.api.DeleteModelStarsRequest
 */
export class DeleteModelStarsRequest extends Message<DeleteModelStarsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * ModelIds of model stars to delete (supports 1)
   *
   * @generated from field: repeated string model_ids = 2;
   */
  modelIds: string[] = [];

  constructor(data?: PartialMessage<DeleteModelStarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModelStarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModelStarsRequest {
    return new DeleteModelStarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModelStarsRequest {
    return new DeleteModelStarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModelStarsRequest {
    return new DeleteModelStarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModelStarsRequest | PlainMessage<DeleteModelStarsRequest> | undefined, b: DeleteModelStarsRequest | PlainMessage<DeleteModelStarsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModelStarsRequest, a, b);
  }
}

/**
 * DeleteModelStarsResponse
 *
 * @generated from message clarifai.api.DeleteModelStarsResponse
 */
export class DeleteModelStarsResponse extends Message<DeleteModelStarsResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of deleted model stars model_ids
   *
   * @generated from field: repeated string model_ids = 2;
   */
  modelIds: string[] = [];

  constructor(data?: PartialMessage<DeleteModelStarsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModelStarsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "model_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModelStarsResponse {
    return new DeleteModelStarsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModelStarsResponse {
    return new DeleteModelStarsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModelStarsResponse {
    return new DeleteModelStarsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModelStarsResponse | PlainMessage<DeleteModelStarsResponse> | undefined, b: DeleteModelStarsResponse | PlainMessage<DeleteModelStarsResponse> | undefined): boolean {
    return proto3.util.equals(DeleteModelStarsResponse, a, b);
  }
}

/**
 * PostUserStarsRequest
 *
 * @generated from message clarifai.api.PostUserStarsRequest
 */
export class PostUserStarsRequest extends Message<PostUserStarsRequest> {
  /**
   * User stars to create (supports 1)
   *
   * @generated from field: repeated clarifai.api.UserStar user_stars = 1;
   */
  userStars: UserStar[] = [];

  constructor(data?: PartialMessage<PostUserStarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostUserStarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_stars", kind: "message", T: UserStar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostUserStarsRequest {
    return new PostUserStarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostUserStarsRequest {
    return new PostUserStarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostUserStarsRequest {
    return new PostUserStarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostUserStarsRequest | PlainMessage<PostUserStarsRequest> | undefined, b: PostUserStarsRequest | PlainMessage<PostUserStarsRequest> | undefined): boolean {
    return proto3.util.equals(PostUserStarsRequest, a, b);
  }
}

/**
 * MultiUserStarResponse
 *
 * @generated from message clarifai.api.MultiUserStarResponse
 */
export class MultiUserStarResponse extends Message<MultiUserStarResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * User stars
   *
   * @generated from field: repeated clarifai.api.UserStar user_stars = 2;
   */
  userStars: UserStar[] = [];

  constructor(data?: PartialMessage<MultiUserStarResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiUserStarResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "user_stars", kind: "message", T: UserStar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiUserStarResponse {
    return new MultiUserStarResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiUserStarResponse {
    return new MultiUserStarResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiUserStarResponse {
    return new MultiUserStarResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiUserStarResponse | PlainMessage<MultiUserStarResponse> | undefined, b: MultiUserStarResponse | PlainMessage<MultiUserStarResponse> | undefined): boolean {
    return proto3.util.equals(MultiUserStarResponse, a, b);
  }
}

/**
 * DeleteUserStarsRequest
 *
 * @generated from message clarifai.api.DeleteUserStarsRequest
 */
export class DeleteUserStarsRequest extends Message<DeleteUserStarsRequest> {
  /**
   * UserIds of user stars to delete (supports 1)
   *
   * @generated from field: repeated string user_ids = 1;
   */
  userIds: string[] = [];

  constructor(data?: PartialMessage<DeleteUserStarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteUserStarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserStarsRequest {
    return new DeleteUserStarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserStarsRequest {
    return new DeleteUserStarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserStarsRequest {
    return new DeleteUserStarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserStarsRequest | PlainMessage<DeleteUserStarsRequest> | undefined, b: DeleteUserStarsRequest | PlainMessage<DeleteUserStarsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserStarsRequest, a, b);
  }
}

/**
 * DeleteUserStarsResponse
 *
 * @generated from message clarifai.api.DeleteUserStarsResponse
 */
export class DeleteUserStarsResponse extends Message<DeleteUserStarsResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of deleted user stars user_ids
   *
   * @generated from field: repeated string user_ids = 2;
   */
  userIds: string[] = [];

  constructor(data?: PartialMessage<DeleteUserStarsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteUserStarsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserStarsResponse {
    return new DeleteUserStarsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserStarsResponse {
    return new DeleteUserStarsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserStarsResponse {
    return new DeleteUserStarsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserStarsResponse | PlainMessage<DeleteUserStarsResponse> | undefined, b: DeleteUserStarsResponse | PlainMessage<DeleteUserStarsResponse> | undefined): boolean {
    return proto3.util.equals(DeleteUserStarsResponse, a, b);
  }
}

/**
 * PostAppStarsRequest
 *
 * @generated from message clarifai.api.PostAppStarsRequest
 */
export class PostAppStarsRequest extends Message<PostAppStarsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * App stars to create (supports 1)
   *
   * @generated from field: repeated clarifai.api.AppStar app_stars = 2;
   */
  appStars: AppStar[] = [];

  constructor(data?: PartialMessage<PostAppStarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostAppStarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "app_stars", kind: "message", T: AppStar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAppStarsRequest {
    return new PostAppStarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAppStarsRequest {
    return new PostAppStarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAppStarsRequest {
    return new PostAppStarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAppStarsRequest | PlainMessage<PostAppStarsRequest> | undefined, b: PostAppStarsRequest | PlainMessage<PostAppStarsRequest> | undefined): boolean {
    return proto3.util.equals(PostAppStarsRequest, a, b);
  }
}

/**
 * MultiAppStarResponse
 *
 * @generated from message clarifai.api.MultiAppStarResponse
 */
export class MultiAppStarResponse extends Message<MultiAppStarResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * App stars
   *
   * @generated from field: repeated clarifai.api.AppStar app_stars = 2;
   */
  appStars: AppStar[] = [];

  constructor(data?: PartialMessage<MultiAppStarResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiAppStarResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "app_stars", kind: "message", T: AppStar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiAppStarResponse {
    return new MultiAppStarResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiAppStarResponse {
    return new MultiAppStarResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiAppStarResponse {
    return new MultiAppStarResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiAppStarResponse | PlainMessage<MultiAppStarResponse> | undefined, b: MultiAppStarResponse | PlainMessage<MultiAppStarResponse> | undefined): boolean {
    return proto3.util.equals(MultiAppStarResponse, a, b);
  }
}

/**
 * DeleteAppStarsRequest
 *
 * @generated from message clarifai.api.DeleteAppStarsRequest
 */
export class DeleteAppStarsRequest extends Message<DeleteAppStarsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * AppIds of app stars to delete (supports 1)
   *
   * @generated from field: repeated string app_ids = 2;
   */
  appIds: string[] = [];

  constructor(data?: PartialMessage<DeleteAppStarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteAppStarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "app_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppStarsRequest {
    return new DeleteAppStarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppStarsRequest {
    return new DeleteAppStarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppStarsRequest {
    return new DeleteAppStarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppStarsRequest | PlainMessage<DeleteAppStarsRequest> | undefined, b: DeleteAppStarsRequest | PlainMessage<DeleteAppStarsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAppStarsRequest, a, b);
  }
}

/**
 * DeleteAppStarsResponse
 *
 * @generated from message clarifai.api.DeleteAppStarsResponse
 */
export class DeleteAppStarsResponse extends Message<DeleteAppStarsResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of deleted app stars app_ids
   *
   * @generated from field: repeated string app_ids = 2;
   */
  appIds: string[] = [];

  constructor(data?: PartialMessage<DeleteAppStarsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteAppStarsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "app_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppStarsResponse {
    return new DeleteAppStarsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppStarsResponse {
    return new DeleteAppStarsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppStarsResponse {
    return new DeleteAppStarsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppStarsResponse | PlainMessage<DeleteAppStarsResponse> | undefined, b: DeleteAppStarsResponse | PlainMessage<DeleteAppStarsResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAppStarsResponse, a, b);
  }
}

/**
 * PostWorkflowStarsRequest
 *
 * @generated from message clarifai.api.PostWorkflowStarsRequest
 */
export class PostWorkflowStarsRequest extends Message<PostWorkflowStarsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Workflow stars to create (supports 1)
   *
   * @generated from field: repeated clarifai.api.WorkflowStar workflow_stars = 2;
   */
  workflowStars: WorkflowStar[] = [];

  constructor(data?: PartialMessage<PostWorkflowStarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWorkflowStarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_stars", kind: "message", T: WorkflowStar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWorkflowStarsRequest {
    return new PostWorkflowStarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWorkflowStarsRequest {
    return new PostWorkflowStarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWorkflowStarsRequest {
    return new PostWorkflowStarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostWorkflowStarsRequest | PlainMessage<PostWorkflowStarsRequest> | undefined, b: PostWorkflowStarsRequest | PlainMessage<PostWorkflowStarsRequest> | undefined): boolean {
    return proto3.util.equals(PostWorkflowStarsRequest, a, b);
  }
}

/**
 * MultiWorkflowStarResponse
 *
 * @generated from message clarifai.api.MultiWorkflowStarResponse
 */
export class MultiWorkflowStarResponse extends Message<MultiWorkflowStarResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Workflow stars
   *
   * @generated from field: repeated clarifai.api.WorkflowStar workflow_stars = 2;
   */
  workflowStars: WorkflowStar[] = [];

  constructor(data?: PartialMessage<MultiWorkflowStarResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiWorkflowStarResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflow_stars", kind: "message", T: WorkflowStar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiWorkflowStarResponse {
    return new MultiWorkflowStarResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiWorkflowStarResponse {
    return new MultiWorkflowStarResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiWorkflowStarResponse {
    return new MultiWorkflowStarResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiWorkflowStarResponse | PlainMessage<MultiWorkflowStarResponse> | undefined, b: MultiWorkflowStarResponse | PlainMessage<MultiWorkflowStarResponse> | undefined): boolean {
    return proto3.util.equals(MultiWorkflowStarResponse, a, b);
  }
}

/**
 * DeleteWorkflowStarsRequest
 *
 * @generated from message clarifai.api.DeleteWorkflowStarsRequest
 */
export class DeleteWorkflowStarsRequest extends Message<DeleteWorkflowStarsRequest> {
  /**
   * The user_id and app_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * WorkflowIds of workflow stars to delete (supports 1)
   *
   * @generated from field: repeated string workflow_ids = 2;
   */
  workflowIds: string[] = [];

  constructor(data?: PartialMessage<DeleteWorkflowStarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteWorkflowStarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "workflow_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkflowStarsRequest {
    return new DeleteWorkflowStarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkflowStarsRequest {
    return new DeleteWorkflowStarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkflowStarsRequest {
    return new DeleteWorkflowStarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkflowStarsRequest | PlainMessage<DeleteWorkflowStarsRequest> | undefined, b: DeleteWorkflowStarsRequest | PlainMessage<DeleteWorkflowStarsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWorkflowStarsRequest, a, b);
  }
}

/**
 * DeleteWorkflowStarsResponse
 *
 * @generated from message clarifai.api.DeleteWorkflowStarsResponse
 */
export class DeleteWorkflowStarsResponse extends Message<DeleteWorkflowStarsResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of deleted workflow stars workflow_ids
   *
   * @generated from field: repeated string workflow_ids = 2;
   */
  workflowIds: string[] = [];

  constructor(data?: PartialMessage<DeleteWorkflowStarsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteWorkflowStarsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "workflow_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkflowStarsResponse {
    return new DeleteWorkflowStarsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkflowStarsResponse {
    return new DeleteWorkflowStarsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkflowStarsResponse {
    return new DeleteWorkflowStarsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkflowStarsResponse | PlainMessage<DeleteWorkflowStarsResponse> | undefined, b: DeleteWorkflowStarsResponse | PlainMessage<DeleteWorkflowStarsResponse> | undefined): boolean {
    return proto3.util.equals(DeleteWorkflowStarsResponse, a, b);
  }
}

/**
 * ListWebNotificationsRequest
 *
 * @generated from message clarifai.api.ListWebNotificationsRequest
 */
export class ListWebNotificationsRequest extends Message<ListWebNotificationsRequest> {
  /**
   * The user_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) Return only unread notifications
   *
   * @generated from field: bool unread_only = 2;
   */
  unreadOnly = false;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListWebNotificationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListWebNotificationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "unread_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWebNotificationsRequest {
    return new ListWebNotificationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWebNotificationsRequest {
    return new ListWebNotificationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWebNotificationsRequest {
    return new ListWebNotificationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWebNotificationsRequest | PlainMessage<ListWebNotificationsRequest> | undefined, b: ListWebNotificationsRequest | PlainMessage<ListWebNotificationsRequest> | undefined): boolean {
    return proto3.util.equals(ListWebNotificationsRequest, a, b);
  }
}

/**
 * GetWebNotificationRequest
 *
 * @generated from message clarifai.api.GetWebNotificationRequest
 */
export class GetWebNotificationRequest extends Message<GetWebNotificationRequest> {
  /**
   * The user_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Id of the notification to fetch
   *
   * @generated from field: string notification_id = 2;
   */
  notificationId = "";

  constructor(data?: PartialMessage<GetWebNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetWebNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "notification_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWebNotificationRequest {
    return new GetWebNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWebNotificationRequest {
    return new GetWebNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWebNotificationRequest {
    return new GetWebNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWebNotificationRequest | PlainMessage<GetWebNotificationRequest> | undefined, b: GetWebNotificationRequest | PlainMessage<GetWebNotificationRequest> | undefined): boolean {
    return proto3.util.equals(GetWebNotificationRequest, a, b);
  }
}

/**
 * DeleteNotificationsRequest
 *
 * @generated from message clarifai.api.DeleteWebNotificationsRequest
 */
export class DeleteWebNotificationsRequest extends Message<DeleteWebNotificationsRequest> {
  /**
   * The user_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Ids of notifications to delete
   *
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteWebNotificationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteWebNotificationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWebNotificationsRequest {
    return new DeleteWebNotificationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWebNotificationsRequest {
    return new DeleteWebNotificationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWebNotificationsRequest {
    return new DeleteWebNotificationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWebNotificationsRequest | PlainMessage<DeleteWebNotificationsRequest> | undefined, b: DeleteWebNotificationsRequest | PlainMessage<DeleteWebNotificationsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWebNotificationsRequest, a, b);
  }
}

/**
 * PatchWebNotificationsRequest
 *
 * @generated from message clarifai.api.PatchWebNotificationsRequest
 */
export class PatchWebNotificationsRequest extends Message<PatchWebNotificationsRequest> {
  /**
   * The user_id information.
   *
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Notifications to patch
   *
   * @generated from field: repeated clarifai.api.PatchWebNotification notifications = 2;
   */
  notifications: PatchWebNotification[] = [];

  /**
   * The action to perform on the patched objects
   * Only 'overwrite' is supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchWebNotificationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchWebNotificationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "notifications", kind: "message", T: PatchWebNotification, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchWebNotificationsRequest {
    return new PatchWebNotificationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchWebNotificationsRequest {
    return new PatchWebNotificationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchWebNotificationsRequest {
    return new PatchWebNotificationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchWebNotificationsRequest | PlainMessage<PatchWebNotificationsRequest> | undefined, b: PatchWebNotificationsRequest | PlainMessage<PatchWebNotificationsRequest> | undefined): boolean {
    return proto3.util.equals(PatchWebNotificationsRequest, a, b);
  }
}

/**
 * MultiNotificationResponse
 *
 * @generated from message clarifai.api.MultiWebNotificationResponse
 */
export class MultiWebNotificationResponse extends Message<MultiWebNotificationResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * List of notifications
   *
   * @generated from field: repeated clarifai.api.WebNotification notifications = 2;
   */
  notifications: WebNotification[] = [];

  constructor(data?: PartialMessage<MultiWebNotificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiWebNotificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "notifications", kind: "message", T: WebNotification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiWebNotificationResponse {
    return new MultiWebNotificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiWebNotificationResponse {
    return new MultiWebNotificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiWebNotificationResponse {
    return new MultiWebNotificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiWebNotificationResponse | PlainMessage<MultiWebNotificationResponse> | undefined, b: MultiWebNotificationResponse | PlainMessage<MultiWebNotificationResponse> | undefined): boolean {
    return proto3.util.equals(MultiWebNotificationResponse, a, b);
  }
}

/**
 * SingleNotificationResponse
 *
 * @generated from message clarifai.api.SingleWebNotificationResponse
 */
export class SingleWebNotificationResponse extends Message<SingleWebNotificationResponse> {
  /**
   * The response status.
   *
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * Notification
   *
   * @generated from field: clarifai.api.WebNotification notification = 2;
   */
  notification?: WebNotification;

  constructor(data?: PartialMessage<SingleWebNotificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleWebNotificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "notification", kind: "message", T: WebNotification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleWebNotificationResponse {
    return new SingleWebNotificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleWebNotificationResponse {
    return new SingleWebNotificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleWebNotificationResponse {
    return new SingleWebNotificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleWebNotificationResponse | PlainMessage<SingleWebNotificationResponse> | undefined, b: SingleWebNotificationResponse | PlainMessage<SingleWebNotificationResponse> | undefined): boolean {
    return proto3.util.equals(SingleWebNotificationResponse, a, b);
  }
}

/**
 * GetModuleRequest
 *
 * @generated from message clarifai.api.GetModuleRequest
 */
export class GetModuleRequest extends Message<GetModuleRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string module_id = 2;
   */
  moduleId = "";

  constructor(data?: PartialMessage<GetModuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetModuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "module_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModuleRequest {
    return new GetModuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModuleRequest {
    return new GetModuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModuleRequest {
    return new GetModuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModuleRequest | PlainMessage<GetModuleRequest> | undefined, b: GetModuleRequest | PlainMessage<GetModuleRequest> | undefined): boolean {
    return proto3.util.equals(GetModuleRequest, a, b);
  }
}

/**
 * ListModulesRequest
 *
 * @generated from message clarifai.api.ListModulesRequest
 */
export class ListModulesRequest extends Message<ListModulesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModulesRequest {
    return new ListModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModulesRequest {
    return new ListModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModulesRequest {
    return new ListModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModulesRequest | PlainMessage<ListModulesRequest> | undefined, b: ListModulesRequest | PlainMessage<ListModulesRequest> | undefined): boolean {
    return proto3.util.equals(ListModulesRequest, a, b);
  }
}

/**
 * PostModulesRequest
 *
 * @generated from message clarifai.api.PostModulesRequest
 */
export class PostModulesRequest extends Message<PostModulesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * This allows you to create one or more module by posting it to the API.
   *
   * @generated from field: repeated clarifai.api.Module modules = 3;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<PostModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 3, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModulesRequest {
    return new PostModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModulesRequest {
    return new PostModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModulesRequest {
    return new PostModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModulesRequest | PlainMessage<PostModulesRequest> | undefined, b: PostModulesRequest | PlainMessage<PostModulesRequest> | undefined): boolean {
    return proto3.util.equals(PostModulesRequest, a, b);
  }
}

/**
 * PatchModulesRequest
 *
 * @generated from message clarifai.api.PatchModulesRequest
 */
export class PatchModulesRequest extends Message<PatchModulesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Module modules = 2;
   */
  modules: Module[] = [];

  /**
   * The action to perform on the patched objects
   * For now actions 'merge', 'overwrite', and 'remove' are supported
   *
   * @generated from field: string action = 3;
   */
  action = "";

  constructor(data?: PartialMessage<PatchModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PatchModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "modules", kind: "message", T: Module, repeated: true },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchModulesRequest {
    return new PatchModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchModulesRequest {
    return new PatchModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchModulesRequest {
    return new PatchModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchModulesRequest | PlainMessage<PatchModulesRequest> | undefined, b: PatchModulesRequest | PlainMessage<PatchModulesRequest> | undefined): boolean {
    return proto3.util.equals(PatchModulesRequest, a, b);
  }
}

/**
 * Request to delete several things by the list of ids.
 *
 * @generated from message clarifai.api.DeleteModulesRequest
 */
export class DeleteModulesRequest extends Message<DeleteModulesRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModulesRequest {
    return new DeleteModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModulesRequest {
    return new DeleteModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModulesRequest {
    return new DeleteModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModulesRequest | PlainMessage<DeleteModulesRequest> | undefined, b: DeleteModulesRequest | PlainMessage<DeleteModulesRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModulesRequest, a, b);
  }
}

/**
 * SingleModuleResponse
 *
 * @generated from message clarifai.api.SingleModuleResponse
 */
export class SingleModuleResponse extends Message<SingleModuleResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Module module = 2;
   */
  module?: Module;

  constructor(data?: PartialMessage<SingleModuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleModuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "module", kind: "message", T: Module },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleModuleResponse {
    return new SingleModuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleModuleResponse {
    return new SingleModuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleModuleResponse {
    return new SingleModuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleModuleResponse | PlainMessage<SingleModuleResponse> | undefined, b: SingleModuleResponse | PlainMessage<SingleModuleResponse> | undefined): boolean {
    return proto3.util.equals(SingleModuleResponse, a, b);
  }
}

/**
 * MultiModuleResponse
 *
 * @generated from message clarifai.api.MultiModuleResponse
 */
export class MultiModuleResponse extends Message<MultiModuleResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Module modules = 2;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<MultiModuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModuleResponse {
    return new MultiModuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModuleResponse {
    return new MultiModuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModuleResponse {
    return new MultiModuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModuleResponse | PlainMessage<MultiModuleResponse> | undefined, b: MultiModuleResponse | PlainMessage<MultiModuleResponse> | undefined): boolean {
    return proto3.util.equals(MultiModuleResponse, a, b);
  }
}

/**
 * request for different endpoints currently.
 *
 * @generated from message clarifai.api.GetModuleVersionRequest
 */
export class GetModuleVersionRequest extends Message<GetModuleVersionRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string module_id = 2;
   */
  moduleId = "";

  /**
   * @generated from field: string module_version_id = 3;
   */
  moduleVersionId = "";

  constructor(data?: PartialMessage<GetModuleVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetModuleVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "module_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModuleVersionRequest {
    return new GetModuleVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModuleVersionRequest {
    return new GetModuleVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModuleVersionRequest {
    return new GetModuleVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModuleVersionRequest | PlainMessage<GetModuleVersionRequest> | undefined, b: GetModuleVersionRequest | PlainMessage<GetModuleVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetModuleVersionRequest, a, b);
  }
}

/**
 * ListModuleVersionsRequest
 *
 * @generated from message clarifai.api.ListModuleVersionsRequest
 */
export class ListModuleVersionsRequest extends Message<ListModuleVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string module_id = 2;
   */
  moduleId = "";

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 3;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListModuleVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListModuleVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "module_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModuleVersionsRequest {
    return new ListModuleVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModuleVersionsRequest {
    return new ListModuleVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModuleVersionsRequest {
    return new ListModuleVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModuleVersionsRequest | PlainMessage<ListModuleVersionsRequest> | undefined, b: ListModuleVersionsRequest | PlainMessage<ListModuleVersionsRequest> | undefined): boolean {
    return proto3.util.equals(ListModuleVersionsRequest, a, b);
  }
}

/**
 * PostModuleVersionsRequest
 *
 * @generated from message clarifai.api.PostModuleVersionsRequest
 */
export class PostModuleVersionsRequest extends Message<PostModuleVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string module_id = 2;
   */
  moduleId = "";

  /**
   * This allows you to create one or more module by posting it to the API.
   *
   * @generated from field: repeated clarifai.api.ModuleVersion module_versions = 3;
   */
  moduleVersions: ModuleVersion[] = [];

  constructor(data?: PartialMessage<PostModuleVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostModuleVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "module_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_versions", kind: "message", T: ModuleVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostModuleVersionsRequest {
    return new PostModuleVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostModuleVersionsRequest {
    return new PostModuleVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostModuleVersionsRequest {
    return new PostModuleVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostModuleVersionsRequest | PlainMessage<PostModuleVersionsRequest> | undefined, b: PostModuleVersionsRequest | PlainMessage<PostModuleVersionsRequest> | undefined): boolean {
    return proto3.util.equals(PostModuleVersionsRequest, a, b);
  }
}

/**
 * Request to delete several module versions by the list of ids.
 *
 * @generated from message clarifai.api.DeleteModuleVersionsRequest
 */
export class DeleteModuleVersionsRequest extends Message<DeleteModuleVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string module_id = 2;
   */
  moduleId = "";

  /**
   * @generated from field: repeated string ids = 3;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteModuleVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteModuleVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "module_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModuleVersionsRequest {
    return new DeleteModuleVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModuleVersionsRequest {
    return new DeleteModuleVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModuleVersionsRequest {
    return new DeleteModuleVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModuleVersionsRequest | PlainMessage<DeleteModuleVersionsRequest> | undefined, b: DeleteModuleVersionsRequest | PlainMessage<DeleteModuleVersionsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModuleVersionsRequest, a, b);
  }
}

/**
 * SingleModuleVersionResponse
 *
 * @generated from message clarifai.api.SingleModuleVersionResponse
 */
export class SingleModuleVersionResponse extends Message<SingleModuleVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.ModuleVersion module_version = 2;
   */
  moduleVersion?: ModuleVersion;

  constructor(data?: PartialMessage<SingleModuleVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleModuleVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "module_version", kind: "message", T: ModuleVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleModuleVersionResponse {
    return new SingleModuleVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleModuleVersionResponse {
    return new SingleModuleVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleModuleVersionResponse {
    return new SingleModuleVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleModuleVersionResponse | PlainMessage<SingleModuleVersionResponse> | undefined, b: SingleModuleVersionResponse | PlainMessage<SingleModuleVersionResponse> | undefined): boolean {
    return proto3.util.equals(SingleModuleVersionResponse, a, b);
  }
}

/**
 * MultiModuleVersionResponse
 *
 * @generated from message clarifai.api.MultiModuleVersionResponse
 */
export class MultiModuleVersionResponse extends Message<MultiModuleVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.ModuleVersion module_versions = 2;
   */
  moduleVersions: ModuleVersion[] = [];

  constructor(data?: PartialMessage<MultiModuleVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiModuleVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "module_versions", kind: "message", T: ModuleVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiModuleVersionResponse {
    return new MultiModuleVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiModuleVersionResponse {
    return new MultiModuleVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiModuleVersionResponse {
    return new MultiModuleVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiModuleVersionResponse | PlainMessage<MultiModuleVersionResponse> | undefined, b: MultiModuleVersionResponse | PlainMessage<MultiModuleVersionResponse> | undefined): boolean {
    return proto3.util.equals(MultiModuleVersionResponse, a, b);
  }
}

/**
 * GetInstalledModuleVersionRequest
 *
 * @generated from message clarifai.api.GetInstalledModuleVersionRequest
 */
export class GetInstalledModuleVersionRequest extends Message<GetInstalledModuleVersionRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * the ID to get of the install module version.
   *
   * @generated from field: string installed_module_version_id = 2;
   */
  installedModuleVersionId = "";

  constructor(data?: PartialMessage<GetInstalledModuleVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetInstalledModuleVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "installed_module_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstalledModuleVersionRequest {
    return new GetInstalledModuleVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstalledModuleVersionRequest {
    return new GetInstalledModuleVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstalledModuleVersionRequest {
    return new GetInstalledModuleVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstalledModuleVersionRequest | PlainMessage<GetInstalledModuleVersionRequest> | undefined, b: GetInstalledModuleVersionRequest | PlainMessage<GetInstalledModuleVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetInstalledModuleVersionRequest, a, b);
  }
}

/**
 * ListInstalledModuleVersionsRequest
 *
 * @generated from message clarifai.api.ListInstalledModuleVersionsRequest
 */
export class ListInstalledModuleVersionsRequest extends Message<ListInstalledModuleVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListInstalledModuleVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListInstalledModuleVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstalledModuleVersionsRequest {
    return new ListInstalledModuleVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstalledModuleVersionsRequest {
    return new ListInstalledModuleVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstalledModuleVersionsRequest {
    return new ListInstalledModuleVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstalledModuleVersionsRequest | PlainMessage<ListInstalledModuleVersionsRequest> | undefined, b: ListInstalledModuleVersionsRequest | PlainMessage<ListInstalledModuleVersionsRequest> | undefined): boolean {
    return proto3.util.equals(ListInstalledModuleVersionsRequest, a, b);
  }
}

/**
 * PostInstalledModuleVersionsRequest to install a module version into the app in the URL
 *
 * @generated from message clarifai.api.PostInstalledModuleVersionsRequest
 */
export class PostInstalledModuleVersionsRequest extends Message<PostInstalledModuleVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * This allows you to create one or more module by posting it to the API.
   *
   * @generated from field: repeated clarifai.api.InstalledModuleVersion installed_module_versions = 2;
   */
  installedModuleVersions: InstalledModuleVersion[] = [];

  constructor(data?: PartialMessage<PostInstalledModuleVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInstalledModuleVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "installed_module_versions", kind: "message", T: InstalledModuleVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInstalledModuleVersionsRequest {
    return new PostInstalledModuleVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInstalledModuleVersionsRequest {
    return new PostInstalledModuleVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInstalledModuleVersionsRequest {
    return new PostInstalledModuleVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostInstalledModuleVersionsRequest | PlainMessage<PostInstalledModuleVersionsRequest> | undefined, b: PostInstalledModuleVersionsRequest | PlainMessage<PostInstalledModuleVersionsRequest> | undefined): boolean {
    return proto3.util.equals(PostInstalledModuleVersionsRequest, a, b);
  }
}

/**
 * PostInstalledModuleVersionsKeyRequest to associate a key of the caller's to the installed module
 * version.
 *
 * @generated from message clarifai.api.PostInstalledModuleVersionsKeyRequest
 */
export class PostInstalledModuleVersionsKeyRequest extends Message<PostInstalledModuleVersionsKeyRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * the ID to get of the install module version.
   *
   * Note(zeiler): we don't provide a key to create since it's always deterministic.
   * we'll create a PAT, owned by the caller with the scopes that the module requests.
   * in the future if we want we can pass in a Key key = 3; field so that the caller
   * can adjust the scopes, but for now that doesn't seem necessary.
   *
   * @generated from field: string installed_module_version_id = 2;
   */
  installedModuleVersionId = "";

  constructor(data?: PartialMessage<PostInstalledModuleVersionsKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInstalledModuleVersionsKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "installed_module_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInstalledModuleVersionsKeyRequest {
    return new PostInstalledModuleVersionsKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInstalledModuleVersionsKeyRequest {
    return new PostInstalledModuleVersionsKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInstalledModuleVersionsKeyRequest {
    return new PostInstalledModuleVersionsKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostInstalledModuleVersionsKeyRequest | PlainMessage<PostInstalledModuleVersionsKeyRequest> | undefined, b: PostInstalledModuleVersionsKeyRequest | PlainMessage<PostInstalledModuleVersionsKeyRequest> | undefined): boolean {
    return proto3.util.equals(PostInstalledModuleVersionsKeyRequest, a, b);
  }
}

/**
 * Request to delete several installed module versions by the list of ids.
 *
 * @generated from message clarifai.api.DeleteInstalledModuleVersionsRequest
 */
export class DeleteInstalledModuleVersionsRequest extends Message<DeleteInstalledModuleVersionsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteInstalledModuleVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteInstalledModuleVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstalledModuleVersionsRequest {
    return new DeleteInstalledModuleVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstalledModuleVersionsRequest {
    return new DeleteInstalledModuleVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstalledModuleVersionsRequest {
    return new DeleteInstalledModuleVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstalledModuleVersionsRequest | PlainMessage<DeleteInstalledModuleVersionsRequest> | undefined, b: DeleteInstalledModuleVersionsRequest | PlainMessage<DeleteInstalledModuleVersionsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInstalledModuleVersionsRequest, a, b);
  }
}

/**
 * SingleInstalledModuleVersionResponse
 *
 * @generated from message clarifai.api.SingleInstalledModuleVersionResponse
 */
export class SingleInstalledModuleVersionResponse extends Message<SingleInstalledModuleVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.InstalledModuleVersion installed_module_version = 2;
   */
  installedModuleVersion?: InstalledModuleVersion;

  constructor(data?: PartialMessage<SingleInstalledModuleVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleInstalledModuleVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "installed_module_version", kind: "message", T: InstalledModuleVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleInstalledModuleVersionResponse {
    return new SingleInstalledModuleVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleInstalledModuleVersionResponse {
    return new SingleInstalledModuleVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleInstalledModuleVersionResponse {
    return new SingleInstalledModuleVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleInstalledModuleVersionResponse | PlainMessage<SingleInstalledModuleVersionResponse> | undefined, b: SingleInstalledModuleVersionResponse | PlainMessage<SingleInstalledModuleVersionResponse> | undefined): boolean {
    return proto3.util.equals(SingleInstalledModuleVersionResponse, a, b);
  }
}

/**
 * MultiInstalledModuleVersionResponse
 *
 * @generated from message clarifai.api.MultiInstalledModuleVersionResponse
 */
export class MultiInstalledModuleVersionResponse extends Message<MultiInstalledModuleVersionResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.InstalledModuleVersion installed_module_versions = 2;
   */
  installedModuleVersions: InstalledModuleVersion[] = [];

  constructor(data?: PartialMessage<MultiInstalledModuleVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiInstalledModuleVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "installed_module_versions", kind: "message", T: InstalledModuleVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiInstalledModuleVersionResponse {
    return new MultiInstalledModuleVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiInstalledModuleVersionResponse {
    return new MultiInstalledModuleVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiInstalledModuleVersionResponse {
    return new MultiInstalledModuleVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiInstalledModuleVersionResponse | PlainMessage<MultiInstalledModuleVersionResponse> | undefined, b: MultiInstalledModuleVersionResponse | PlainMessage<MultiInstalledModuleVersionResponse> | undefined): boolean {
    return proto3.util.equals(MultiInstalledModuleVersionResponse, a, b);
  }
}

/**
 * ListNextTaskAssignmentsRequest
 *
 * @generated from message clarifai.api.ListNextTaskAssignmentsRequest
 */
export class ListNextTaskAssignmentsRequest extends Message<ListNextTaskAssignmentsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string task_id = 2;
   */
  taskId = "";

  constructor(data?: PartialMessage<ListNextTaskAssignmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListNextTaskAssignmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNextTaskAssignmentsRequest {
    return new ListNextTaskAssignmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNextTaskAssignmentsRequest {
    return new ListNextTaskAssignmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNextTaskAssignmentsRequest {
    return new ListNextTaskAssignmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNextTaskAssignmentsRequest | PlainMessage<ListNextTaskAssignmentsRequest> | undefined, b: ListNextTaskAssignmentsRequest | PlainMessage<ListNextTaskAssignmentsRequest> | undefined): boolean {
    return proto3.util.equals(ListNextTaskAssignmentsRequest, a, b);
  }
}

/**
 * Request to perform bulk operations on a list of inputs based on input source.
 *
 * @generated from message clarifai.api.PostBulkOperationsRequest
 */
export class PostBulkOperationsRequest extends Message<PostBulkOperationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of bulk operation(s) to be performed e.g bulk update metadata or tags or labels etc.
   *
   * @generated from field: repeated clarifai.api.BulkOperation bulk_operations = 2;
   */
  bulkOperations: BulkOperation[] = [];

  constructor(data?: PartialMessage<PostBulkOperationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostBulkOperationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "bulk_operations", kind: "message", T: BulkOperation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostBulkOperationsRequest {
    return new PostBulkOperationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostBulkOperationsRequest {
    return new PostBulkOperationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostBulkOperationsRequest {
    return new PostBulkOperationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostBulkOperationsRequest | PlainMessage<PostBulkOperationsRequest> | undefined, b: PostBulkOperationsRequest | PlainMessage<PostBulkOperationsRequest> | undefined): boolean {
    return proto3.util.equals(PostBulkOperationsRequest, a, b);
  }
}

/**
 * Request to list all the bulk operations.
 *
 * @generated from message clarifai.api.ListBulkOperationsRequest
 */
export class ListBulkOperationsRequest extends Message<ListBulkOperationsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListBulkOperationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListBulkOperationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBulkOperationsRequest {
    return new ListBulkOperationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBulkOperationsRequest {
    return new ListBulkOperationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBulkOperationsRequest {
    return new ListBulkOperationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBulkOperationsRequest | PlainMessage<ListBulkOperationsRequest> | undefined, b: ListBulkOperationsRequest | PlainMessage<ListBulkOperationsRequest> | undefined): boolean {
    return proto3.util.equals(ListBulkOperationsRequest, a, b);
  }
}

/**
 * Request to get the details of a bulk operation by ID.
 *
 * @generated from message clarifai.api.GetBulkOperationRequest
 */
export class GetBulkOperationRequest extends Message<GetBulkOperationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * The bulk operation id
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetBulkOperationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetBulkOperationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBulkOperationRequest {
    return new GetBulkOperationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBulkOperationRequest {
    return new GetBulkOperationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBulkOperationRequest {
    return new GetBulkOperationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBulkOperationRequest | PlainMessage<GetBulkOperationRequest> | undefined, b: GetBulkOperationRequest | PlainMessage<GetBulkOperationRequest> | undefined): boolean {
    return proto3.util.equals(GetBulkOperationRequest, a, b);
  }
}

/**
 * Cancel a list of bulk operation ids
 *
 * @generated from message clarifai.api.CancelBulkOperationRequest
 */
export class CancelBulkOperationRequest extends Message<CancelBulkOperationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of bulk operation ids to be cancelled
   *
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<CancelBulkOperationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.CancelBulkOperationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBulkOperationRequest {
    return new CancelBulkOperationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBulkOperationRequest {
    return new CancelBulkOperationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBulkOperationRequest {
    return new CancelBulkOperationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBulkOperationRequest | PlainMessage<CancelBulkOperationRequest> | undefined, b: CancelBulkOperationRequest | PlainMessage<CancelBulkOperationRequest> | undefined): boolean {
    return proto3.util.equals(CancelBulkOperationRequest, a, b);
  }
}

/**
 * Request to delete the terminated bulk operations by ID
 * Only operations in terminated state can be deleted.
 *
 * @generated from message clarifai.api.DeleteBulkOperationRequest
 */
export class DeleteBulkOperationRequest extends Message<DeleteBulkOperationRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * List of bulk operation ids to be deleted
   *
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteBulkOperationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteBulkOperationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBulkOperationRequest {
    return new DeleteBulkOperationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBulkOperationRequest {
    return new DeleteBulkOperationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBulkOperationRequest {
    return new DeleteBulkOperationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBulkOperationRequest | PlainMessage<DeleteBulkOperationRequest> | undefined, b: DeleteBulkOperationRequest | PlainMessage<DeleteBulkOperationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBulkOperationRequest, a, b);
  }
}

/**
 * SingleBulkOperationsResponse
 *
 * @generated from message clarifai.api.SingleBulkOperationsResponse
 */
export class SingleBulkOperationsResponse extends Message<SingleBulkOperationsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.BulkOperation bulk_operation = 2;
   */
  bulkOperation?: BulkOperation;

  constructor(data?: PartialMessage<SingleBulkOperationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleBulkOperationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "bulk_operation", kind: "message", T: BulkOperation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleBulkOperationsResponse {
    return new SingleBulkOperationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleBulkOperationsResponse {
    return new SingleBulkOperationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleBulkOperationsResponse {
    return new SingleBulkOperationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleBulkOperationsResponse | PlainMessage<SingleBulkOperationsResponse> | undefined, b: SingleBulkOperationsResponse | PlainMessage<SingleBulkOperationsResponse> | undefined): boolean {
    return proto3.util.equals(SingleBulkOperationsResponse, a, b);
  }
}

/**
 * MultiBulkOperationsResponse
 *
 * @generated from message clarifai.api.MultiBulkOperationsResponse
 */
export class MultiBulkOperationsResponse extends Message<MultiBulkOperationsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.BulkOperation bulk_operation = 2;
   */
  bulkOperation: BulkOperation[] = [];

  constructor(data?: PartialMessage<MultiBulkOperationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiBulkOperationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "bulk_operation", kind: "message", T: BulkOperation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiBulkOperationsResponse {
    return new MultiBulkOperationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiBulkOperationsResponse {
    return new MultiBulkOperationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiBulkOperationsResponse {
    return new MultiBulkOperationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiBulkOperationsResponse | PlainMessage<MultiBulkOperationsResponse> | undefined, b: MultiBulkOperationsResponse | PlainMessage<MultiBulkOperationsResponse> | undefined): boolean {
    return proto3.util.equals(MultiBulkOperationsResponse, a, b);
  }
}

/**
 * PutTaskAssignmentsRequest
 *
 * @generated from message clarifai.api.PutTaskAssignmentsRequest
 */
export class PutTaskAssignmentsRequest extends Message<PutTaskAssignmentsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string task_id = 2;
   */
  taskId = "";

  /**
   * @generated from field: string input_id = 3;
   */
  inputId = "";

  constructor(data?: PartialMessage<PutTaskAssignmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PutTaskAssignmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "input_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutTaskAssignmentsRequest {
    return new PutTaskAssignmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutTaskAssignmentsRequest {
    return new PutTaskAssignmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutTaskAssignmentsRequest {
    return new PutTaskAssignmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutTaskAssignmentsRequest | PlainMessage<PutTaskAssignmentsRequest> | undefined, b: PutTaskAssignmentsRequest | PlainMessage<PutTaskAssignmentsRequest> | undefined): boolean {
    return proto3.util.equals(PutTaskAssignmentsRequest, a, b);
  }
}

/**
 * PostWaitlistEmailsRequest is the request for adding new e-mail addresses to
 * a feature waiting list.
 *
 * @generated from message clarifai.api.PostWaitlistEmailsRequest
 */
export class PostWaitlistEmailsRequest extends Message<PostWaitlistEmailsRequest> {
  /**
   * Name of the feature waiting list where to add the emails.
   *
   * @generated from field: string feature = 1;
   */
  feature = "";

  /**
   * E-mail addresses to add to the feature waiting list.
   *
   * @generated from field: repeated clarifai.api.WaitlistEmail waitlist_emails = 2;
   */
  waitlistEmails: WaitlistEmail[] = [];

  /**
   * CAPTCHA user response token to verify that the request was made by a human.
   *
   * @generated from field: string captcha_response_token = 3;
   */
  captchaResponseToken = "";

  /**
   * same as captcha_response_token but for callers that are opted-in to v3 captcha
   *
   * @generated from field: string captcha_response_token_v3 = 4;
   */
  captchaResponseTokenV3 = "";

  constructor(data?: PartialMessage<PostWaitlistEmailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostWaitlistEmailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "waitlist_emails", kind: "message", T: WaitlistEmail, repeated: true },
    { no: 3, name: "captcha_response_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "captcha_response_token_v3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostWaitlistEmailsRequest {
    return new PostWaitlistEmailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostWaitlistEmailsRequest {
    return new PostWaitlistEmailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostWaitlistEmailsRequest {
    return new PostWaitlistEmailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostWaitlistEmailsRequest | PlainMessage<PostWaitlistEmailsRequest> | undefined, b: PostWaitlistEmailsRequest | PlainMessage<PostWaitlistEmailsRequest> | undefined): boolean {
    return proto3.util.equals(PostWaitlistEmailsRequest, a, b);
  }
}

/**
 * MultiWaitlistEmailResponse returns multiple e-mail addresses on a feature waiting list.
 *
 * @generated from message clarifai.api.MultiWaitlistEmailResponse
 */
export class MultiWaitlistEmailResponse extends Message<MultiWaitlistEmailResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.WaitlistEmail waitlist_emails = 2;
   */
  waitlistEmails: WaitlistEmail[] = [];

  constructor(data?: PartialMessage<MultiWaitlistEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiWaitlistEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "waitlist_emails", kind: "message", T: WaitlistEmail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiWaitlistEmailResponse {
    return new MultiWaitlistEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiWaitlistEmailResponse {
    return new MultiWaitlistEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiWaitlistEmailResponse {
    return new MultiWaitlistEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiWaitlistEmailResponse | PlainMessage<MultiWaitlistEmailResponse> | undefined, b: MultiWaitlistEmailResponse | PlainMessage<MultiWaitlistEmailResponse> | undefined): boolean {
    return proto3.util.equals(MultiWaitlistEmailResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.GetSampledPredictMetricsRequest
 */
export class GetSampledPredictMetricsRequest extends Message<GetSampledPredictMetricsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * id of the model. Required field.
   *
   * @generated from field: string model_id = 2;
   */
  modelId = "";

  /**
   * requests sent after this timestamp. Optional field.
   *
   * @generated from field: google.protobuf.Timestamp start_date = 3;
   */
  startDate?: Timestamp;

  /**
   * requests sent before this timestamp. Optional field.
   *
   * @generated from field: google.protobuf.Timestamp end_date = 4;
   */
  endDate?: Timestamp;

  /**
   * min predicted score of the concept
   *
   * @generated from field: float min_score = 5;
   */
  minScore = 0;

  /**
   * max predicted score of the concept
   *
   * @generated from field: float max_score = 6;
   */
  maxScore = 0;

  /**
   * @generated from field: clarifai.api.Pagination pagination = 7;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<GetSampledPredictMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetSampledPredictMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_date", kind: "message", T: Timestamp },
    { no: 4, name: "end_date", kind: "message", T: Timestamp },
    { no: 5, name: "min_score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "max_score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSampledPredictMetricsRequest {
    return new GetSampledPredictMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSampledPredictMetricsRequest {
    return new GetSampledPredictMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSampledPredictMetricsRequest {
    return new GetSampledPredictMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSampledPredictMetricsRequest | PlainMessage<GetSampledPredictMetricsRequest> | undefined, b: GetSampledPredictMetricsRequest | PlainMessage<GetSampledPredictMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetSampledPredictMetricsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiSampledPredictMetricsResponse
 */
export class MultiSampledPredictMetricsResponse extends Message<MultiSampledPredictMetricsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.SamplePredictMetric metrics = 2;
   */
  metrics: SamplePredictMetric[] = [];

  constructor(data?: PartialMessage<MultiSampledPredictMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiSampledPredictMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "metrics", kind: "message", T: SamplePredictMetric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiSampledPredictMetricsResponse {
    return new MultiSampledPredictMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiSampledPredictMetricsResponse {
    return new MultiSampledPredictMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiSampledPredictMetricsResponse {
    return new MultiSampledPredictMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiSampledPredictMetricsResponse | PlainMessage<MultiSampledPredictMetricsResponse> | undefined, b: MultiSampledPredictMetricsResponse | PlainMessage<MultiSampledPredictMetricsResponse> | undefined): boolean {
    return proto3.util.equals(MultiSampledPredictMetricsResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.SamplePredictMetric
 */
export class SamplePredictMetric extends Message<SamplePredictMetric> {
  /**
   * @generated from field: string concept_id = 1;
   */
  conceptId = "";

  /**
   * @generated from field: string concept_name = 2;
   */
  conceptName = "";

  /**
   * @generated from field: uint32 count = 3;
   */
  count = 0;

  constructor(data?: PartialMessage<SamplePredictMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SamplePredictMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "concept_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "concept_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SamplePredictMetric {
    return new SamplePredictMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SamplePredictMetric {
    return new SamplePredictMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SamplePredictMetric {
    return new SamplePredictMetric().fromJsonString(jsonString, options);
  }

  static equals(a: SamplePredictMetric | PlainMessage<SamplePredictMetric> | undefined, b: SamplePredictMetric | PlainMessage<SamplePredictMetric> | undefined): boolean {
    return proto3.util.equals(SamplePredictMetric, a, b);
  }
}

/**
 * Request to initiate ingestion of inputs from Cloud storage
 *
 * @generated from message clarifai.api.PostInputsAddJobsRequest
 */
export class PostInputsAddJobsRequest extends Message<PostInputsAddJobsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.InputsAddJob inputs_add_jobs = 2;
   */
  inputsAddJobs: InputsAddJob[] = [];

  constructor(data?: PartialMessage<PostInputsAddJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostInputsAddJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "inputs_add_jobs", kind: "message", T: InputsAddJob, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostInputsAddJobsRequest {
    return new PostInputsAddJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostInputsAddJobsRequest {
    return new PostInputsAddJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostInputsAddJobsRequest {
    return new PostInputsAddJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostInputsAddJobsRequest | PlainMessage<PostInputsAddJobsRequest> | undefined, b: PostInputsAddJobsRequest | PlainMessage<PostInputsAddJobsRequest> | undefined): boolean {
    return proto3.util.equals(PostInputsAddJobsRequest, a, b);
  }
}

/**
 * List all the input ingestion jobs
 *
 * @generated from message clarifai.api.ListInputsAddJobsRequest
 */
export class ListInputsAddJobsRequest extends Message<ListInputsAddJobsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListInputsAddJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListInputsAddJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInputsAddJobsRequest {
    return new ListInputsAddJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInputsAddJobsRequest {
    return new ListInputsAddJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInputsAddJobsRequest {
    return new ListInputsAddJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInputsAddJobsRequest | PlainMessage<ListInputsAddJobsRequest> | undefined, b: ListInputsAddJobsRequest | PlainMessage<ListInputsAddJobsRequest> | undefined): boolean {
    return proto3.util.equals(ListInputsAddJobsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.GetInputsAddJobRequest
 */
export class GetInputsAddJobRequest extends Message<GetInputsAddJobRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * id of add inputs job
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetInputsAddJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetInputsAddJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInputsAddJobRequest {
    return new GetInputsAddJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInputsAddJobRequest {
    return new GetInputsAddJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInputsAddJobRequest {
    return new GetInputsAddJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInputsAddJobRequest | PlainMessage<GetInputsAddJobRequest> | undefined, b: GetInputsAddJobRequest | PlainMessage<GetInputsAddJobRequest> | undefined): boolean {
    return proto3.util.equals(GetInputsAddJobRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.CancelInputsAddJobRequest
 */
export class CancelInputsAddJobRequest extends Message<CancelInputsAddJobRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * id of add inputs job to be cancelled
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<CancelInputsAddJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.CancelInputsAddJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelInputsAddJobRequest {
    return new CancelInputsAddJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelInputsAddJobRequest {
    return new CancelInputsAddJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelInputsAddJobRequest {
    return new CancelInputsAddJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelInputsAddJobRequest | PlainMessage<CancelInputsAddJobRequest> | undefined, b: CancelInputsAddJobRequest | PlainMessage<CancelInputsAddJobRequest> | undefined): boolean {
    return proto3.util.equals(CancelInputsAddJobRequest, a, b);
  }
}

/**
 * MultiInputsAddJobsResponse
 *
 * @generated from message clarifai.api.MultiInputsAddJobsResponse
 */
export class MultiInputsAddJobsResponse extends Message<MultiInputsAddJobsResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.InputsAddJob inputs_add_jobs = 2;
   */
  inputsAddJobs: InputsAddJob[] = [];

  constructor(data?: PartialMessage<MultiInputsAddJobsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiInputsAddJobsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "inputs_add_jobs", kind: "message", T: InputsAddJob, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiInputsAddJobsResponse {
    return new MultiInputsAddJobsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiInputsAddJobsResponse {
    return new MultiInputsAddJobsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiInputsAddJobsResponse {
    return new MultiInputsAddJobsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiInputsAddJobsResponse | PlainMessage<MultiInputsAddJobsResponse> | undefined, b: MultiInputsAddJobsResponse | PlainMessage<MultiInputsAddJobsResponse> | undefined): boolean {
    return proto3.util.equals(MultiInputsAddJobsResponse, a, b);
  }
}

/**
 * SingleInputsAddJobResponse
 *
 * @generated from message clarifai.api.SingleInputsAddJobResponse
 */
export class SingleInputsAddJobResponse extends Message<SingleInputsAddJobResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.InputsAddJob inputs_add_job = 2;
   */
  inputsAddJob?: InputsAddJob;

  constructor(data?: PartialMessage<SingleInputsAddJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleInputsAddJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "inputs_add_job", kind: "message", T: InputsAddJob },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleInputsAddJobResponse {
    return new SingleInputsAddJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleInputsAddJobResponse {
    return new SingleInputsAddJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleInputsAddJobResponse {
    return new SingleInputsAddJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleInputsAddJobResponse | PlainMessage<SingleInputsAddJobResponse> | undefined, b: SingleInputsAddJobResponse | PlainMessage<SingleInputsAddJobResponse> | undefined): boolean {
    return proto3.util.equals(SingleInputsAddJobResponse, a, b);
  }
}

/**
 * Start a multipart upload
 *
 * @generated from message clarifai.api.PostUploadsRequest
 */
export class PostUploadsRequest extends Message<PostUploadsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated clarifai.api.Upload uploads = 2;
   */
  uploads: Upload[] = [];

  constructor(data?: PartialMessage<PostUploadsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PostUploadsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "uploads", kind: "message", T: Upload, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostUploadsRequest {
    return new PostUploadsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostUploadsRequest {
    return new PostUploadsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostUploadsRequest {
    return new PostUploadsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostUploadsRequest | PlainMessage<PostUploadsRequest> | undefined, b: PostUploadsRequest | PlainMessage<PostUploadsRequest> | undefined): boolean {
    return proto3.util.equals(PostUploadsRequest, a, b);
  }
}

/**
 * Stops or deletes multipart upload
 *
 * @generated from message clarifai.api.DeleteUploadsRequest
 */
export class DeleteUploadsRequest extends Message<DeleteUploadsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteUploadsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.DeleteUploadsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUploadsRequest {
    return new DeleteUploadsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUploadsRequest {
    return new DeleteUploadsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUploadsRequest {
    return new DeleteUploadsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUploadsRequest | PlainMessage<DeleteUploadsRequest> | undefined, b: DeleteUploadsRequest | PlainMessage<DeleteUploadsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUploadsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.ListUploadsRequest
 */
export class ListUploadsRequest extends Message<ListUploadsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
   * Defaults to 1.
   *
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * (optional URL parameter) The number of results that will be contained in each page. Defaults
   * to 128.
   *
   * @generated from field: uint32 per_page = 3;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ListUploadsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.ListUploadsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "per_page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUploadsRequest {
    return new ListUploadsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUploadsRequest {
    return new ListUploadsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUploadsRequest {
    return new ListUploadsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUploadsRequest | PlainMessage<ListUploadsRequest> | undefined, b: ListUploadsRequest | PlainMessage<ListUploadsRequest> | undefined): boolean {
    return proto3.util.equals(ListUploadsRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.GetUploadRequest
 */
export class GetUploadRequest extends Message<GetUploadRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * Upload ID
   *
   * @generated from field: string upload_id = 2;
   */
  uploadId = "";

  constructor(data?: PartialMessage<GetUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.GetUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "upload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUploadRequest {
    return new GetUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUploadRequest {
    return new GetUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUploadRequest {
    return new GetUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUploadRequest | PlainMessage<GetUploadRequest> | undefined, b: GetUploadRequest | PlainMessage<GetUploadRequest> | undefined): boolean {
    return proto3.util.equals(GetUploadRequest, a, b);
  }
}

/**
 * @generated from message clarifai.api.SingleUploadResponse
 */
export class SingleUploadResponse extends Message<SingleUploadResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: clarifai.api.Upload upload = 2;
   */
  upload?: Upload;

  constructor(data?: PartialMessage<SingleUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.SingleUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "upload", kind: "message", T: Upload },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleUploadResponse {
    return new SingleUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleUploadResponse {
    return new SingleUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleUploadResponse {
    return new SingleUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SingleUploadResponse | PlainMessage<SingleUploadResponse> | undefined, b: SingleUploadResponse | PlainMessage<SingleUploadResponse> | undefined): boolean {
    return proto3.util.equals(SingleUploadResponse, a, b);
  }
}

/**
 * @generated from message clarifai.api.MultiUploadResponse
 */
export class MultiUploadResponse extends Message<MultiUploadResponse> {
  /**
   * @generated from field: clarifai.api.status.Status status = 1;
   */
  status?: Status;

  /**
   * @generated from field: repeated clarifai.api.Upload uploads = 2;
   */
  uploads: Upload[] = [];

  constructor(data?: PartialMessage<MultiUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.MultiUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "uploads", kind: "message", T: Upload, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiUploadResponse {
    return new MultiUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiUploadResponse {
    return new MultiUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiUploadResponse {
    return new MultiUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MultiUploadResponse | PlainMessage<MultiUploadResponse> | undefined, b: MultiUploadResponse | PlainMessage<MultiUploadResponse> | undefined): boolean {
    return proto3.util.equals(MultiUploadResponse, a, b);
  }
}

/**
 * Upload part of multipart upload
 *
 * @generated from message clarifai.api.PutUploadContentPartsRequest
 */
export class PutUploadContentPartsRequest extends Message<PutUploadContentPartsRequest> {
  /**
   * @generated from field: clarifai.api.UserAppIDSet user_app_id = 1;
   */
  userAppId?: UserAppIDSet;

  /**
   * @generated from field: string upload_id = 2;
   */
  uploadId = "";

  /**
   * @generated from field: repeated clarifai.api.UploadContentPart content_parts = 3;
   */
  contentParts: UploadContentPart[] = [];

  constructor(data?: PartialMessage<PutUploadContentPartsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.api.PutUploadContentPartsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_app_id", kind: "message", T: UserAppIDSet },
    { no: 2, name: "upload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content_parts", kind: "message", T: UploadContentPart, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutUploadContentPartsRequest {
    return new PutUploadContentPartsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutUploadContentPartsRequest {
    return new PutUploadContentPartsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutUploadContentPartsRequest {
    return new PutUploadContentPartsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutUploadContentPartsRequest | PlainMessage<PutUploadContentPartsRequest> | undefined, b: PutUploadContentPartsRequest | PlainMessage<PutUploadContentPartsRequest> | undefined): boolean {
    return proto3.util.equals(PutUploadContentPartsRequest, a, b);
  }
}

