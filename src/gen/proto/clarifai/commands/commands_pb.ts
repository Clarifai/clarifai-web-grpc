// @generated by protoc-gen-es v0.1.0 with parameter "target=ts"
// @generated from file proto/clarifai/commands/commands.proto (package clarifai.commands, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";

/**
 * 
 * Commands the server may send to the client as part of an http response to a request
 *
 * @generated from message clarifai.commands.Commands
 */
export class Commands extends Message<Commands> {
  /**
   * Discard data older than the Unix Epoch in this parameter
   *
   * @generated from field: google.protobuf.Timestamp discard_data_older_than = 1;
   */
  discardDataOlderThan?: Timestamp;

  /**
   * Timeout, in seconds, the client should wait before trying to sync
   *
   * @generated from field: uint32 timeout_delay = 2;
   */
  timeoutDelay = 0;

  /**
   * Interval, in seconds, the client should try to sync
   *
   * @generated from field: uint32 upload_interval = 3;
   */
  uploadInterval = 0;

  /**
   * Opt out of analytics. Default is false (meaning opting-in)
   *
   * @generated from field: bool opt_out = 4;
   */
  optOut = false;

  constructor(data?: PartialMessage<Commands>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.commands.Commands";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discard_data_older_than", kind: "message", T: Timestamp },
    { no: 2, name: "timeout_delay", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "upload_interval", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "opt_out", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Commands {
    return new Commands().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Commands {
    return new Commands().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Commands {
    return new Commands().fromJsonString(jsonString, options);
  }

  static equals(a: Commands | PlainMessage<Commands> | undefined, b: Commands | PlainMessage<Commands> | undefined): boolean {
    return proto3.util.equals(Commands, a, b);
  }
}

