// @generated by protoc-gen-es v0.1.0 with parameter "target=ts"
// @generated from file proto/clarifai/auth/feature_flags/feature_flags.proto (package clarifai.auth.feature_flags, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from enum clarifai.auth.feature_flags.FlagID
 */
export enum FlagID {
  /**
   * introduce undef so that the zero (default/unset) value of the enum is not a real
   * permission. undef is only present for this purpose and should not be used
   * to indicate any "real" value.
   *
   * @generated from enum value: undef = 0;
   */
  undef = 0,

  /**
   * @generated from enum value: All = 1;
   */
  All = 1,

  /**
   * this is a special value used only for tests
   *
   * @generated from enum value: Test = 2;
   */
  Test = 2,

  /**
   * features
   *
   * @generated from enum value: DatastoreAppReindexing = 3;
   */
  DatastoreAppReindexing = 3,

  /**
   * @generated from enum value: DatastoreAppDuplication = 4;
   */
  DatastoreAppDuplication = 4,

  /**
   * @generated from enum value: DatastoreDataCollector = 5;
   */
  DatastoreDataCollector = 5,

  /**
   * @generated from enum value: LabelerVideoInterpolation = 6;
   */
  LabelerVideoInterpolation = 6,

  /**
   * @generated from enum value: LabelerMultiPointPolygon = 7;
   */
  LabelerMultiPointPolygon = 7,

  /**
   * unused, kept for historic reasons
   * appears to be a duplicate of LabelerAIAssistedLabeling
   *
   * @generated from enum value: LabelerLabelSuggestion = 8;
   */
  LabelerLabelSuggestion = 8,

  /**
   * @generated from enum value: LabelerAIAssistedLabeling = 9;
   */
  LabelerAIAssistedLabeling = 9,

  /**
   * @generated from enum value: LabelerLabelingTasks = 10;
   */
  LabelerLabelingTasks = 10,

  /**
   * @generated from enum value: LabelerLabelingAsAService = 11;
   */
  LabelerLabelingAsAService = 11,

  /**
   * @generated from enum value: LabelerTaskAssignmentRule = 12;
   */
  LabelerTaskAssignmentRule = 12,

  /**
   * @generated from enum value: LabelerOptimizedTaskReview = 13;
   */
  LabelerOptimizedTaskReview = 13,

  /**
   * @generated from enum value: TrainingDeepTraining = 14;
   */
  TrainingDeepTraining = 14,

  /**
   * @generated from enum value: TrainingCustomFacialRecognition = 15;
   */
  TrainingCustomFacialRecognition = 15,

  /**
   * @generated from enum value: ModelConceptThresholder = 16;
   */
  ModelConceptThresholder = 16,

  /**
   * @generated from enum value: ModelAnnotationWriter = 17;
   */
  ModelAnnotationWriter = 17,

  /**
   * @generated from enum value: ModelVisualClassifier = 18;
   */
  ModelVisualClassifier = 18,

  /**
   * @generated from enum value: ModelVisualEmbedder = 19;
   */
  ModelVisualEmbedder = 19,

  /**
   * @generated from enum value: ModelVisualDetector = 20;
   */
  ModelVisualDetector = 20,

  /**
   * @generated from enum value: ModelRandomSample = 21;
   */
  ModelRandomSample = 21,

  /**
   * @generated from enum value: LabelerConsensusReview = 22;
   */
  LabelerConsensusReview = 22,

  /**
   * @generated from enum value: AppAddCollaborators = 23;
   */
  AppAddCollaborators = 23,

  /**
   * @generated from enum value: OrgCreateOrganization = 24;
   */
  OrgCreateOrganization = 24,

  /**
   * @generated from enum value: AccessPortalV2 = 25;
   */
  AccessPortalV2 = 25,

  /**
   * @generated from enum value: ModelUpload = 26;
   */
  ModelUpload = 26,
}
// Retrieve enum metadata with: proto3.getEnumType(FlagID)
proto3.util.setEnumType(FlagID, "clarifai.auth.feature_flags.FlagID", [
  { no: 0, name: "undef" },
  { no: 1, name: "All" },
  { no: 2, name: "Test" },
  { no: 3, name: "DatastoreAppReindexing" },
  { no: 4, name: "DatastoreAppDuplication" },
  { no: 5, name: "DatastoreDataCollector" },
  { no: 6, name: "LabelerVideoInterpolation" },
  { no: 7, name: "LabelerMultiPointPolygon" },
  { no: 8, name: "LabelerLabelSuggestion" },
  { no: 9, name: "LabelerAIAssistedLabeling" },
  { no: 10, name: "LabelerLabelingTasks" },
  { no: 11, name: "LabelerLabelingAsAService" },
  { no: 12, name: "LabelerTaskAssignmentRule" },
  { no: 13, name: "LabelerOptimizedTaskReview" },
  { no: 14, name: "TrainingDeepTraining" },
  { no: 15, name: "TrainingCustomFacialRecognition" },
  { no: 16, name: "ModelConceptThresholder" },
  { no: 17, name: "ModelAnnotationWriter" },
  { no: 18, name: "ModelVisualClassifier" },
  { no: 19, name: "ModelVisualEmbedder" },
  { no: 20, name: "ModelVisualDetector" },
  { no: 21, name: "ModelRandomSample" },
  { no: 22, name: "LabelerConsensusReview" },
  { no: 23, name: "AppAddCollaborators" },
  { no: 24, name: "OrgCreateOrganization" },
  { no: 25, name: "AccessPortalV2" },
  { no: 26, name: "ModelUpload" },
]);

/**
 * @generated from message clarifai.auth.feature_flags.FlagList
 */
export class FlagList extends Message<FlagList> {
  /**
   * These are the list of low-level flags to check from the enum below.
   *
   * @generated from field: repeated clarifai.auth.feature_flags.Flag flags = 1;
   */
  flags: Flag[] = [];

  constructor(data?: PartialMessage<FlagList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.auth.feature_flags.FlagList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flags", kind: "message", T: Flag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlagList {
    return new FlagList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlagList {
    return new FlagList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlagList {
    return new FlagList().fromJsonString(jsonString, options);
  }

  static equals(a: FlagList | PlainMessage<FlagList> | undefined, b: FlagList | PlainMessage<FlagList> | undefined): boolean {
    return proto3.util.equals(FlagList, a, b);
  }
}

/**
 * @generated from message clarifai.auth.feature_flags.Flag
 */
export class Flag extends Message<Flag> {
  /**
   * @generated from field: clarifai.auth.feature_flags.FlagID flag_id = 1;
   */
  flagId = FlagID.undef;

  /**
   * @generated from field: uint32 value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<Flag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "clarifai.auth.feature_flags.Flag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flag_id", kind: "enum", T: proto3.getEnumType(FlagID) },
    { no: 2, name: "value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Flag {
    return new Flag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Flag {
    return new Flag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Flag {
    return new Flag().fromJsonString(jsonString, options);
  }

  static equals(a: Flag | PlainMessage<Flag> | undefined, b: Flag | PlainMessage<Flag> | undefined): boolean {
    return proto3.util.equals(Flag, a, b);
  }
}

